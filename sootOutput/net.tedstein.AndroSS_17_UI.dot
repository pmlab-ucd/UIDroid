digraph "callgraph" {
    "<dummyMainClass: void dummyMainMethod()>"
    "<java.lang.System: void loadLibrary(java.lang.String)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>";
    "<net.tedstein.AndroSS.ConfigurationActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity: boolean onOptionsItemSelected(android.view.MenuItem)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: boolean onCreateOptionsMenu(android.view.Menu)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity: boolean onCreateOptionsMenu(android.view.Menu)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onActivityResult(int,int,android.content.Intent)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity: void onActivityResult(int,int,android.content.Intent)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onStop()>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity: void onStop()>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onRestart()>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity: void onRestart()>";
    "<net.tedstein.AndroSS.ConfigurationActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$6: void onCheckedChanged(android.widget.CompoundButton,boolean)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity$6: void onCheckedChanged(android.widget.CompoundButton,boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$5: void onCheckedChanged(android.widget.CompoundButton,boolean)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity$5: void onCheckedChanged(android.widget.CompoundButton,boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$4: void onCheckedChanged(android.widget.CompoundButton,boolean)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity$4: void onCheckedChanged(android.widget.CompoundButton,boolean)>";
    "<net.tedstein.AndroSS.util.RootUtils$1: void onClick(android.content.DialogInterface,int)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.util.RootUtils$1: void onClick(android.content.DialogInterface,int)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$2: void onCheckedChanged(android.widget.CompoundButton,boolean)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity$2: void onCheckedChanged(android.widget.CompoundButton,boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$8: void onCheckedChanged(android.widget.CompoundButton,boolean)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity$8: void onCheckedChanged(android.widget.CompoundButton,boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$7: void onCheckedChanged(android.widget.CompoundButton,boolean)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.ConfigurationActivity$7: void onCheckedChanged(android.widget.CompoundButton,boolean)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>";
    "<net.tedstein.AndroSS.MoreSettings: void onResume()>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.MoreSettings: void onResume()>";
    "<net.tedstein.AndroSS.MoreSettings$5: boolean onPreferenceClick(android.preference.Preference)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.MoreSettings$5: boolean onPreferenceClick(android.preference.Preference)>";
    "<net.tedstein.AndroSS.MoreSettings$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.MoreSettings$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>";
    "<net.tedstein.AndroSS.MoreSettings$4: boolean onPreferenceClick(android.preference.Preference)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.MoreSettings$4: boolean onPreferenceClick(android.preference.Preference)>";
    "<net.tedstein.AndroSS.MoreSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.MoreSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>";
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.util.RootUtils$1: void onClick(android.content.DialogInterface,int)>";
    "<net.tedstein.AndroSS.MoreSettings$3: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.MoreSettings$3: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>";
    "<net.tedstein.AndroSS.CameraButtonReceiver: void onReceive(android.content.Context,android.content.Intent)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.CameraButtonReceiver: void onReceive(android.content.Context,android.content.Intent)>";
    "<net.tedstein.AndroSS.GLDetector: void onCreate(android.os.Bundle)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.GLDetector: void onCreate(android.os.Bundle)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>";
    "<net.tedstein.AndroSS.AndroSSService: void onCreate()>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.AndroSSService: void onCreate()>";
    "<net.tedstein.AndroSS.AndroSSService: int onStartCommand(android.content.Intent,int,int)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.AndroSSService: int onStartCommand(android.content.Intent,int,int)>";
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>";
    "<net.tedstein.AndroSS.AndroSSService: android.os.IBinder onBind(android.content.Intent)>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.AndroSSService: android.os.IBinder onBind(android.content.Intent)>";
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>";
    "<net.tedstein.AndroSS.AndroSSService: void onDestroy()>"
    "<dummyMainClass: void dummyMainMethod()>"->"<net.tedstein.AndroSS.AndroSSService: void onDestroy()>";
    "<android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getOpenGLVendor(android.content.Context)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getOpenGLVendor(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType valueOf(java.lang.String)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType valueOf(java.lang.String)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onActivityResult(int,int,android.content.Intent)>"->"<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>";
    "<android.util.Log: int d(java.lang.String,java.lang.String)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onActivityResult(int,int,android.content.Intent)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onActivityResult(int,int,android.content.Intent)>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: void setOpenGLVendor(java.lang.String)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onActivityResult(int,int,android.content.Intent)>"->"<net.tedstein.AndroSS.AndroSSService: void setOpenGLVendor(java.lang.String)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>"
    "<net.tedstein.AndroSS.ConfigurationActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: net.tedstein.AndroSS.AndroSSService$DeviceType access$000(net.tedstein.AndroSS.ConfigurationActivity)>"
    "<net.tedstein.AndroSS.ConfigurationActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<net.tedstein.AndroSS.ConfigurationActivity: net.tedstein.AndroSS.AndroSSService$DeviceType access$000(net.tedstein.AndroSS.ConfigurationActivity)>";
    "<net.tedstein.AndroSS.util.RootUtils$1: void onClick(android.content.DialogInterface,int)>"->"<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"
    "<net.tedstein.AndroSS.util.RootUtils$1: void onClick(android.content.DialogInterface,int)>"->"<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"
    "<net.tedstein.AndroSS.util.RootUtils$1: void onClick(android.content.DialogInterface,int)>"->"<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>";
    "<net.tedstein.AndroSS.util.RootUtils: java.lang.String[] access$000()>"
    "<net.tedstein.AndroSS.util.RootUtils$1: void onClick(android.content.DialogInterface,int)>"->"<net.tedstein.AndroSS.util.RootUtils: java.lang.String[] access$000()>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean getRotationEnabled()>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<net.tedstein.AndroSS.AndroSSService: boolean getRotationEnabled()>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getSuPath(android.content.Context)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getSuPath(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getOutputDir(android.content.Context)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getOutputDir(android.content.Context)>";
    "<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>"
    "<net.tedstein.AndroSS.MoreSettings$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>";
    "<net.tedstein.AndroSS.MoreSettings$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>";
    "<net.tedstein.AndroSS.MoreSettings$4: boolean onPreferenceClick(android.preference.Preference)>"->"<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>";
    "<net.tedstein.AndroSS.MoreSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"
    "<net.tedstein.AndroSS.MoreSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void setRotationEnabled(boolean)>"
    "<net.tedstein.AndroSS.MoreSettings$3: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<net.tedstein.AndroSS.AndroSSService: void setRotationEnabled(boolean)>";
    "<net.tedstein.AndroSS.CameraButtonReceiver: void onReceive(android.content.Context,android.content.Intent)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean isEnabled()>"
    "<net.tedstein.AndroSS.CameraButtonReceiver: void onReceive(android.content.Context,android.content.Intent)>"->"<net.tedstein.AndroSS.AndroSSService: boolean isEnabled()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean isCameraButtonEnabled()>"
    "<net.tedstein.AndroSS.CameraButtonReceiver: void onReceive(android.content.Context,android.content.Intent)>"->"<net.tedstein.AndroSS.AndroSSService: boolean isCameraButtonEnabled()>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<java.lang.Integer: java.lang.Integer valueOf(int)>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getParamString(android.content.Context)>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getParamString(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: void onCreate()>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void onCreate()>"->"<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>";
    "<net.tedstein.AndroSS.AndroSSService: void setEnabled(boolean)>"
    "<net.tedstein.AndroSS.AndroSSService: void onCreate()>"->"<net.tedstein.AndroSS.AndroSSService: void setEnabled(boolean)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean isPersistent()>"
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<net.tedstein.AndroSS.AndroSSService: boolean isPersistent()>";
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<java.lang.Long: java.lang.Long valueOf(long)>"
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<java.lang.Double: java.lang.Double valueOf(double)>"
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<java.lang.Double: java.lang.Double valueOf(double)>";
    "<java.lang.Math: double sqrt(double)>"
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<java.lang.Math: double sqrt(double)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean isShakeEnabled()>"
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<net.tedstein.AndroSS.AndroSSService: boolean isShakeEnabled()>";
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<net.tedstein.AndroSS.AndroSSService: boolean isEnabled()>";
    "<net.tedstein.AndroSS.AndroSSService: void onDestroy()>"->"<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>";
    "<net.tedstein.AndroSS.AndroSSService: void onDestroy()>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void onDestroy()>"->"<net.tedstein.AndroSS.AndroSSService: void setEnabled(boolean)>";
    "<net.tedstein.AndroSS.AndroSSService: void initSharedPreferences(android.content.Context)>"
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getOpenGLVendor(android.content.Context)>"->"<net.tedstein.AndroSS.AndroSSService: void initSharedPreferences(android.content.Context)>";
    "<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType valueOf(java.lang.String)>"->"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getOpenGLVendor(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<java.lang.Runtime: java.lang.Runtime getRuntime()>"
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<java.lang.Runtime: java.lang.Runtime getRuntime()>";
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<net.tedstein.AndroSS.AndroSSService: void initSharedPreferences(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getSuPath(android.content.Context)>"->"<net.tedstein.AndroSS.AndroSSService: void initSharedPreferences(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getOutputDir(android.content.Context)>"->"<net.tedstein.AndroSS.AndroSSService: void initSharedPreferences(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<net.tedstein.AndroSS.AndroSSService: void initSharedPreferences(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getFBInfo(int,java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getParamString(android.content.Context)>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getFBInfo(int,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getParamString(android.content.Context)>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.lang.Runtime: java.lang.Runtime getRuntime()>";
    "<android.util.Base64: byte[] decode(java.lang.String,int)>"
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<android.util.Base64: byte[] decode(java.lang.String,int)>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>";
    "<android.util.Base64: byte[] decode(byte[],int)>"
    "<android.util.Base64: byte[] decode(java.lang.String,int)>"->"<android.util.Base64: byte[] decode(byte[],int)>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"
    "<android.util.Base64: byte[] decode(byte[],int,int,int)>"
    "<android.util.Base64: byte[] decode(byte[],int)>"->"<android.util.Base64: byte[] decode(byte[],int,int,int)>";
    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
    "<android.util.Base64: byte[] decode(byte[],int,int,int)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<android.view.ContextThemeWrapper: void setTheme(int)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.view.ContextThemeWrapper: void setTheme(int)>";
    "<android.app.Activity: void onCreate(android.os.Bundle)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void onCreate(android.os.Bundle)>";
    "<android.app.Activity: void startActivityForResult(android.content.Intent,int)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void startActivityForResult(android.content.Intent,int)>";
    "<android.app.Activity: void overridePendingTransition(int,int)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void overridePendingTransition(int,int)>";
    "<android.app.Activity: void setContentView(int)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void setContentView(int)>";
    "<java.lang.String: boolean equals(java.lang.Object)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<android.widget.ArrayAdapter: void setDropDownViewResource(int)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.ArrayAdapter: void setDropDownViewResource(int)>";
    "<android.widget.AbsSpinner: void setAdapter(android.widget.SpinnerAdapter)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.AbsSpinner: void setAdapter(android.widget.SpinnerAdapter)>";
    "<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>";
    "<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onCreate(android.os.Bundle)>"->"<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>";
    "<android.app.Activity: void onResume()>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.app.Activity: void onResume()>";
    "<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.ArrayAdapter: void setDropDownViewResource(int)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.AbsSpinner: void setAdapter(android.widget.SpinnerAdapter)>";
    "<android.widget.AbsSpinner: void setSelection(int)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.AbsSpinner: void setSelection(int)>";
    "<android.widget.CompoundButton: void setChecked(boolean)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.CompoundButton: void setChecked(boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.CompoundButton: void setChecked(boolean)>";
    "<java.lang.Enum: java.lang.String name()>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<java.lang.Enum: java.lang.String name()>";
    "<java.lang.Enum: int ordinal()>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<java.lang.Enum: int ordinal()>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.CompoundButton: void setChecked(boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.CompoundButton: void setChecked(boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.CompoundButton: void setChecked(boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.CompoundButton: void setChecked(boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onResume()>"->"<android.widget.CompoundButton: void setChecked(boolean)>";
    "<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"->"<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>";
    "<android.app.Activity: void startActivity(android.content.Intent)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"->"<android.app.Activity: void startActivity(android.content.Intent)>";
    "<android.app.Activity: android.view.MenuInflater getMenuInflater()>"
    "<net.tedstein.AndroSS.ConfigurationActivity: boolean onCreateOptionsMenu(android.view.Menu)>"->"<android.app.Activity: android.view.MenuInflater getMenuInflater()>";
    "<android.view.MenuInflater: void inflate(int,android.view.Menu)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: boolean onCreateOptionsMenu(android.view.Menu)>"->"<android.view.MenuInflater: void inflate(int,android.view.Menu)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onActivityResult(int,int,android.content.Intent)>"->"<android.app.Activity: void overridePendingTransition(int,int)>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onActivityResult(int,int,android.content.Intent)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onActivityResult(int,int,android.content.Intent)>"->"<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>";
    "<android.app.Activity: void onStop()>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onStop()>"->"<android.app.Activity: void onStop()>";
    "<android.app.Activity: void finish()>"
    "<net.tedstein.AndroSS.ConfigurationActivity: void onStop()>"->"<android.app.Activity: void finish()>";
    "<net.tedstein.AndroSS.ConfigurationActivity: void onRestart()>"->"<android.app.Activity: void onResume()>";
    "<net.tedstein.AndroSS.ConfigurationActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>"
    "<net.tedstein.AndroSS.ConfigurationActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>";
    "<android.content.ContextWrapper: boolean stopService(android.content.Intent)>"
    "<net.tedstein.AndroSS.ConfigurationActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.content.ContextWrapper: boolean stopService(android.content.Intent)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$1: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.widget.CompoundButton: void setChecked(boolean)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$6: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$5: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$4: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<net.tedstein.AndroSS.util.RootUtils$1: void onClick(android.content.DialogInterface,int)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$2: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$8: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<net.tedstein.AndroSS.ConfigurationActivity$7: void onCheckedChanged(android.widget.CompoundButton,boolean)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<android.preference.PreferenceActivity: void onCreate(android.os.Bundle)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.PreferenceActivity: void onCreate(android.os.Bundle)>";
    "<android.preference.PreferenceActivity: void addPreferencesFromResource(int)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.PreferenceActivity: void addPreferencesFromResource(int)>";
    "<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()>";
    "<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)>";
    "<android.preference.EditTextPreference: android.widget.EditText getEditText()>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.EditTextPreference: android.widget.EditText getEditText()>";
    "<android.preference.Preference: void setSummary(java.lang.CharSequence)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.Preference: void setSummary(java.lang.CharSequence)>";
    "<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.EditTextPreference: android.widget.EditText getEditText()>";
    "<android.widget.TextView: void setSingleLine()>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setSingleLine()>";
    "<android.widget.TextView: void setText(java.lang.CharSequence)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setSingleLine()>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.Preference: void setSummary(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>";
    "<android.preference.CheckBoxPreference: void setChecked(boolean)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.CheckBoxPreference: void setChecked(boolean)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>";
    "<android.preference.Preference: void setEnabled(boolean)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.Preference: void setEnabled(boolean)>";
    "<android.preference.PreferenceGroup: void setEnabled(boolean)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.PreferenceGroup: void setEnabled(boolean)>";
    "<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)>"
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)>";
    "<net.tedstein.AndroSS.MoreSettings: void onCreate(android.os.Bundle)>"->"<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)>";
    "<net.tedstein.AndroSS.MoreSettings: void onResume()>"->"<android.app.Activity: void onResume()>";
    "<net.tedstein.AndroSS.MoreSettings$5: boolean onPreferenceClick(android.preference.Preference)>"->"<android.app.Activity: void startActivity(android.content.Intent)>";
    "<net.tedstein.AndroSS.MoreSettings$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<android.preference.Preference: void setSummary(java.lang.CharSequence)>";
    "<android.content.Context: java.lang.String getString(int,java.lang.Object[])>"
    "<net.tedstein.AndroSS.MoreSettings$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<android.content.Context: java.lang.String getString(int,java.lang.Object[])>";
    "<android.widget.Toast: void show()>"
    "<net.tedstein.AndroSS.MoreSettings$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<android.widget.Toast: void show()>";
    "<net.tedstein.AndroSS.MoreSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<android.preference.Preference: void setSummary(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.MoreSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<android.content.Context: java.lang.String getString(int,java.lang.Object[])>";
    "<net.tedstein.AndroSS.MoreSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<android.widget.Toast: void show()>";
    "<java.lang.Boolean: boolean booleanValue()>"
    "<net.tedstein.AndroSS.MoreSettings$3: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>"->"<java.lang.Boolean: boolean booleanValue()>";
    "<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>"
    "<net.tedstein.AndroSS.CameraButtonReceiver: void onReceive(android.content.Context,android.content.Intent)>"->"<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>";
    "<net.tedstein.AndroSS.CameraButtonReceiver: void onReceive(android.content.Context,android.content.Intent)>"->"<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>";
    "<android.content.BroadcastReceiver: void abortBroadcast()>"
    "<net.tedstein.AndroSS.CameraButtonReceiver: void onReceive(android.content.Context,android.content.Intent)>"->"<android.content.BroadcastReceiver: void abortBroadcast()>";
    "<net.tedstein.AndroSS.GLDetector: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void onCreate(android.os.Bundle)>";
    "<android.app.Activity: void setContentView(android.view.View)>"
    "<net.tedstein.AndroSS.GLDetector: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void setContentView(android.view.View)>";
    "<android.opengl.GLSurfaceView: void setRenderer(android.opengl.GLSurfaceView$Renderer)>"
    "<net.tedstein.AndroSS.GLDetector: void onCreate(android.os.Bundle)>"->"<android.opengl.GLSurfaceView: void setRenderer(android.opengl.GLSurfaceView$Renderer)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void onCreate(android.os.Bundle)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void setContentView(int)>";
    "<android.content.Context: java.lang.String getString(int)>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int,java.lang.Object[])>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int,java.lang.Object[])>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int,java.lang.Object[])>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int,java.lang.Object[])>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void setContentView(int)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.Enum: int ordinal()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.lang.String: java.lang.String[] split(java.lang.String)>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<android.widget.TextView: void setTextSize(int,float)>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setTextSize(int,float)>";
    "<android.widget.TextView: void setText(int)>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(int)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<android.view.ViewGroup: void removeAllViews()>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.view.ViewGroup: void removeAllViews()>";
    "<android.view.ViewGroup: void addView(android.view.View)>"
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.view.ViewGroup: void addView(android.view.View)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.view.ViewGroup: void addView(android.view.View)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.DebugInfo: void onCreate(android.os.Bundle)>"->"<android.widget.TextView: void setText(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"
    "<net.tedstein.AndroSS.AndroSSService: void onCreate()>"->"<net.tedstein.AndroSS.AndroSSService: boolean init()>";
    "<android.app.Service: void stopSelf()>"
    "<net.tedstein.AndroSS.AndroSSService: void onCreate()>"->"<android.app.Service: void stopSelf()>";
    "<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>"
    "<net.tedstein.AndroSS.AndroSSService: void onCreate()>"->"<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>";
    "<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>"
    "<net.tedstein.AndroSS.AndroSSService: void onCreate()>"->"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>";
    "<net.tedstein.AndroSS.AndroSSService: void onCreate()>"->"<android.widget.Toast: void show()>";
    "<android.util.Log: int w(java.lang.String,java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.util.Log: int w(java.lang.String,java.lang.String)>";
    "<java.lang.Integer: int parseInt(java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<android.util.Log: int e(java.lang.String,java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.util.Log: int e(java.lang.String,java.lang.String)>";
    "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getFBInfo(int,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.util.Log: int e(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getFBInfo(int,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<net.tedstein.AndroSS.AndroSSService: void initSharedPreferences(android.content.Context)>";
    "<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>"
    "<net.tedstein.AndroSS.AndroSSService: int onStartCommand(android.content.Intent,int,int)>"->"<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"
    "<net.tedstein.AndroSS.AndroSSService: int onStartCommand(android.content.Intent,int,int)>"->"<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: boolean isPersistent()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<java.lang.String: java.lang.String valueOf(long)>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.String: java.lang.String valueOf(long)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.String: java.lang.String valueOf(long)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.String: java.lang.String valueOf(long)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getOutputDir(android.content.Context)>";
    "<java.util.Calendar: java.util.Calendar getInstance()>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: java.util.Calendar getInstance()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getOutputDir(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: java.util.Calendar getInstance()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: java.util.Calendar getInstance()>";
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$CompressionType getCompressionType()>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$CompressionType getCompressionType()>";
    "<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: boolean getRotationEnabled()>";
    "<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getSuPath(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getSuPath(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: java.util.Calendar getInstance()>";
    "<net.tedstein.AndroSS.AndroSSService: int[] getFBPixels(int,java.lang.String,int,int,int,int,int[],int[])>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: int[] getFBPixels(int,java.lang.String,int,int,int,int,int[],int[])>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: boolean getRotationEnabled()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: java.util.Calendar getInstance()>";
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$CompressionType getCompressionType()>"->"<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType valueOf(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>";
    "<net.tedstein.AndroSS.AndroSSService: void onSensorChanged(android.hardware.SensorEvent)>"->"<android.app.Service: void stopSelf()>";
    "<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>"
    "<net.tedstein.AndroSS.AndroSSService: void onDestroy()>"->"<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>";
    "<net.tedstein.AndroSS.AndroSSService: void onDestroy()>"->"<android.widget.Toast: void show()>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>"
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>"
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog show()>"
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog show()>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestMessage(android.content.Context)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<java.lang.String: java.lang.String toLowerCase()>"
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>"->"<java.lang.String: java.lang.String toLowerCase()>";
    "<java.lang.String: boolean contains(java.lang.CharSequence)>"
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$DeviceType getDeviceType(android.content.Context)>"->"<java.lang.String: boolean contains(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog show()>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.util.RootUtils: void showRootTestFailedMessage(android.content.Context)>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<android.content.ContextWrapper: java.io.File getFilesDir()>"
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<android.content.ContextWrapper: java.io.File getFilesDir()>";
    "<java.io.File: java.lang.String getAbsolutePath()>"
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean canSu(android.content.Context)>"->"<java.lang.Runtime: java.lang.Process exec(java.lang.String)>";
    "<java.io.File: boolean canRead()>"
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<java.io.File: boolean canRead()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setSuPath(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.String: boolean endsWith(java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.io.File: boolean mkdirs()>"
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.io.File: boolean mkdirs()>";
    "<java.io.File: boolean canWrite()>"
    "<net.tedstein.AndroSS.AndroSSService: boolean setOutputDir(android.content.Context,java.lang.String)>"->"<java.io.File: boolean canWrite()>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String getParamString(android.content.Context)>"->"<java.lang.Enum: int ordinal()>";
    "<net.tedstein.AndroSS.AndroSSService: void initSharedPreferences(android.content.Context)>"->"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>";
    "<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>"
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>";
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<android.content.ContextWrapper: java.io.File getFilesDir()>";
    "<java.io.FileOutputStream: void write(byte[])>"
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.io.FileOutputStream: void write(byte[])>";
    "<java.io.FileOutputStream: void close()>"
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.io.FileOutputStream: void close()>";
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.lang.Runtime: java.lang.Process exec(java.lang.String)>";
    "<java.lang.Throwable: void printStackTrace()>"
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>"
    "<net.tedstein.AndroSS.AndroSSService: void createExternalBinary(android.content.Context)>"->"<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<java.lang.Enum: int ordinal()>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void updateCommand(android.content.Context)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Object: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<java.util.Locale: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.Locale: java.lang.Object clone()>";
    "<java.util.Date: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.Date: java.lang.Object clone()>";
    "<sun.security.krb5.EncryptionKey: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<java.net.HttpCookie: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<java.util.jar.Manifest: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<java.util.zip.ZipEntry: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<sun.security.krb5.Realm: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<java.util.jar.Attributes: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<sun.security.util.BitArray: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<sun.security.krb5.internal.Ticket: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "<java.text.DateFormatSymbols: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<java.util.BitSet: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<javax.crypto.Mac: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<sun.security.krb5.EncryptedData: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<sun.security.krb5.internal.PAData: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "<javax.naming.CompositeName: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "<javax.naming.Reference: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "<android.content.Intent: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<android.content.Intent: java.lang.Object clone()>";
    "<android.os.Bundle: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<android.os.Bundle: java.lang.Object clone()>";
    "<java.lang.Enum: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<java.util.HashMap: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<java.util.AbstractMap: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<java.util.Hashtable: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<sun.util.calendar.ZoneInfo: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<java.util.SimpleTimeZone: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<java.util.GregorianCalendar: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "<java.text.MessageFormat: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "<java.util.ArrayList: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<java.util.Vector: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.Vector: java.lang.Object clone()>";
    "<java.util.HashSet: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<sun.util.calendar.CalendarDate: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<java.text.SimpleDateFormat: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<sun.security.provider.MD4: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "<java.util.LinkedList: java.lang.Object clone()>"
    "<net.tedstein.AndroSS.AndroSSService$DeviceType: net.tedstein.AndroSS.AndroSSService$DeviceType[] values()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<sun.security.krb5.EncryptedData: java.lang.Object clone()>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<sun.security.krb5.internal.PAData: java.lang.Object clone()>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<java.lang.System: long nanoTime()>"
    "<java.lang.System: long currentTimeMillis()>"
    "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"
    "<java.lang.Class: boolean desiredAssertionStatus()>"
    "<java.lang.String: byte[] getBytes()>"
    "<android.util.Base64: byte[] decode(java.lang.String,int)>"->"<java.lang.String: byte[] getBytes()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.Locale: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.Date: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<android.content.Intent: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<android.os.Bundle: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.Vector: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "<net.tedstein.AndroSS.AndroSSService$CompressionType: net.tedstein.AndroSS.AndroSSService$CompressionType[] values()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<android.util.Base64$Decoder: boolean process(byte[],int,int,boolean)>"
    "<android.util.Base64: byte[] decode(byte[],int,int,int)>"->"<android.util.Base64$Decoder: boolean process(byte[],int,int,boolean)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.content.ContextWrapper: java.io.File getFilesDir()>";
    "<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Enum: int ordinal()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Enum: int ordinal()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.Enum: int ordinal()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<android.widget.Toast: void show()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>";
    "<java.util.regex.Matcher: boolean matches()>"
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.util.regex.Matcher: boolean matches()>";
    "<java.util.regex.Matcher: java.lang.String group(int)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.util.regex.Matcher: java.lang.String group(int)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.util.regex.Matcher: java.lang.String group(int)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.util.regex.Matcher: java.lang.String group(int)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean init()>"->"<java.util.regex.Matcher: java.lang.String group(int)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.app.Service: void stopSelf()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.content.Context: java.lang.String getString(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>";
    "<net.tedstein.AndroSS.AndroSSService: void notifyUser()>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<net.tedstein.AndroSS.AndroSSService: void notifyUser()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.app.Service: void stopSelf()>";
    "<android.view.Display: int getOrientation()>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.view.Display: int getOrientation()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.Enum: int ordinal()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.Enum: int ordinal()>";
    "<java.util.Calendar: long getTimeInMillis()>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: long getTimeInMillis()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: long getTimeInMillis()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: long getTimeInMillis()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: long getTimeInMillis()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: long getTimeInMillis()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.widget.Toast: void show()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>";
    "<android.graphics.Matrix: boolean postRotate(float)>"
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.graphics.Matrix: boolean postRotate(float)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.graphics.Matrix: boolean postRotate(float)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<android.graphics.Matrix: boolean postRotate(float)>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.lang.Enum: int ordinal()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: long getTimeInMillis()>";
    "<net.tedstein.AndroSS.AndroSSService: void takeScreenshot()>"->"<java.util.Calendar: long getTimeInMillis()>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$CompressionType getCompressionType()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<net.tedstein.AndroSS.AndroSSService: java.lang.String getOutputDir(android.content.Context)>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$CompressionType getCompressionType()>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<net.tedstein.AndroSS.AndroSSService: void notifyUser()>"->"<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>";
    "<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>"
    "<net.tedstein.AndroSS.AndroSSService: void notifyUser()>"->"<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>";
    "<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>"
    "<net.tedstein.AndroSS.AndroSSService: void notifyUser()>"->"<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>";
    "<net.tedstein.AndroSS.AndroSSService: net.tedstein.AndroSS.AndroSSService$CompressionType getCompressionType()>"->"<java.lang.Enum: java.lang.String name()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.Locale: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.Date: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<android.content.Intent: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<android.os.Bundle: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.Vector: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<java.net.HttpCookie: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<java.lang.Throwable: java.lang.String getMessage()>"
    "<java.net.HttpCookie: java.lang.Object clone()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<sun.security.krb5.internal.Ticket: java.lang.Object clone()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<sun.security.krb5.internal.Ticket: java.lang.Object clone()>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<sun.security.krb5.internal.Ticket: java.lang.Object clone()>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<java.lang.Integer: int intValue()>"
    "<sun.security.krb5.EncryptedData: java.lang.Object clone()>"->"<java.lang.Integer: int intValue()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.Locale: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.Date: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<android.content.Intent: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<android.os.Bundle: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.Vector: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<javax.naming.CompositeName: java.util.Enumeration getAll()>"
    "<javax.naming.CompositeName: java.lang.Object clone()>"->"<javax.naming.CompositeName: java.util.Enumeration getAll()>";
    "<javax.naming.Reference: java.util.Enumeration getAll()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<javax.naming.Reference: java.util.Enumeration getAll()>";
    "<javax.naming.NameImplEnumerator: boolean hasMoreElements()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<javax.naming.NameImplEnumerator: boolean hasMoreElements()>";
    "<java.util.StringTokenizer: boolean hasMoreElements()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<java.util.StringTokenizer: boolean hasMoreElements()>";
    "<sun.misc.URLClassPath$2: boolean hasMoreElements()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<sun.misc.URLClassPath$2: boolean hasMoreElements()>";
    "<sun.misc.URLClassPath$1: boolean hasMoreElements()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<sun.misc.URLClassPath$1: boolean hasMoreElements()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMoreElements()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMoreElements()>";
    "<javax.naming.NameImplEnumerator: java.lang.Object nextElement()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<javax.naming.NameImplEnumerator: java.lang.Object nextElement()>";
    "<java.util.StringTokenizer: java.lang.Object nextElement()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<java.util.StringTokenizer: java.lang.Object nextElement()>";
    "<sun.misc.URLClassPath$2: java.lang.Object nextElement()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<sun.misc.URLClassPath$2: java.lang.Object nextElement()>";
    "<sun.misc.URLClassPath$1: java.lang.Object nextElement()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<sun.misc.URLClassPath$1: java.lang.Object nextElement()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object nextElement()>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object nextElement()>";
    "<java.util.Vector: void addElement(java.lang.Object)>"
    "<javax.naming.Reference: java.lang.Object clone()>"->"<java.util.Vector: void addElement(java.lang.Object)>";
    "<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<java.util.TimeZone: java.lang.Object clone()>"
    "<sun.util.calendar.ZoneInfo: java.lang.Object clone()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "<sun.security.krb5.internal.util.KerberosFlags: boolean[] toBooleanArray()>"
    "<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>"->"<sun.security.krb5.internal.util.KerberosFlags: boolean[] toBooleanArray()>";
    "<java.security.MessageDigestSpi: java.lang.Object clone()>"
    "<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "<sun.security.krb5.internal.crypto.crc32: void init()>"
    "<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>"->"<sun.security.krb5.internal.crypto.crc32: void init()>";
    "<sun.util.calendar.CalendarDate: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<sun.security.provider.MD4$2: java.lang.Object run()>"
    "<sun.security.action.GetBooleanAction: java.lang.Object run()>"
    "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.util.Calendar: int get(int)>"
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "<net.tedstein.AndroSS.AndroSSService: java.lang.String calToStr(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.io.File: java.io.File getParentFile()>"
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<java.io.File: java.io.File getParentFile()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<java.io.File: boolean mkdirs()>";
    "<java.io.OutputStream: void flush()>"
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<java.io.OutputStream: void flush()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<java.io.FileOutputStream: void close()>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<java.lang.Enum: int ordinal()>";
    "<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>"
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>";
    "<net.tedstein.AndroSS.AndroSSService: boolean writeScreenshot(android.graphics.Bitmap,java.lang.String)>"->"<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>";
    "<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>"
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>";
    "<android.content.ContentValues: void put(java.lang.String,java.lang.String)>"
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>";
    "<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>"
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>";
    "<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>"
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>";
    "<java.io.File: java.lang.String getName()>"
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<java.io.File: java.lang.String getName()>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<java.io.File: java.lang.String getName()>";
    "<java.io.File: long length()>"
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<java.io.File: long length()>";
    "<net.tedstein.AndroSS.AndroSSService: void registerNewScreenshot(java.lang.String,long)>"->"<java.lang.Enum: int ordinal()>";
    "<android.media.Ringtone: void play()>"
    "<net.tedstein.AndroSS.AndroSSService: void notifyUser()>"->"<android.media.Ringtone: void play()>";
    "<net.tedstein.AndroSS.AndroSSService: void notifyUser()>"->"<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>";
    "<android.os.Vibrator: void vibrate(long)>"
    "<net.tedstein.AndroSS.AndroSSService: void notifyUser()>"->"<android.os.Vibrator: void vibrate(long)>";
    "<net.tedstein.AndroSS.AndroSSService: void notifyUser()>"->"<android.widget.Toast: void show()>";
    "<javax.naming.NameImpl: java.util.Enumeration getAll()>"
    "<javax.naming.CompositeName: java.util.Enumeration getAll()>"->"<javax.naming.NameImpl: java.util.Enumeration getAll()>";
    "<java.util.Vector: java.util.Enumeration elements()>"
    "<javax.naming.Reference: java.util.Enumeration getAll()>"->"<java.util.Vector: java.util.Enumeration elements()>";
    "<sun.misc.URLClassPath$2: boolean next()>"
    "<sun.misc.URLClassPath$2: boolean hasMoreElements()>"->"<sun.misc.URLClassPath$2: boolean next()>";
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader access$000(sun.misc.URLClassPath,int)>"
    "<sun.misc.URLClassPath$2: boolean next()>"->"<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader access$000(sun.misc.URLClassPath,int)>";
    "<sun.misc.URLClassPath$1: boolean next()>"
    "<sun.misc.URLClassPath$1: boolean hasMoreElements()>"->"<sun.misc.URLClassPath$1: boolean next()>";
    "<sun.misc.URLClassPath$1: boolean next()>"->"<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader access$000(sun.misc.URLClassPath,int)>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMore()>"
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMoreElements()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMore()>";
    "<java.util.Vector: java.lang.Object elementAt(int)>"
    "<javax.naming.NameImplEnumerator: java.lang.Object nextElement()>"->"<java.util.Vector: java.lang.Object elementAt(int)>";
    "<sun.misc.URLClassPath$2: sun.misc.Resource nextElement()>"
    "<sun.misc.URLClassPath$2: java.lang.Object nextElement()>"->"<sun.misc.URLClassPath$2: sun.misc.Resource nextElement()>";
    "<sun.misc.URLClassPath$1: java.net.URL nextElement()>"
    "<sun.misc.URLClassPath$1: java.lang.Object nextElement()>"->"<sun.misc.URLClassPath$1: java.net.URL nextElement()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object next()>"
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object nextElement()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object next()>";
    "<sun.security.util.BitArray: boolean[] toBooleanArray()>"
    "<sun.security.krb5.internal.util.KerberosFlags: boolean[] toBooleanArray()>"->"<sun.security.util.BitArray: boolean[] toBooleanArray()>";
    "<java.lang.Object: boolean[] copyOf(boolean[],int)>"
    "<sun.security.provider.MD4$2: java.lang.Void run()>"
    "<sun.security.provider.MD4$2: java.lang.Object run()>"->"<sun.security.provider.MD4$2: java.lang.Void run()>";
    "<sun.security.provider.MD4: java.security.Provider access$000()>"
    "<sun.security.provider.MD4$2: java.lang.Void run()>"->"<sun.security.provider.MD4: java.security.Provider access$000()>";
    "<sun.security.action.GetBooleanAction: java.lang.Boolean run()>"
    "<sun.security.action.GetBooleanAction: java.lang.Object run()>"->"<sun.security.action.GetBooleanAction: java.lang.Boolean run()>";
    "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>"
    "<sun.security.action.GetBooleanAction: java.lang.Boolean run()>"->"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
    "<java.lang.Boolean: boolean getBoolean(java.lang.String)>"
    "<sun.security.action.GetBooleanAction: java.lang.Boolean run()>"->"<java.lang.Boolean: boolean getBoolean(java.lang.String)>";
    "<javax.naming.NameImpl: java.util.Enumeration getAll()>"->"<java.util.Vector: java.util.Enumeration elements()>";
    "<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>"
    "<sun.misc.URLClassPath$2: boolean next()>"->"<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"
    "<sun.misc.URLClassPath$2: boolean next()>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"
    "<sun.misc.URLClassPath$2: boolean next()>"->"<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>"
    "<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"
    "<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath: void check(java.net.URL)>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"
    "<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath: void check(java.net.URL)>";
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>";
    "<sun.net.www.ParseUtil: long highMask(java.lang.String)>"
    "<sun.net.www.ParseUtil: long lowMask(java.lang.String)>"
    "<sun.net.www.ParseUtil: long highMask(char,char)>"
    "<sun.net.www.ParseUtil: long lowMask(char,char)>"
    "<sun.misc.URLClassPath: boolean access$1000()>"
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>"->"<sun.misc.URLClassPath: boolean access$1000()>";
    "<java.lang.System: java.lang.SecurityManager getSecurityManager()>"
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<sun.net.www.ParseUtil: int escape(char[],char,int)>"
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<sun.net.www.ParseUtil: int escape(char[],char,int)>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<sun.net.www.ParseUtil: int escape(char[],char,int)>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<sun.net.www.ParseUtil: int escape(char[],char,int)>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<sun.net.www.ParseUtil: int escape(char[],char,int)>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<sun.net.www.ParseUtil: int escape(char[],char,int)>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<sun.net.www.ParseUtil: int escape(char[],char,int)>";
    "<sun.misc.SharedSecrets: sun.misc.JavaUtilZipFileAccess getJavaUtilZipFileAccess()>"
    "<java.lang.Math: int min(int,int)>"
    "<sun.net.www.ParseUtil: long highMask(char,char)>"->"<java.lang.Math: int min(int,int)>";
    "<java.lang.Math: int max(int,int)>"
    "<sun.net.www.ParseUtil: long highMask(char,char)>"->"<java.lang.Math: int max(int,int)>";
    "<sun.net.www.ParseUtil: long highMask(char,char)>"->"<java.lang.Math: int min(int,int)>";
    "<sun.net.www.ParseUtil: long highMask(char,char)>"->"<java.lang.Math: int max(int,int)>";
    "<sun.net.www.ParseUtil: long lowMask(char,char)>"->"<java.lang.Math: int min(int,int)>";
    "<sun.net.www.ParseUtil: long lowMask(char,char)>"->"<java.lang.Math: int max(int,int)>";
    "<sun.net.www.ParseUtil: long lowMask(char,char)>"->"<java.lang.Math: int min(int,int)>";
    "<sun.net.www.ParseUtil: long lowMask(char,char)>"->"<java.lang.Math: int max(int,int)>";
    "<java.lang.Character: char forDigit(int,int)>"
    "<sun.net.www.ParseUtil: int escape(char[],char,int)>"->"<java.lang.Character: char forDigit(int,int)>";
    "<sun.net.www.ParseUtil: int escape(char[],char,int)>"->"<java.lang.Character: char forDigit(int,int)>";
    "<sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>"
    "<sun.reflect.Reflection: void registerMethodsToFilter(java.lang.Class,java.lang.String[])>"
    "<sun.misc.Unsafe: void registerNatives()>"
    "<sun.reflect.Reflection: java.lang.Class getCallerClass()>"
    "<sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>"->"<sun.reflect.Reflection: java.lang.Class getCallerClass()>";
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"
    "<sun.reflect.Reflection: void registerMethodsToFilter(java.lang.Class,java.lang.String[])>"->"<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>";
    "<sun.security.action.GetPropertyAction: java.lang.Object run()>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader access$000(sun.misc.URLClassPath,int)>"->"<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>";
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"
    "<sun.misc.URLClassPath$1: boolean next()>"->"<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>"
    "<sun.misc.URLClassPath$1: boolean next()>"->"<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>"
    "<sun.misc.URLClassPath$1: boolean next()>"->"<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath: void check(java.net.URL)>";
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object getNextElement()>"
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMore()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object getNextElement()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object getNextElement()>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
    "<sun.misc.URLClassPath$2: sun.misc.Resource nextElement()>"->"<sun.misc.URLClassPath$2: boolean next()>";
    "<sun.misc.URLClassPath$1: java.net.URL nextElement()>"->"<sun.misc.URLClassPath$1: boolean next()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object next()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMore()>";
    "<sun.security.util.BitArray: boolean get(int)>"
    "<sun.security.util.BitArray: boolean[] toBooleanArray()>"->"<sun.security.util.BitArray: boolean get(int)>";
    "<sun.security.util.BitArray: int position(int)>"
    "<sun.security.util.BitArray: boolean get(int)>"->"<sun.security.util.BitArray: int position(int)>";
    "<sun.security.util.BitArray: int subscript(int)>"
    "<sun.security.util.BitArray: boolean get(int)>"->"<sun.security.util.BitArray: int subscript(int)>";
    "<java.lang.Integer: java.lang.String toString(int)>"
    "<sun.security.util.BitArray: boolean get(int)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<sun.security.provider.MD4$2: java.lang.Void run()>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"
    "<javax.naming.NameImpl: boolean getBoolean(java.util.Properties,java.lang.String)>"
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<javax.naming.NameImpl: boolean getBoolean(java.util.Properties,java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<javax.naming.NameImpl: boolean getBoolean(java.util.Properties,java.lang.String)>";
    "<javax.naming.NameImpl: boolean toBoolean(java.lang.String)>"
    "<javax.naming.NameImpl: boolean getBoolean(java.util.Properties,java.lang.String)>"->"<javax.naming.NameImpl: boolean toBoolean(java.lang.String)>";
    "<java.net.URL: java.net.URLConnection openConnection()>"
    "<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.net.URL: java.net.URLConnection openConnection()>";
    "<sun.misc.MetaIndex: boolean mayContain(java.lang.String)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.misc.MetaIndex: boolean mayContain(java.lang.String)>";
    "<sun.misc.URLClassPath$JarLoader: void ensureOpen()>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$JarLoader: void ensureOpen()>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>";
    "<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>";
    "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"
    "<sun.misc.URLClassPath$JarLoader: void ensureOpen()>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>"->"<sun.misc.URLClassPath: void check(java.net.URL)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>"->"<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>";
    "<sun.misc.URLClassPath$Loader: java.net.URL getBaseURL()>"
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$Loader: java.net.URL getBaseURL()>";
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$Loader: java.net.URL getBaseURL()>";
    "<java.net.URL: java.lang.String getFile()>"
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.net.URL: java.lang.String getFile()>";
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.net.URL: java.lang.String getFile()>";
    "<java.lang.String: boolean startsWith(java.lang.String)>"
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<java.lang.String: int indexOf(java.lang.String)>"
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<java.lang.String: java.lang.String replace(char,char)>"
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.lang.String: java.lang.String replace(char,char)>";
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.lang.String: java.lang.String replace(char,char)>";
    "<java.io.File: java.io.File getCanonicalFile()>"
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.io.File: java.io.File getCanonicalFile()>";
    "<java.io.File: java.lang.String getPath()>"
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.io.File: java.lang.String getPath()>";
    "<java.io.File: boolean exists()>"
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.io.File: boolean exists()>";
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.io.File: java.lang.String getPath()>";
    "<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<java.util.BitSet: void set(int)>"
    "<java.util.jar.JarFile: void close()>"
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>"->"<java.util.jar.JarFile: void close()>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.net.URL: java.net.URLConnection openConnection()>";
    "<java.lang.SecurityManager: void checkPermission(java.security.Permission)>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.lang.SecurityManager: void checkPermission(java.security.Permission)>";
    "<java.lang.SecurityManager: void checkRead(java.lang.String)>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.lang.SecurityManager: void checkRead(java.lang.String)>";
    "<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>";
    "<java.io.FilePermission: java.lang.String getActions()>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.io.FilePermission: java.lang.String getActions()>";
    "<java.net.SocketPermission: java.lang.String getActions()>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.net.SocketPermission: java.lang.String getActions()>";
    "<java.security.AllPermission: java.lang.String getActions()>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.security.AllPermission: java.lang.String getActions()>";
    "<java.security.BasicPermission: java.lang.String getActions()>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.security.BasicPermission: java.lang.String getActions()>";
    "<java.util.PropertyPermission: java.lang.String getActions()>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.util.PropertyPermission: java.lang.String getActions()>";
    "<java.security.Permission: java.lang.String getName()>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.security.Permission: java.lang.String getName()>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.io.FilePermission: java.lang.String getActions()>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.net.SocketPermission: java.lang.String getActions()>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.security.AllPermission: java.lang.String getActions()>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.security.BasicPermission: java.lang.String getActions()>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.util.PropertyPermission: java.lang.String getActions()>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<java.net.URL: java.lang.String getHost()>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.net.URL: java.lang.String getHost()>";
    "<java.net.URL: int getPort()>"
    "<sun.misc.URLClassPath: void check(java.net.URL)>"->"<java.net.URL: int getPort()>";
    "<java.lang.String: int length()>"
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<java.lang.String: int length()>";
    "<java.lang.String: char[] toCharArray()>"
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<java.lang.String: char[] toCharArray()>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<java.lang.String: int length()>";
    "<java.util.BitSet: boolean get(int)>"
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>"->"<java.util.BitSet: boolean get(int)>";
    "<sun.net.www.ParseUtil: long highMask(java.lang.String)>"->"<java.lang.String: int length()>";
    "<java.lang.String: char charAt(int)>"
    "<sun.net.www.ParseUtil: long highMask(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<sun.net.www.ParseUtil: long lowMask(java.lang.String)>"->"<java.lang.String: int length()>";
    "<sun.net.www.ParseUtil: long lowMask(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<sun.misc.Unsafe: void ensureClassInitialized(java.lang.Class)>"
    "<sun.misc.SharedSecrets: sun.misc.JavaUtilZipFileAccess getJavaUtilZipFileAccess()>"->"<sun.misc.Unsafe: void ensureClassInitialized(java.lang.Class)>";
    "<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>"
    "<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>"
    "<sun.misc.Unsafe: int addressSize()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
    "<sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
    "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>"
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>"
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>"
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.HashMap: java.lang.Object get(java.lang.Object)>"
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>"
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>"
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>"
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.security.action.GetPropertyAction: java.lang.String run()>"
    "<sun.security.action.GetPropertyAction: java.lang.Object run()>"->"<sun.security.action.GetPropertyAction: java.lang.String run()>";
    "<java.lang.System: java.lang.String getProperty(java.lang.String)>"
    "<sun.security.action.GetPropertyAction: java.lang.String run()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "<java.util.ArrayList: int size()>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<java.util.ArrayList: int size()>";
    "<java.util.Stack: boolean empty()>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<java.util.Stack: boolean empty()>";
    "<java.util.Stack: java.lang.Object pop()>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<java.util.Stack: java.lang.Object pop()>";
    "<java.util.HashMap: boolean containsKey(java.lang.Object)>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(java.net.URL)>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(java.net.URL)>";
    "<sun.misc.URLClassPath: void push(java.net.URL[])>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<sun.misc.URLClassPath: void push(java.net.URL[])>";
    "<sun.misc.URLClassPath$Loader: java.net.URL[] getClassPath()>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<sun.misc.URLClassPath$Loader: java.net.URL[] getClassPath()>";
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.ArrayList: java.lang.Object get(int)>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(java.net.URL)>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>";
    "<sun.misc.SharedSecrets: sun.misc.JavaUtilJarAccess javaUtilJarAccess()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>"->"<sun.misc.SharedSecrets: sun.misc.JavaUtilJarAccess javaUtilJarAccess()>";
    "<java.net.URL: java.lang.String getProtocol()>"
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.net.URL: java.lang.String getProtocol()>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.net.URL: java.lang.String getHost()>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.net.URL: int getPort()>";
    "<java.net.URL: int getDefaultPort()>"
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.net.URL: int getDefaultPort()>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.net.URL: java.lang.String getFile()>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.lang.String: java.lang.String toLowerCase()>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.lang.String: java.lang.String toLowerCase()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"
    "<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"->"<java.net.URL: java.net.URLConnection openConnection()>";
    "<java.net.URL: java.io.InputStream openStream()>"
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"->"<java.net.URL: java.io.InputStream openStream()>";
    "<java.io.ObjectInputStream: void close()>"
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"->"<java.io.ObjectInputStream: void close()>";
    "<java.io.FileInputStream: void close()>"
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"->"<java.io.FileInputStream: void close()>";
    "<java.io.ByteArrayInputStream: void close()>"
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"->"<java.io.ByteArrayInputStream: void close()>";
    "<java.io.FilterInputStream: void close()>"
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"->"<java.io.FilterInputStream: void close()>";
    "<java.io.BufferedInputStream: void close()>"
    "<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>"->"<java.io.BufferedInputStream: void close()>";
    "<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$Loader$1: java.net.URL getURL()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$Loader$1: java.net.URL getURL()>";
    "<sun.misc.URLClassPath$JarLoader$2: java.net.URL getURL()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$JarLoader$2: java.net.URL getURL()>";
    "<sun.misc.URLClassPath$FileLoader$1: java.net.URL getURL()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$FileLoader$1: java.net.URL getURL()>";
    "<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>";
    "<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$Loader$1: java.net.URL getURL()>";
    "<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$JarLoader$2: java.net.URL getURL()>";
    "<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>"->"<sun.misc.URLClassPath$FileLoader$1: java.net.URL getURL()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object getNextElement()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.util.Enumeration access$000(com.sun.naming.internal.VersionHelper12$InputStreamEnumeration)>"
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.util.Enumeration access$000(com.sun.naming.internal.VersionHelper12$InputStreamEnumeration)>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.util.Enumeration access$000(com.sun.naming.internal.VersionHelper12$InputStreamEnumeration)>";
    "<sun.security.util.BitArray: void set(int,boolean)>"
    "<sun.security.util.BitArray: void set(int,boolean)>"->"<sun.security.util.BitArray: int position(int)>";
    "<sun.security.util.BitArray: void set(int,boolean)>"->"<sun.security.util.BitArray: int subscript(int)>";
    "<sun.security.util.BitArray: void set(int,boolean)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>"
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>";
    "<java.util.Properties: java.lang.String getProperty(java.lang.String)>"
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<javax.naming.NameImpl: void recordNamingConvention(java.util.Properties)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<javax.naming.NameImpl: boolean getBoolean(java.util.Properties,java.lang.String)>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<javax.naming.NameImpl: boolean toBoolean(java.lang.String)>"->"<java.lang.String: java.lang.String toLowerCase()>";
    "<javax.naming.NameImpl: boolean toBoolean(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.misc.MetaIndex: boolean mayContain(java.lang.String)>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "<sun.misc.MetaIndex: boolean mayContain(java.lang.String)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Object run()>"
    "<sun.misc.URLClassPath$JarLoader: void ensureOpen()>"->"<sun.misc.URLClassPath$JarLoader$1: java.lang.Object run()>";
    "<java.security.PrivilegedActionException: java.lang.Exception getException()>"
    "<sun.misc.URLClassPath$JarLoader: void ensureOpen()>"->"<java.security.PrivilegedActionException: java.lang.Exception getException()>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>"->"<sun.misc.URLClassPath$Loader: java.net.URL getBaseURL()>";
    "<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>";
    "<java.util.LinkedList: java.lang.Object[] toArray()>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.util.LinkedList: java.lang.Object[] toArray()>";
    "<java.util.LinkedList: int size()>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.util.LinkedList: int size()>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.util.LinkedList: int size()>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.URLClassPath$JarLoader$3: java.lang.Object run()>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.URLClassPath$JarLoader$3: java.lang.Object run()>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex getIndex()>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex getIndex()>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.URLClassPath$JarLoader: void ensureOpen()>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex getIndex()>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>";
    "<java.lang.String: int lastIndexOf(java.lang.String)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.lang.String: int lastIndexOf(java.lang.String)>";
    "<java.lang.String: java.lang.String substring(int,int)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.HashSet: boolean add(java.lang.Object)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<sun.nio.ch.Util$2: boolean add(java.lang.Object)>"
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.nio.ch.Util$2: boolean add(java.lang.Object)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>"->"<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>";
    "<sun.misc.URLClassPath$3: java.lang.Object run()>"
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(java.net.URL)>"->"<sun.misc.URLClassPath$3: java.lang.Object run()>";
    "<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(java.net.URL)>"->"<java.security.PrivilegedActionException: java.lang.Exception getException()>";
    "<java.util.Stack: java.lang.Object push(java.lang.Object)>"
    "<sun.misc.URLClassPath: void push(java.net.URL[])>"->"<java.util.Stack: java.lang.Object push(java.lang.Object)>";
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>"->"<sun.misc.URLClassPath$JarLoader: void ensureOpen()>";
    "<sun.misc.URLClassPath$JarLoader: void parseExtensionsDependencies()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>"->"<sun.misc.URLClassPath$JarLoader: void parseExtensionsDependencies()>";
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>"->"<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>";
    "<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>"->"<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>";
    "<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>"->"<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>";
    "<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] getClassPath()>"->"<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionsDependencies(java.util.jar.JarFile)>"
    "<sun.misc.URLClassPath$JarLoader: void parseExtensionsDependencies()>"->"<sun.misc.ExtensionDependency: boolean checkExtensionsDependencies(java.util.jar.JarFile)>";
    "<sun.misc.ExtensionDependency: void debug(java.lang.String)>"
    "<sun.misc.ExtensionDependency: boolean checkExtensionsDependencies(java.util.jar.JarFile)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.SharedSecrets: sun.misc.JavaUtilJarAccess javaUtilJarAccess()>"->"<sun.misc.Unsafe: void ensureClassInitialized(java.lang.Class)>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<javax.naming.NameImplEnumerator: boolean hasMoreElements()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<java.util.StringTokenizer: boolean hasMoreElements()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<sun.misc.URLClassPath$2: boolean hasMoreElements()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<sun.misc.URLClassPath$1: boolean hasMoreElements()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMoreElements()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<javax.naming.NameImplEnumerator: java.lang.Object nextElement()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<java.util.StringTokenizer: java.lang.Object nextElement()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<sun.misc.URLClassPath$2: java.lang.Object nextElement()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<sun.misc.URLClassPath$1: java.lang.Object nextElement()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object nextElement()>";
    "<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration$1: java.lang.Object run()>"->"<java.net.URL: java.io.InputStream openStream()>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Object run()>"->"<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>";
    "<sun.misc.URLClassPath$JarLoader: java.util.HashMap access$900(sun.misc.URLClassPath$JarLoader)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: java.util.HashMap access$900(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: java.util.HashMap access$900(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>";
    "<sun.misc.URLClassPath$JarLoader: java.net.URL access$400(sun.misc.URLClassPath$JarLoader)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: java.net.URL access$400(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$700(sun.misc.URLClassPath$JarLoader)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$700(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$700(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$702(sun.misc.URLClassPath$JarLoader,sun.misc.JarIndex)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex access$702(sun.misc.URLClassPath$JarLoader,sun.misc.JarIndex)>";
    "<sun.misc.JarIndex: sun.misc.JarIndex getJarIndex(java.util.jar.JarFile,sun.misc.MetaIndex)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.JarIndex: sun.misc.JarIndex getJarIndex(java.util.jar.JarFile,sun.misc.MetaIndex)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex access$800(sun.misc.URLClassPath$JarLoader)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex access$800(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$500(sun.misc.URLClassPath$JarLoader)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$500(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$502(sun.misc.URLClassPath$JarLoader,java.util.jar.JarFile)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$502(sun.misc.URLClassPath$JarLoader,java.util.jar.JarFile)>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$600(sun.misc.URLClassPath$JarLoader,java.net.URL)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$600(sun.misc.URLClassPath$JarLoader,java.net.URL)>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: java.net.URL access$400(sun.misc.URLClassPath$JarLoader)>";
    "<java.lang.Thread: void dumpStack()>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<java.lang.Thread: void dumpStack()>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath$JarLoader: java.net.URL access$400(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath: boolean access$300()>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.URLClassPath: boolean access$300()>";
    "<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>"->"<java.lang.String: int lastIndexOf(java.lang.String)>";
    "<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.URLClassPath$JarLoader$3: sun.misc.URLClassPath$JarLoader run()>"
    "<sun.misc.URLClassPath$JarLoader$3: java.lang.Object run()>"->"<sun.misc.URLClassPath$JarLoader$3: sun.misc.URLClassPath$JarLoader run()>";
    "<sun.misc.URLClassPath$JarLoader$3: sun.misc.URLClassPath$JarLoader run()>"->"<sun.misc.URLClassPath$JarLoader: java.util.HashMap access$900(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath$JarLoader: java.net.URLStreamHandler access$1100(sun.misc.URLClassPath$JarLoader)>"
    "<sun.misc.URLClassPath$JarLoader$3: sun.misc.URLClassPath$JarLoader run()>"->"<sun.misc.URLClassPath$JarLoader: java.net.URLStreamHandler access$1100(sun.misc.URLClassPath$JarLoader)>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex getIndex()>"->"<sun.misc.URLClassPath$JarLoader: void ensureOpen()>";
    "<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex getIndex()>"->"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<java.lang.String: int lastIndexOf(java.lang.String)>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<java.util.jar.JarFile: java.util.Enumeration entries()>"
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<java.util.jar.JarFile: java.util.Enumeration entries()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<javax.naming.NameImplEnumerator: boolean hasMoreElements()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<java.util.StringTokenizer: boolean hasMoreElements()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<sun.misc.URLClassPath$2: boolean hasMoreElements()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<sun.misc.URLClassPath$1: boolean hasMoreElements()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMoreElements()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<javax.naming.NameImplEnumerator: java.lang.Object nextElement()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<java.util.StringTokenizer: java.lang.Object nextElement()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<sun.misc.URLClassPath$2: java.lang.Object nextElement()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<sun.misc.URLClassPath$1: java.lang.Object nextElement()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object nextElement()>";
    "<java.util.zip.ZipEntry: java.lang.String getName()>"
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<java.util.zip.ZipEntry: java.lang.String getName()>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<java.lang.String: int lastIndexOf(java.lang.String)>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.util.HashMap: java.util.Set entrySet()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.HashMap: java.util.Set entrySet()>";
    "<java.util.HashSet: java.util.Iterator iterator()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "<sun.nio.ch.Util$2: java.util.Iterator iterator()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.ch.Util$2: java.util.Iterator iterator()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>";
    "<java.util.Scanner: boolean hasNext()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.Scanner: boolean hasNext()>";
    "<java.util.ServiceLoader$1: boolean hasNext()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.ServiceLoader$1: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.ServiceLoader$LazyIterator: boolean hasNext()>";
    "<sun.nio.fs.AbstractPath$1: boolean hasNext()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.AbstractPath$1: boolean hasNext()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.lang.Object next()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.lang.Object next()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.lang.Object next()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.lang.Object next()>";
    "<java.util.Scanner: java.lang.Object next()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.Scanner: java.lang.Object next()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.ServiceLoader$1: java.lang.Object next()>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>";
    "<sun.nio.fs.AbstractPath$1: java.lang.Object next()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.AbstractPath$1: java.lang.Object next()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "<java.util.AbstractSequentialList: java.util.Iterator iterator()>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.Scanner: boolean hasNext()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.ServiceLoader$1: boolean hasNext()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.ServiceLoader$LazyIterator: boolean hasNext()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.AbstractPath$1: boolean hasNext()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.lang.Object next()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.lang.Object next()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.Scanner: java.lang.Object next()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.ServiceLoader$1: java.lang.Object next()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.nio.fs.AbstractPath$1: java.lang.Object next()>";
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "<java.lang.String: java.lang.String concat(java.lang.String)>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "<sun.misc.JarIndex: void add(java.lang.String,java.lang.String)>"
    "<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>"->"<sun.misc.JarIndex: void add(java.lang.String,java.lang.String)>";
    "<java.util.ServiceLoader: java.util.ServiceLoader$LazyIterator access$500(java.util.ServiceLoader)>"
    "<java.util.ServiceLoader$1: boolean hasNext()>"->"<java.util.ServiceLoader: java.util.ServiceLoader$LazyIterator access$500(java.util.ServiceLoader)>";
    "<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>"
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>";
    "<java.util.ServiceLoader: java.util.Iterator access$200(java.util.ServiceLoader,java.lang.Class,java.net.URL)>"
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.ServiceLoader: java.util.Iterator access$200(java.util.ServiceLoader,java.lang.Class,java.net.URL)>";
    "<java.util.ServiceLoader: void access$100(java.lang.Class,java.lang.String,java.lang.Throwable)>"
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.ServiceLoader: void access$100(java.lang.Class,java.lang.String,java.lang.Throwable)>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.ServiceLoader: java.util.ServiceLoader$LazyIterator access$500(java.util.ServiceLoader)>";
    "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>"
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.util.ServiceLoader: void access$100(java.lang.Class,java.lang.String,java.lang.Throwable)>";
    "<java.util.ServiceLoader: java.util.LinkedHashMap access$400(java.util.ServiceLoader)>"
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.util.ServiceLoader: java.util.LinkedHashMap access$400(java.util.ServiceLoader)>";
    "<java.util.ServiceLoader: void access$300(java.lang.Class,java.lang.String)>"
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.util.ServiceLoader: void access$300(java.lang.Class,java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.util.ServiceLoader: void access$300(java.lang.Class,java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>"
    "<java.util.ServiceLoader: void access$100(java.lang.Class,java.lang.String,java.lang.Throwable)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>"
    "<java.util.ServiceLoader: void access$300(java.lang.Class,java.lang.String)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>";
    "<sun.misc.URLClassPath$3: sun.misc.URLClassPath$Loader run()>"
    "<sun.misc.URLClassPath$3: java.lang.Object run()>"->"<sun.misc.URLClassPath$3: sun.misc.URLClassPath$Loader run()>";
    "<sun.misc.URLClassPath: java.net.URLStreamHandler access$100(sun.misc.URLClassPath)>"
    "<sun.misc.URLClassPath$3: sun.misc.URLClassPath$Loader run()>"->"<sun.misc.URLClassPath: java.net.URLStreamHandler access$100(sun.misc.URLClassPath)>";
    "<java.util.StringTokenizer: int countTokens()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>"->"<java.util.StringTokenizer: int countTokens()>";
    "<java.util.StringTokenizer: boolean hasMoreTokens()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<java.util.StringTokenizer: java.lang.String nextToken()>"
    "<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"
    "<sun.misc.ExtensionDependency: boolean checkExtensionsDependencies(java.util.jar.JarFile)>"->"<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionsDependencies(java.util.jar.JarFile)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.io.PrintStream: void println(java.lang.String)>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<sun.misc.JarIndex: java.lang.String[] getJarFiles()>"
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<sun.misc.JarIndex: java.lang.String[] getJarFiles()>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.JarIndex: sun.misc.JarIndex getJarIndex(java.util.jar.JarFile,sun.misc.MetaIndex)>"->"<sun.misc.MetaIndex: boolean mayContain(java.lang.String)>";
    "<sun.misc.JarIndex: sun.misc.JarIndex getJarIndex(java.util.jar.JarFile,sun.misc.MetaIndex)>"->"<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>";
    "<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>"
    "<sun.misc.JarIndex: sun.misc.JarIndex getJarIndex(java.util.jar.JarFile,sun.misc.MetaIndex)>"->"<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>"
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile access$600(sun.misc.URLClassPath$JarLoader,java.net.URL)>"->"<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>"->"<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>"->"<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>";
    "<sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>"
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"
    "<sun.misc.MetaIndex: java.util.Map getJarMap()>"
    "<sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>"->"<sun.misc.MetaIndex: java.util.Map getJarMap()>";
    "<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>"
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>";
    "<sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetDecoder decoderFor(java.lang.Object)>"
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetDecoder decoderFor(java.lang.Object)>";
    "<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>"
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>";
    "<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>"
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
    "<java.lang.Integer: int parseInt(java.lang.String,int)>"
    "<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>"->"<java.lang.Integer: int parseInt(java.lang.String,int)>";
    "<sun.nio.ch.Util$2: java.util.Iterator iterator()>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "<sun.nio.ch.Util$2: java.util.Iterator iterator()>"->"<sun.nio.ch.Util$2: java.util.Iterator iterator()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>";
    "<sun.nio.fs.UnixDirectoryStream: java.nio.file.DirectoryStream$Filter access$200(sun.nio.fs.UnixDirectoryStream)>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream: java.nio.file.DirectoryStream$Filter access$200(sun.nio.fs.UnixDirectoryStream)>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream: java.nio.file.DirectoryStream$Filter access$200(sun.nio.fs.UnixDirectoryStream)>";
    "<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath access$100(sun.nio.fs.UnixDirectoryStream)>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath access$100(sun.nio.fs.UnixDirectoryStream)>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath access$100(sun.nio.fs.UnixDirectoryStream)>";
    "<sun.nio.fs.UnixNativeDispatcher: byte[] readdir(long)>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixNativeDispatcher: byte[] readdir(long)>";
    "<sun.nio.fs.UnixDirectoryStream: long access$000(sun.nio.fs.UnixDirectoryStream)>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream: long access$000(sun.nio.fs.UnixDirectoryStream)>";
    "<java.lang.Thread: boolean holdsLock(java.lang.Object)>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.lang.Thread: boolean holdsLock(java.lang.Object)>";
    "<sun.nio.fs.UnixNativeDispatcher: int init()>"
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.lang.Thread: boolean holdsLock(java.lang.Object)>";
    "<java.util.ServiceLoader$1: boolean hasNext()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$1: boolean hasNext()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$1: boolean hasNext()>"->"<java.util.Scanner: boolean hasNext()>";
    "<java.util.ServiceLoader$1: boolean hasNext()>"->"<java.util.ServiceLoader$1: boolean hasNext()>";
    "<java.util.ServiceLoader$1: boolean hasNext()>"->"<java.util.ServiceLoader$LazyIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$1: boolean hasNext()>"->"<sun.nio.fs.AbstractPath$1: boolean hasNext()>";
    "<java.util.ServiceLoader$1: boolean hasNext()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "<java.util.ServiceLoader$1: boolean hasNext()>"->"<java.util.ServiceLoader$LazyIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Class: java.lang.String getName()>"
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>"
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.Scanner: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.ServiceLoader$1: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.ServiceLoader$LazyIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.nio.fs.AbstractPath$1: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<javax.naming.NameImplEnumerator: boolean hasMoreElements()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.StringTokenizer: boolean hasMoreElements()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.misc.URLClassPath$2: boolean hasMoreElements()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.misc.URLClassPath$1: boolean hasMoreElements()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMoreElements()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<javax.naming.NameImplEnumerator: java.lang.Object nextElement()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.StringTokenizer: java.lang.Object nextElement()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.misc.URLClassPath$2: java.lang.Object nextElement()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.misc.URLClassPath$1: java.lang.Object nextElement()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object nextElement()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.lang.Object next()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.lang.Object next()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.Scanner: java.lang.Object next()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.ServiceLoader$1: java.lang.Object next()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<sun.nio.fs.AbstractPath$1: java.lang.Object next()>";
    "<java.util.ServiceLoader$LazyIterator: boolean hasNext()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "<sun.nio.fs.UnixPath: int getNameCount()>"
    "<sun.nio.fs.AbstractPath$1: boolean hasNext()>"->"<sun.nio.fs.UnixPath: int getNameCount()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path next()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.lang.Object next()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path next()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next()>"
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.lang.Object next()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next()>";
    "<java.util.Scanner: java.lang.String next()>"
    "<java.util.Scanner: java.lang.Object next()>"->"<java.util.Scanner: java.lang.String next()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.Scanner: boolean hasNext()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.ServiceLoader$1: boolean hasNext()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.ServiceLoader$LazyIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<sun.nio.fs.AbstractPath$1: boolean hasNext()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.lang.Object next()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.lang.Object next()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.Scanner: java.lang.Object next()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.ServiceLoader$1: java.lang.Object next()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<sun.nio.fs.AbstractPath$1: java.lang.Object next()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "<java.util.ServiceLoader$1: java.lang.Object next()>"->"<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.util.ServiceLoader$LazyIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>"
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Class: java.lang.Object newInstance()>"
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.Class: java.lang.Object newInstance()>";
    "<java.lang.Class: java.lang.Object cast(java.lang.Object)>"
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.Class: java.lang.Object cast(java.lang.Object)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.nio.fs.AbstractPath$1: java.nio.file.Path next()>"
    "<sun.nio.fs.AbstractPath$1: java.lang.Object next()>"->"<sun.nio.fs.AbstractPath$1: java.nio.file.Path next()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: void advance()>"
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: void advance()>";
    "<sun.misc.JarIndex: void add(java.lang.String,java.lang.String)>"->"<java.lang.String: int lastIndexOf(java.lang.String)>";
    "<sun.misc.JarIndex: void add(java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>"
    "<sun.misc.JarIndex: void add(java.lang.String,java.lang.String)>"->"<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>";
    "<sun.misc.JarIndex: void add(java.lang.String,java.lang.String)>"->"<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"
    "<java.util.ServiceLoader: java.util.Iterator access$200(java.util.ServiceLoader,java.lang.Class,java.net.URL)>"->"<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.URLClassPath$3: sun.misc.URLClassPath$Loader run()>"->"<java.net.URL: java.lang.String getFile()>";
    "<sun.misc.URLClassPath$3: sun.misc.URLClassPath$Loader run()>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "<sun.misc.URLClassPath$3: sun.misc.URLClassPath$Loader run()>"->"<java.net.URL: java.lang.String getProtocol()>";
    "<sun.misc.URLClassPath$3: sun.misc.URLClassPath$Loader run()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>";
    "<java.util.zip.ZipFile: java.lang.String getName()>"
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.zip.ZipFile: java.lang.String getName()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.zip.ZipFile: java.lang.String getName()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.zip.ZipFile: java.lang.String getName()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>";
    "<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>"
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.jar.Attributes$Name: java.lang.String toString()>"
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.util.jar.Attributes$Name: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>"
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>"
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"
    "<sun.misc.URLClassPath$JarLoader: boolean isOptimizable(java.net.URL)>"
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>"->"<sun.misc.URLClassPath$JarLoader: boolean isOptimizable(java.net.URL)>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>"->"<sun.misc.URLClassPath$Loader: java.net.URL getBaseURL()>";
    "<sun.misc.FileURLMapper: boolean exists()>"
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>"->"<sun.misc.FileURLMapper: boolean exists()>";
    "<sun.misc.FileURLMapper: java.lang.String getPath()>"
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>"->"<sun.misc.FileURLMapper: java.lang.String getPath()>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>"->"<sun.misc.FileURLMapper: java.lang.String getPath()>";
    "<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>"->"<java.net.URL: java.net.URLConnection openConnection()>";
    "<sun.misc.FileURLMapper: java.lang.String getPath()>"->"<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>";
    "<sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.lang.String: int length()>";
    "<java.lang.String: int indexOf(int)>"
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.lang.String: int indexOf(int)>";
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.nio.charset.CoderResult: boolean isError()>"
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.nio.charset.CoderResult: boolean isError()>";
    "<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>"->"<java.nio.charset.CoderResult: boolean isError()>";
    "<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>"
    "<sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetDecoder decoderFor(java.lang.Object)>"->"<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>";
    "<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>";
    "<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>";
    "<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>";
    "<java.util.concurrent.locks.ReentrantLock: void lock()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.util.concurrent.locks.ReentrantLock: void lock()>";
    "<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>";
    "<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>";
    "<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>";
    "<java.util.concurrent.locks.ReentrantLock: void unlock()>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.util.concurrent.locks.ReentrantLock: void unlock()>";
    "<sun.nio.fs.UnixException: java.io.IOException asIOException(sun.nio.fs.UnixPath)>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixException: java.io.IOException asIOException(sun.nio.fs.UnixPath)>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.util.concurrent.locks.ReentrantLock: void unlock()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean isSelfOrParent(byte[])>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean isSelfOrParent(byte[])>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(byte[])>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(byte[])>";
    "<java.nio.file.Files$AcceptAllFilter: boolean accept(java.lang.Object)>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.nio.file.Files$AcceptAllFilter: boolean accept(java.lang.Object)>";
    "<java.nio.file.Files$1: boolean accept(java.lang.Object)>"
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>"->"<java.nio.file.Files$1: boolean accept(java.lang.Object)>";
    "<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>"
    "<sun.nio.fs.UnixNativeDispatcher$1: java.lang.Object run()>"
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.util.Scanner: boolean hasNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.util.ServiceLoader$1: boolean hasNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.util.ServiceLoader$LazyIterator: boolean hasNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<sun.nio.fs.AbstractPath$1: boolean hasNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.lang.Object next()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.lang.Object next()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.util.Scanner: java.lang.Object next()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.util.ServiceLoader$1: java.lang.Object next()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<sun.nio.fs.AbstractPath$1: java.lang.Object next()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "<sun.nio.fs.UnixMountEntry: boolean isIgnored()>"
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<sun.nio.fs.UnixMountEntry: boolean isIgnored()>";
    "<sun.nio.fs.UnixMountEntry: byte[] dir()>"
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<sun.nio.fs.UnixMountEntry: byte[] dir()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>"->"<java.lang.SecurityManager: void checkRead(java.lang.String)>";
    "<sun.nio.fs.UnixPath: void initOffsets()>"
    "<sun.nio.fs.UnixPath: int getNameCount()>"->"<sun.nio.fs.UnixPath: void initOffsets()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path next()>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next()>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>";
    "<sun.nio.fs.AbstractPath$1: java.nio.file.Path next()>"->"<sun.nio.fs.UnixPath: int getNameCount()>";
    "<sun.nio.fs.UnixPath: java.nio.file.Path getName(int)>"
    "<sun.nio.fs.AbstractPath$1: java.nio.file.Path next()>"->"<sun.nio.fs.UnixPath: java.nio.file.Path getName(int)>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: void advance()>"->"<java.util.concurrent.locks.ReentrantLock: void lock()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: void advance()>"->"<java.util.concurrent.locks.ReentrantLock: void unlock()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: void advance()>"->"<java.util.concurrent.locks.ReentrantLock: void unlock()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node succ(java.util.concurrent.LinkedBlockingDeque$Node)>"
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: void advance()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node succ(java.util.concurrent.LinkedBlockingDeque$Node)>";
    "<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.LinkedList: boolean add(java.lang.Object)>"
    "<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.util.LinkedList: boolean contains(java.lang.Object)>"
    "<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>"->"<java.util.LinkedList: boolean contains(java.lang.Object)>";
    "<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.net.URL: java.io.InputStream openStream()>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>";
    "<java.io.BufferedReader: void close()>"
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.BufferedReader: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.BufferedReader: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.BufferedReader: void close()>";
    "<java.io.InputStream: void close()>"
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.InputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.ObjectInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.FileInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.ByteArrayInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.FilterInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.BufferedInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.InputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.ObjectInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.FileInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.ByteArrayInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.FilterInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.BufferedInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.InputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.ObjectInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.FileInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.ByteArrayInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.FilterInputStream: void close()>";
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.io.BufferedInputStream: void close()>";
    "<java.util.AbstractList: java.util.Iterator iterator()>"
    "<java.util.ServiceLoader: java.util.Iterator parse(java.lang.Class,java.net.URL)>"->"<java.util.AbstractList: java.util.Iterator iterator()>";
    "<java.lang.Character: int charCount(int)>"
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.Character: int charCount(int)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>"
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>";
    "<java.lang.Character: boolean isJavaIdentifierPart(int)>"
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.Character: boolean isJavaIdentifierPart(int)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.Character: int charCount(int)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>";
    "<java.lang.Character: boolean isJavaIdentifierStart(int)>"
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.Character: boolean isJavaIdentifierStart(int)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>"->"<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"
    "<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"
    "<sun.misc.ExtensionDependency: boolean checkExtension(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.Launcher: sun.misc.Launcher getLauncher()>"
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<sun.misc.Launcher: sun.misc.Launcher getLauncher()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<java.io.BufferedReader: java.lang.String readLine()>"
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<java.lang.String: int length()>";
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "<java.util.Vector: boolean add(java.lang.Object)>"
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "<java.util.Vector: int size()>"
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<java.util.Vector: int size()>";
    "<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>"
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>";
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>";
    "<sun.misc.JarIndex: void read(java.io.InputStream)>"->"<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>";
    "<sun.misc.URLClassPath$JarLoader: boolean isOptimizable(java.net.URL)>"->"<java.net.URL: java.lang.String getProtocol()>";
    "<sun.misc.URLClassPath$JarLoader: boolean isOptimizable(java.net.URL)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.misc.FileURLMapper: boolean exists()>"->"<sun.misc.FileURLMapper: java.lang.String getPath()>";
    "<sun.misc.FileURLMapper: boolean exists()>"->"<java.io.File: boolean exists()>";
    "<sun.misc.FileURLMapper: java.lang.String getPath()>"->"<java.net.URL: java.lang.String getHost()>";
    "<sun.misc.FileURLMapper: java.lang.String getPath()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>"
    "<sun.misc.FileURLMapper: java.lang.String getPath()>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "<sun.misc.FileURLMapper: java.lang.String getPath()>"->"<java.net.URL: java.lang.String getFile()>";
    "<java.lang.ThreadLocal: java.lang.Object get()>"
    "<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>"->"<java.lang.ThreadLocal: java.lang.Object get()>";
    "<java.lang.ThreadLocal: void set(java.lang.Object)>"
    "<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>"->"<java.lang.ThreadLocal: void set(java.lang.Object)>";
    "<sun.nio.cs.ThreadLocalCoders$1: boolean hasName(java.lang.Object,java.lang.Object)>"
    "<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>"->"<sun.nio.cs.ThreadLocalCoders$1: boolean hasName(java.lang.Object,java.lang.Object)>";
    "<sun.nio.cs.ThreadLocalCoders$2: boolean hasName(java.lang.Object,java.lang.Object)>"
    "<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>"->"<sun.nio.cs.ThreadLocalCoders$2: boolean hasName(java.lang.Object,java.lang.Object)>";
    "<sun.nio.cs.ThreadLocalCoders$Cache: void moveToFront(java.lang.Object[],int)>"
    "<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>"->"<sun.nio.cs.ThreadLocalCoders$Cache: void moveToFront(java.lang.Object[],int)>";
    "<sun.nio.cs.ThreadLocalCoders$1: java.lang.Object create(java.lang.Object)>"
    "<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>"->"<sun.nio.cs.ThreadLocalCoders$1: java.lang.Object create(java.lang.Object)>";
    "<sun.nio.cs.ThreadLocalCoders$2: java.lang.Object create(java.lang.Object)>"
    "<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>"->"<sun.nio.cs.ThreadLocalCoders$2: java.lang.Object create(java.lang.Object)>";
    "<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>"->"<sun.nio.cs.ThreadLocalCoders$Cache: void moveToFront(java.lang.Object[],int)>";
    "<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>"
    "<sun.nio.cs.ThreadLocalCoders$1: java.lang.Object create(java.lang.Object)>"->"<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>";
    "<sun.nio.cs.ThreadLocalCoders$2: java.lang.Object create(java.lang.Object)>"->"<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>";
    "<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>"
    "<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>"->"<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>";
    "<sun.nio.fs.UnixPath: java.lang.String getPathForExceptionMessage()>"
    "<sun.nio.fs.UnixException: java.io.IOException asIOException(sun.nio.fs.UnixPath)>"->"<sun.nio.fs.UnixPath: java.lang.String getPathForExceptionMessage()>";
    "<sun.nio.fs.UnixException: java.io.IOException translateToIOException(java.lang.String,java.lang.String)>"
    "<sun.nio.fs.UnixException: java.io.IOException asIOException(sun.nio.fs.UnixPath)>"->"<sun.nio.fs.UnixException: java.io.IOException translateToIOException(java.lang.String,java.lang.String)>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>"
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(byte[])>"->"<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>"
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(byte[])>"->"<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>";
    "<sun.nio.fs.UnixPath: byte[] resolve(byte[],byte[])>"
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>"->"<sun.nio.fs.UnixPath: byte[] resolve(byte[],byte[])>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath toUnixPath(java.nio.file.Path)>"
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>"->"<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath toUnixPath(java.nio.file.Path)>";
    "<sun.nio.fs.UnixPath: byte[] resolve(byte[],byte[])>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<sun.nio.fs.UnixPath: byte[] resolve(byte[],byte[])>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<sun.nio.fs.UnixPath: byte[] resolve(byte[],byte[])>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<java.nio.file.Files$AcceptAllFilter: boolean accept(java.nio.file.Path)>"
    "<java.nio.file.Files$AcceptAllFilter: boolean accept(java.lang.Object)>"->"<java.nio.file.Files$AcceptAllFilter: boolean accept(java.nio.file.Path)>";
    "<java.nio.file.Files$1: boolean accept(java.nio.file.Path)>"
    "<java.nio.file.Files$1: boolean accept(java.lang.Object)>"->"<java.nio.file.Files$1: boolean accept(java.nio.file.Path)>";
    "<sun.nio.fs.UnixNativeDispatcher$1: java.lang.Void run()>"
    "<sun.nio.fs.UnixNativeDispatcher$1: java.lang.Object run()>"->"<sun.nio.fs.UnixNativeDispatcher$1: java.lang.Void run()>";
    "<sun.nio.fs.UnixNativeDispatcher$1: java.lang.Void run()>"->"<java.lang.System: void loadLibrary(java.lang.String)>";
    "<sun.nio.fs.UnixMountEntry: boolean hasOption(java.lang.String)>"
    "<sun.nio.fs.UnixMountEntry: boolean isIgnored()>"->"<sun.nio.fs.UnixMountEntry: boolean hasOption(java.lang.String)>";
    "<sun.nio.fs.Util: java.lang.String[] split(java.lang.String,char)>"
    "<sun.nio.fs.UnixMountEntry: boolean hasOption(java.lang.String)>"->"<sun.nio.fs.Util: java.lang.String[] split(java.lang.String,char)>";
    "<sun.nio.fs.UnixPath: boolean isEmpty()>"
    "<sun.nio.fs.UnixPath: void initOffsets()>"->"<sun.nio.fs.UnixPath: boolean isEmpty()>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getName(int)>"
    "<sun.nio.fs.UnixPath: java.nio.file.Path getName(int)>"->"<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getName(int)>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getName(int)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<java.util.concurrent.LinkedBlockingDeque$Itr: java.util.concurrent.LinkedBlockingDeque$Node nextNode(java.util.concurrent.LinkedBlockingDeque$Node)>"
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node succ(java.util.concurrent.LinkedBlockingDeque$Node)>"->"<java.util.concurrent.LinkedBlockingDeque$Itr: java.util.concurrent.LinkedBlockingDeque$Node nextNode(java.util.concurrent.LinkedBlockingDeque$Node)>";
    "<java.util.concurrent.LinkedBlockingDeque$DescendingItr: java.util.concurrent.LinkedBlockingDeque$Node nextNode(java.util.concurrent.LinkedBlockingDeque$Node)>"
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node succ(java.util.concurrent.LinkedBlockingDeque$Node)>"->"<java.util.concurrent.LinkedBlockingDeque$DescendingItr: java.util.concurrent.LinkedBlockingDeque$Node nextNode(java.util.concurrent.LinkedBlockingDeque$Node)>";
    "<java.util.concurrent.LinkedBlockingDeque$Itr: java.util.concurrent.LinkedBlockingDeque$Node firstNode()>"
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node succ(java.util.concurrent.LinkedBlockingDeque$Node)>"->"<java.util.concurrent.LinkedBlockingDeque$Itr: java.util.concurrent.LinkedBlockingDeque$Node firstNode()>";
    "<java.util.concurrent.LinkedBlockingDeque$DescendingItr: java.util.concurrent.LinkedBlockingDeque$Node firstNode()>"
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node succ(java.util.concurrent.LinkedBlockingDeque$Node)>"->"<java.util.concurrent.LinkedBlockingDeque$DescendingItr: java.util.concurrent.LinkedBlockingDeque$Node firstNode()>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.String: int indexOf(int)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<java.lang.String: java.lang.String trim()>"
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.String: java.lang.String trim()>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.String: int length()>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.String: int indexOf(int)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.String: int indexOf(int)>";
    "<java.lang.String: int codePointAt(int)>"
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.String: int codePointAt(int)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.String: int codePointAt(int)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.ArrayList: boolean contains(java.lang.Object)>"
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "<java.util.Vector: boolean contains(java.lang.Object)>"
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.Vector: boolean contains(java.lang.Object)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.LinkedList: boolean contains(java.lang.Object)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: java.io.File checkExtensionExists(java.lang.String)>"
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: java.io.File checkExtensionExists(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>";
    "<sun.misc.ExtensionDependency: void debugException(java.lang.Throwable)>"
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: void debugException(java.lang.Throwable)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: void debugException(java.lang.Throwable)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getInstalledExtensions()>"
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: java.io.File[] getInstalledExtensions()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: void debugException(java.lang.Throwable)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: void debugException(java.lang.Throwable)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainstInstalled(java.lang.String,java.util.jar.Attributes)>"->"<sun.misc.ExtensionDependency: void debugException(java.lang.Throwable)>";
    "<sun.misc.ExtensionDependency: java.io.File checkExtensionExists(java.lang.String)>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getInstalledExtensions()>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.util.Vector: java.lang.Object clone()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.util.Vector: java.util.Enumeration elements()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<javax.naming.NameImplEnumerator: boolean hasMoreElements()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.util.StringTokenizer: boolean hasMoreElements()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<sun.misc.URLClassPath$2: boolean hasMoreElements()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<sun.misc.URLClassPath$1: boolean hasMoreElements()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: boolean hasMoreElements()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<javax.naming.NameImplEnumerator: java.lang.Object nextElement()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.util.StringTokenizer: java.lang.Object nextElement()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<sun.misc.URLClassPath$2: java.lang.Object nextElement()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<sun.misc.URLClassPath$1: java.lang.Object nextElement()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<com.sun.naming.internal.VersionHelper12$InputStreamEnumeration: java.lang.Object nextElement()>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.Launcher: java.lang.ClassLoader getClassLoader()>"
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<sun.misc.Launcher: java.lang.ClassLoader getClassLoader()>";
    "<java.lang.ClassLoader: java.lang.ClassLoader getParent()>"
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.lang.ClassLoader: java.lang.ClassLoader getParent()>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
    "<java.lang.System: void setSecurityManager(java.lang.SecurityManager)>"
    "<java.lang.Thread: java.lang.Thread currentThread()>"
    "<sun.misc.Launcher$AppClassLoader: java.lang.ClassLoader getAppClassLoader(java.lang.ClassLoader)>"
    "<sun.misc.Launcher$ExtClassLoader: sun.misc.Launcher$ExtClassLoader getExtClassLoader()>"
    "<java.lang.Object: boolean registerAsParallelCapable()>"
    "<sun.misc.Launcher$AppClassLoader: java.lang.ClassLoader getAppClassLoader(java.lang.ClassLoader)>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
    "<sun.misc.Launcher: java.io.File[] access$200(java.lang.String)>"
    "<sun.misc.Launcher$AppClassLoader: java.lang.ClassLoader getAppClassLoader(java.lang.ClassLoader)>"->"<sun.misc.Launcher: java.io.File[] access$200(java.lang.String)>";
    "<sun.misc.Launcher$AppClassLoader: java.lang.ClassLoader getAppClassLoader(java.lang.ClassLoader)>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "<sun.misc.Launcher$ExtClassLoader: sun.misc.Launcher$ExtClassLoader getExtClassLoader()>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>";
    "<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>"
    "<sun.misc.Launcher$ExtClassLoader: sun.misc.Launcher$ExtClassLoader getExtClassLoader()>"->"<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>";
    "<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>"
    "<sun.misc.Launcher: java.io.File[] access$200(java.lang.String)>"->"<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>";
    "<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<sun.nio.cs.ThreadLocalCoders$1: boolean hasName(java.lang.Object,java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.nio.cs.ThreadLocalCoders$2: boolean hasName(java.lang.Object,java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.nio.fs.UnixPath: java.lang.String toString()>"
    "<sun.nio.fs.UnixPath: java.lang.String getPathForExceptionMessage()>"->"<sun.nio.fs.UnixPath: java.lang.String toString()>";
    "<sun.nio.fs.UnixException: int errno()>"
    "<sun.nio.fs.UnixException: java.io.IOException translateToIOException(java.lang.String,java.lang.String)>"->"<sun.nio.fs.UnixException: int errno()>";
    "<sun.nio.fs.UnixException: java.io.IOException translateToIOException(java.lang.String,java.lang.String)>"->"<sun.nio.fs.UnixException: int errno()>";
    "<sun.nio.fs.UnixException: java.io.IOException translateToIOException(java.lang.String,java.lang.String)>"->"<sun.nio.fs.UnixException: int errno()>";
    "<sun.nio.fs.UnixException: java.lang.String errorString()>"
    "<sun.nio.fs.UnixException: java.io.IOException translateToIOException(java.lang.String,java.lang.String)>"->"<sun.nio.fs.UnixException: java.lang.String errorString()>";
    "<sun.nio.fs.UnixNativeDispatcher: byte[] strerror(int)>"
    "<sun.nio.fs.UnixException: java.lang.String errorString()>"->"<sun.nio.fs.UnixNativeDispatcher: byte[] strerror(int)>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>"->"<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>";
    "<sun.nio.fs.UnixPath: java.nio.file.Path getFileName()>"
    "<java.nio.file.Files$1: boolean accept(java.nio.file.Path)>"->"<sun.nio.fs.UnixPath: java.nio.file.Path getFileName()>";
    "<sun.nio.fs.UnixFileSystem$3: boolean matches(java.nio.file.Path)>"
    "<java.nio.file.Files$1: boolean accept(java.nio.file.Path)>"->"<sun.nio.fs.UnixFileSystem$3: boolean matches(java.nio.file.Path)>";
    "<sun.nio.fs.UnixMountEntry: boolean hasOption(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.nio.fs.Util: java.lang.String[] split(java.lang.String,char)>"->"<java.lang.String: int length()>";
    "<sun.nio.fs.Util: java.lang.String[] split(java.lang.String,char)>"->"<java.lang.String: char charAt(int)>";
    "<sun.nio.fs.Util: java.lang.String[] split(java.lang.String,char)>"->"<java.lang.String: int length()>";
    "<sun.nio.fs.Util: java.lang.String[] split(java.lang.String,char)>"->"<java.lang.String: char charAt(int)>";
    "<sun.nio.fs.Util: java.lang.String[] split(java.lang.String,char)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.nio.fs.Util: java.lang.String[] split(java.lang.String,char)>"->"<java.lang.String: int length()>";
    "<sun.nio.fs.Util: java.lang.String[] split(java.lang.String,char)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getName(int)>"->"<sun.nio.fs.UnixPath: void initOffsets()>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getName(int)>"->"<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>";
    "<sun.misc.ExtensionDependency$2: java.lang.Object run()>"
    "<sun.misc.ExtensionDependency: java.io.File checkExtensionExists(java.lang.String)>"->"<sun.misc.ExtensionDependency$2: java.lang.Object run()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.io.File: java.lang.String getName()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency$1: java.lang.Object run()>"
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<sun.misc.ExtensionDependency$1: java.lang.Object run()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.security.PrivilegedActionException: java.lang.Exception getException()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.security.PrivilegedActionException: java.lang.Exception getException()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.security.PrivilegedActionException: java.lang.Exception getException()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionInfo: int isCompatibleWith(sun.misc.ExtensionInfo)>"
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<sun.misc.ExtensionInfo: int isCompatibleWith(sun.misc.ExtensionInfo)>";
    "<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>"->"<sun.misc.ExtensionDependency: boolean installExtension(sun.misc.ExtensionInfo,sun.misc.ExtensionInfo)>";
    "<sun.misc.ExtensionDependency$3: java.lang.Object run()>"
    "<sun.misc.ExtensionDependency: java.io.File[] getInstalledExtensions()>"->"<sun.misc.ExtensionDependency$3: java.lang.Object run()>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<sun.misc.ExtensionDependency: java.io.File[] getInstalledExtensions()>";
    "<sun.misc.ExtensionDependency$4: java.lang.Object run()>"
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<sun.misc.ExtensionDependency$4: java.lang.Object run()>";
    "<java.net.URLClassLoader: java.net.URL[] getURLs()>"
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.net.URLClassLoader: java.net.URL[] getURLs()>";
    "<sun.misc.Launcher$ExtClassLoader: void addExtURL(java.net.URL)>"
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<sun.misc.Launcher$ExtClassLoader: void addExtURL(java.net.URL)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.net.URL: java.lang.String toString()>"
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.net.URL: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.net.URL: java.lang.String toString()>";
    "<java.lang.String: int compareToIgnoreCase(java.lang.String)>"
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.String: int compareToIgnoreCase(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>"
    "<sun.misc.InnocuousThread: void setContextClassLoader(java.lang.ClassLoader)>"
    "<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>"
    "<sun.misc.Launcher$AppClassLoader$1: java.lang.Object run()>"
    "<sun.misc.Launcher$AppClassLoader: java.lang.ClassLoader getAppClassLoader(java.lang.ClassLoader)>"->"<sun.misc.Launcher$AppClassLoader$1: java.lang.Object run()>";
    "<sun.misc.Launcher$ExtClassLoader$1: java.lang.Object run()>"
    "<sun.misc.Launcher$ExtClassLoader: sun.misc.Launcher$ExtClassLoader getExtClassLoader()>"->"<sun.misc.Launcher$ExtClassLoader$1: java.lang.Object run()>";
    "<sun.misc.Launcher$ExtClassLoader: sun.misc.Launcher$ExtClassLoader getExtClassLoader()>"->"<java.security.PrivilegedActionException: java.lang.Exception getException()>";
    "<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>"->"<java.util.StringTokenizer: int countTokens()>";
    "<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<java.lang.String: int indexOf(java.lang.String,int)>"
    "<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String,int)>";
    "<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String,int)>";
    "<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>"->"<java.lang.String: int length()>";
    "<java.lang.String: java.lang.String substring(int)>"
    "<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<sun.nio.fs.UnixException: java.lang.String errorString()>"->"<sun.nio.fs.UnixException: int errno()>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getFileName()>"
    "<sun.nio.fs.UnixPath: java.nio.file.Path getFileName()>"->"<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getFileName()>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getFileName()>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<sun.nio.fs.UnixFileSystem$3: boolean matches(java.nio.file.Path)>"->"<sun.nio.fs.UnixPath: java.lang.String toString()>";
    "<sun.nio.fs.UnixFileSystem$3: boolean matches(java.nio.file.Path)>"->"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>";
    "<sun.nio.fs.UnixFileSystem$3: boolean matches(java.nio.file.Path)>"->"<java.util.regex.Matcher: boolean matches()>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"
    "<sun.misc.ExtensionDependency$2: java.lang.Object run()>"->"<sun.misc.ExtensionDependency$2: java.io.File run()>";
    "<sun.misc.ExtensionDependency: void access$200(sun.misc.ExtensionDependency,java.lang.Throwable)>"
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<sun.misc.ExtensionDependency: void access$200(sun.misc.ExtensionDependency,java.lang.Throwable)>";
    "<sun.misc.ExtensionDependency: void access$100(java.lang.String)>"
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<sun.misc.ExtensionDependency: void access$100(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] access$000()>"
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<sun.misc.ExtensionDependency: java.io.File[] access$000()>";
    "<sun.misc.ExtensionDependency: void access$100(java.lang.String)>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"
    "<sun.misc.ExtensionDependency: java.io.File[] access$000()>"->"<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
    "<sun.misc.ExtensionDependency$1: java.util.jar.Manifest run()>"
    "<sun.misc.ExtensionDependency$1: java.lang.Object run()>"->"<sun.misc.ExtensionDependency$1: java.util.jar.Manifest run()>";
    "<java.lang.String: int compareTo(java.lang.String)>"
    "<sun.misc.ExtensionInfo: int isCompatibleWith(sun.misc.ExtensionInfo)>"->"<java.lang.String: int compareTo(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int compareExtensionVersion(java.lang.String,java.lang.String)>"
    "<sun.misc.ExtensionInfo: int isCompatibleWith(sun.misc.ExtensionInfo)>"->"<sun.misc.ExtensionInfo: int compareExtensionVersion(java.lang.String,java.lang.String)>";
    "<sun.misc.ExtensionInfo: int isCompatibleWith(sun.misc.ExtensionInfo)>"->"<sun.misc.ExtensionInfo: int compareExtensionVersion(java.lang.String,java.lang.String)>";
    "<sun.misc.ExtensionInfo: int isCompatibleWith(sun.misc.ExtensionInfo)>"->"<java.lang.String: int compareTo(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int isCompatibleWith(sun.misc.ExtensionInfo)>"->"<java.lang.String: int compareTo(java.lang.String)>";
    "<sun.misc.ExtensionDependency$3: java.io.File[] run()>"
    "<sun.misc.ExtensionDependency$3: java.lang.Object run()>"->"<sun.misc.ExtensionDependency$3: java.io.File[] run()>";
    "<sun.misc.ExtensionDependency$3: java.io.File[] run()>"->"<sun.misc.ExtensionDependency: void access$200(sun.misc.ExtensionDependency,java.lang.Throwable)>";
    "<sun.misc.ExtensionDependency$3: java.io.File[] run()>"->"<sun.misc.ExtensionDependency: void access$100(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] access$300(java.io.File[])>"
    "<sun.misc.ExtensionDependency$3: java.io.File[] run()>"->"<sun.misc.ExtensionDependency: java.io.File[] access$300(java.io.File[])>";
    "<sun.misc.ExtensionDependency$3: java.io.File[] run()>"->"<sun.misc.ExtensionDependency: java.io.File[] access$000()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"
    "<sun.misc.ExtensionDependency: java.io.File[] access$300(java.io.File[])>"->"<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<sun.misc.ExtensionDependency: void debug(java.lang.String)>";
    "<sun.misc.ExtensionDependency$4: java.net.URL run()>"
    "<sun.misc.ExtensionDependency$4: java.lang.Object run()>"->"<sun.misc.ExtensionDependency$4: java.net.URL run()>";
    "<sun.misc.ExtensionDependency$4: java.net.URL run()>"->"<sun.misc.ExtensionDependency: void access$200(sun.misc.ExtensionDependency,java.lang.Throwable)>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"
    "<sun.misc.ExtensionDependency$4: java.net.URL run()>"->"<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String)>"
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String)>";
    "<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String)>"->"<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>";
    "<java.net.URLClassLoader: void addURL(java.net.URL)>"
    "<sun.misc.Launcher$ExtClassLoader: void addExtURL(java.net.URL)>"->"<java.net.URLClassLoader: void addURL(java.net.URL)>";
    "<sun.misc.Launcher$AppClassLoader$1: sun.misc.Launcher$AppClassLoader run()>"
    "<sun.misc.Launcher$AppClassLoader$1: java.lang.Object run()>"->"<sun.misc.Launcher$AppClassLoader$1: sun.misc.Launcher$AppClassLoader run()>";
    "<sun.misc.Launcher: java.net.URL[] access$300(java.io.File[])>"
    "<sun.misc.Launcher$AppClassLoader$1: sun.misc.Launcher$AppClassLoader run()>"->"<sun.misc.Launcher: java.net.URL[] access$300(java.io.File[])>";
    "<sun.misc.Launcher: java.net.URL[] pathToURLs(java.io.File[])>"
    "<sun.misc.Launcher: java.net.URL[] access$300(java.io.File[])>"->"<sun.misc.Launcher: java.net.URL[] pathToURLs(java.io.File[])>";
    "<sun.misc.Launcher: java.net.URL getFileURL(java.io.File)>"
    "<sun.misc.Launcher: java.net.URL[] pathToURLs(java.io.File[])>"->"<sun.misc.Launcher: java.net.URL getFileURL(java.io.File)>";
    "<sun.misc.Launcher: java.net.URL getFileURL(java.io.File)>"->"<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>";
    "<sun.misc.Launcher$ExtClassLoader$1: sun.misc.Launcher$ExtClassLoader run()>"
    "<sun.misc.Launcher$ExtClassLoader$1: java.lang.Object run()>"->"<sun.misc.Launcher$ExtClassLoader$1: sun.misc.Launcher$ExtClassLoader run()>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"
    "<sun.misc.Launcher$ExtClassLoader$1: sun.misc.Launcher$ExtClassLoader run()>"->"<sun.misc.MetaIndex: void registerDirectory(java.io.File)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<sun.misc.MetaIndex: java.util.Map getJarMap()>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getFileName()>"->"<sun.nio.fs.UnixPath: void initOffsets()>";
    "<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getFileName()>"->"<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.lang.String: java.lang.String toLowerCase()>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.io.File: java.lang.String getName()>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.io.File: boolean exists()>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency$2: java.io.File run()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: void access$200(sun.misc.ExtensionDependency,java.lang.Throwable)>"->"<sun.misc.ExtensionDependency: void debugException(java.lang.Throwable)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<sun.security.action.GetPropertyAction: java.lang.Object run()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.util.StringTokenizer: int countTokens()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency$1: java.util.jar.Manifest run()>"->"<java.io.File: boolean exists()>";
    "<sun.misc.ExtensionDependency$1: java.util.jar.Manifest run()>"->"<java.io.File: java.lang.String getName()>";
    "<sun.misc.ExtensionDependency$1: java.util.jar.Manifest run()>"->"<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>";
    "<sun.misc.ExtensionInfo: int compareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String toLowerCase()>";
    "<sun.misc.ExtensionInfo: int compareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String toLowerCase()>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"
    "<sun.misc.ExtensionInfo: int compareExtensionVersion(java.lang.String,java.lang.String)>"->"<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>";
    "<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>"
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.util.Vector: int size()>";
    "<java.util.Vector: void copyInto(java.lang.Object[])>"
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.util.Vector: void copyInto(java.lang.Object[])>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "<java.io.File: boolean isDirectory()>"
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.io.File: boolean isDirectory()>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.misc.Launcher: java.net.URLStreamHandlerFactory access$100()>"
    "<sun.misc.Launcher: java.net.URL getFileURL(java.io.File)>"->"<java.io.File: java.io.File getCanonicalFile()>";
    "<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>"
    "<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>"->"<sun.misc.Launcher: java.net.URL getFileURL(java.io.File)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.io.File: boolean exists()>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.io.File: java.io.File getCanonicalFile()>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.io.BufferedReader: void close()>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.io.BufferedReader: void close()>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.lang.String: char charAt(int)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.lang.String: char charAt(int)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: void clear()>"
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.ArrayList: void clear()>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.ArrayList: int size()>";
    "<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.MetaIndex: void registerDirectory(java.io.File)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: int length()>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<java.lang.String: java.lang.String toString()>"
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String toString()>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String toString()>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: int length()>";
    "<sun.misc.ExtensionInfo: int strictCompareExtensionVersion(java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<java.lang.Character: int getNumericValue(char)>"
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Character: int getNumericValue(char)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Character: int getNumericValue(char)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Character: int getNumericValue(char)>";
    "<java.lang.Character: boolean isLetter(char)>"
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Character: boolean isLetter(char)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<java.io.File: java.lang.String[] list()>"
    "<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>"->"<java.io.File: java.lang.String[] list()>";
    "<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>"->"<java.util.Vector: int size()>";
    "<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>"->"<java.util.Vector: void copyInto(java.lang.Object[])>";
    "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>"
    "<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>"
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: int length()>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<java.text.Format: java.lang.String format(java.lang.Object)>"
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.text.Format: java.lang.String format(java.lang.Object)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>"->"<java.io.PrintStream: void println(java.lang.String)>";
}
