<java.lang.Runtime: java.lang.Runtime getRuntime()> -> _SOURCE_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void <init>(java.io.OutputStream)> -> _SINK_

<javax.crypto.Cipher: byte[] doFinal(byte[])> -> _SINK_
<javax.crypto.Cipher: byte[] doFinal(byte[])> -> _SOURCE_
<com.xxx.yyy.qzl: void <init>(android.content.Context,java.lang.String,java.lang.String,int,com.xxx.yyy.SMSObserver)> -> _SINK_
<com.xxx.yyy.qzl: void <init>(android.content.Context,java.lang.String,java.lang.String,int)> -> _SINK_
<android.os.Build$VERSION: void <clinit>()> -> _SOURCE_

<android.net.Uri: android.net.Uri parse(java.lang.String)> -> _SOURCE_

<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)> -> _SOURCE_
<android.content.Context: android.content.pm.PackageManager getPackageManager()> -> _SOURCE_

<java.util.Calendar: int get(int)> -> _SOURCE_
<java.util.Calendar: java.util.Calendar getInstance()> -> _SOURCE_
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)> -> _SOURCE_
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)> -> _SOURCE_
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)> -> _SOURCE_
<java.util.Calendar: java.util.Date getTime()> -> _SOURCE_
<java.util.Calendar: long getTimeInMillis()> -> _SOURCE_
<java.util.Calendar: java.util.TimeZone getTimeZone()> -> _SOURCE_



<java.lang.System: long currentTimeMillis()> -> _SOURCE_
<java.lang.System: long nanoTime()> -> _SOURCE_

<app.DummyClass: void invokeIfStmt(java.lang.Object[])> -> _SINK_
<app.DummyClass: void invokeIfStmt(java.lang.Object)> -> _SINK_
<app.DummyClass: void invokeIfStmt(boolean)> -> _SINK_
<app.DummyClass: void invokeIfStmt(double)> -> _SINK_



<android.location.Location: double getLatitude()> -> _SOURCE_
<android.location.Location: double getLongitude()> -> _SOURCE_

<android.telephony.TelephonyManager: java.lang.String getDeviceId()> android.permission.READ_PHONE_STATE -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> android.permission.READ_PHONE_STATE -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> android.permission.READ_PHONE_STATE -> _SOURCE_

<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SOURCE_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SOURCE_

<java.io.OutputStream: void <init>()> -> _SOURCE_

<java.io.Writer: void <init>()> -> _SOURCE_
<java.io.Writer: void <init>(java.lang.Object)> -> _SOURCE_

<java.io.InputStream: void <init>()> -> _SOURCE_

<java.io.Reader: <init>()> -> _SOURCE_
<java.io.Reader: <init>(java.lang.Object)> -> _SOURCE_

<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> -> _SOURCE_
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> -> _SOURCE_
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> -> _SOURCE_
<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)> -> _SOURCE_

<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)> -> _SINK_

% add Activity.getIntent() as source instead of the next methods to avoid duplicate results.
<android.content.Intent: java.lang.String getAction()> -> _SOURCE_
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: boolean getBooleanExtra(java.lang.String, boolean)> -> _SOURCE_
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: byte getByteExtra(java.lang.String, byte)> -> _SOURCE_
<android.content.Intent: java.util.Set getCategories()> -> _SOURCE_
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: char getCharExtra(java.lang.String, char)> -> _SOURCE_
<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.ClipData getClipData()> -> _SOURCE_
<android.content.Intent: android.content.ComponentName getComponent()> -> _SOURCE_
<android.content.Intent: android.net.Uri getData()> -> _SOURCE_
<android.content.Intent: java.lang.String getDataString()> -> _SOURCE_
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: double getDoubleExtra(java.lang.String, double)> -> _SOURCE_
<android.content.Intent: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.Intent: int getFlags()> -> _SOURCE_
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: float getFloatExtra(java.lang.String, float)> -> _SOURCE_
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent getIntent(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)> -> _SOURCE_
<android.content.Intent: int getIntExtra(java.lang.String, int)> -> _SOURCE_
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: long getLongExtra(java.lang.String, long)> -> _SOURCE_
<android.content.Intent: java.lang.String getPackage()> -> _SOURCE_
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.lang.String getScheme()> -> _SOURCE_
<android.content.Intent: android.content.Intent getSelector()> -> _SOURCE_
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: short getShortExtra(java.lang.String, short)> -> _SOURCE_
<android.content.Intent: android.graphics.Rect getSourceBounds()> -> _SOURCE_
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)> -> _SOURCE_
<android.content.Intent: java.lang.String getType()> -> _SOURCE_
<android.content.Intent: void <init>()> -> _SOURCE_
<android.content.Intent: void <init>(android.content.Intent)> -> _SOURCE_
<android.content.Intent: void <init>(java.lang.String)> -> _SOURCE_
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)> -> _SOURCE_
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)> -> _SOURCE_
<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> -> _SOURCE_

%bundle sources
<android.os.Bundle: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.os.Bundle: boolean getBoolean(java.lang.String)> -> _SOURCE_
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> -> _SOURCE_
<android.os.Bundle: byte getByte(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> -> _SOURCE_
<android.os.Bundle: byte[] getByteArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: char getChar(java.lang.String)> -> _SOURCE_
<android.os.Bundle: char getChar(java.lang.String,char)> -> _SOURCE_
<android.os.Bundle: char[] getCharArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.os.Bundle: double getDouble(java.lang.String)> -> _SOURCE_
<android.os.Bundle: double getDouble(java.lang.String,double)> -> _SOURCE_
<android.os.Bundle: double[] getDoubleArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: float getFloat(java.lang.String)> -> _SOURCE_
<android.os.Bundle: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.os.Bundle: float[] getFloatArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: int getInt(java.lang.String,int)> -> _SOURCE_
<android.os.Bundle: int getInt(java.lang.String)> -> _SOURCE_
<android.os.Bundle: int[] getIntArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: long getLong(java.lang.String)> -> _SOURCE_
<android.os.Bundle: long getLong(java.lang.String,long)> -> _SOURCE_
<android.os.Bundle: long[] getLongArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> -> _SOURCE_
<android.os.Bundle: short getShort(java.lang.String)> -> _SOURCE_
<android.os.Bundle: short getShort(java.lang.String,short)> -> _SOURCE_
<android.os.Bundle: short[] getShortArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.lang.String getString(java.lang.String)> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String key)> -> _SOURCE_

%bundle sinks
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)> -> _SINK_
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> -> _SINK_
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> -> _SINK_
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.Bundle: void putByte(java.lang.String,byte)> -> _SINK_
<android.os.Bundle: void putByteArray(java.lang.String,byte[])> -> _SINK_
<android.os.Bundle: void putChar(java.lang.String,char)> -> _SINK_
<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _SINK_
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> -> _SINK_
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putDouble(java.lang.String,double)> -> _SINK_
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])> -> _SINK_
<android.os.Bundle: void putFloat(java.lang.String,float)> -> _SINK_
<android.os.Bundle: void putFloatArray(java.lang.String,float[])> -> _SINK_
<android.os.Bundle: void putInt(java.lang.String,int)> -> _SINK_
<android.os.Bundle: void putIntArray(java.lang.String,int[])> -> _SINK_
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putLong(java.lang.String,long)> -> _SINK_
<android.os.Bundle: void putLongArray(java.lang.String,long[])> -> _SINK_
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> -> _SINK_
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
<android.os.Bundle: void putShort(java.lang.String,short)> -> _SINK_
<android.os.Bundle: void putShortArray(java.lang.String,short[])> -> _SINK_
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> -> _SINK_
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> -> _SINK_
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> -> _SINK_
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putAll(android.os.Bundle)> -> _SINK_

<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)> -> _SOURCE_
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)> -> _SOURCE_
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)> -> _SOURCE_
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)> -> _SOURCE_
<android.media.AudioRecord: int read(short[],int,int)> -> _SOURCE_
<android.media.AudioRecord: int read(byte[],int,int)> -> _SOURCE_
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)> -> _SOURCE_

<android.os.Handler: android.os.Message obtainMessage()> -> _SOURCE_
<android.os.Handler: android.os.Message obtainMessage(int,int,int)> -> _SOURCE_
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)> -> _SOURCE_
<android.os.Handler: android.os.Message obtainMessage(int)> -> _SOURCE_
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)> -> _SOURCE_

<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_

<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_

<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_

<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_

<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_

<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent setAction(java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.Class)> -> _SINK_
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> -> _SINK_

<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> -> _SINK_

<android.content.Context: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_

<android.media.MediaRecorder: void setVideoSource(int)> -> _SINK_
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)> -> _SINK_
<android.media.MediaRecorder: void start()> -> _SINK_

<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_

<android.content.IntentFilter: void addAction(java.lang.String)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_ 
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_ 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS -> _SINK_ 
<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_
<android.os.Handler: boolean sendMessage(android.os.Message)> -> _SINK_

<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_

<android.content.SharedPreferences: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)> -> _SOURCE_


<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String: getMacAddress()> -> _SOURCE_
<java.util.Locale: java.lang.String getCountry()> -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getSSID()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getCid()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getLac()> -> _SOURCE_
<android.location.Location: double getLongitude()> -> _SOURCE_
<android.location.Location: double getLatitude()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> -> _SOURCE_
<java.util.Calendar: java.util.TimeZone getTimeZone()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllBookmarks()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllVisitedUrls()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_

<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_

<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_

<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)> -> _SINK_
<java.net.URL: void <init>(java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.net.URL,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)> -> _SINK_

<android.content.Context: void startActivity(android.content.Intent)> -> _SINK_
<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.content.Context: void startActivities(android.content.Intent[])> -> _SINK_
<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_
<android.content.Context: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.content.Context: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_

<android.app.Activity: android.content.Intent getIntent()> -> _SOURCE_

<android.app.Activity: void setResult(int,android.content.Intent)> -> _SINK_
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)> -> _SOURCE_

<android.app.Activity: void startActivity(android.content.Intent)> -> _SINK_
<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivities(android.content.Intent[])> -> _SINK_
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> -> _SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> -> _SINK_
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int)> -> _SINK_
<android.app.Activity: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<android.app.Activity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.app.Activity: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.app.Activity: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.app.Activity: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)> -> _SINK_
<android.app.Activity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_

<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_



<android.app.Activity: android.view.View findViewById(int)> -> _SOURCE_
<android.database.Cursor: java.lang.String getString(int)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_

<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getSubscriberId()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()>  -> _SOURCE_
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)>  -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimImpi()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSubscriberId()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1AlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getMeid()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()>  -> _SOURCE_
<android.telephony.SmsCbLocation: java.lang.String getPlmn()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String apnIdToType(int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaMin()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getSubscriberId()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()>  -> _SOURCE_
<android.telephony.SmsCbLocation: java.lang.String toString()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: java.lang.String getAid()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimDomain()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.IccCardProxy: java.lang.String getServiceProviderName()>  -> _SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String getNumber()>  -> _SOURCE_
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1Number()>  -> _SOURCE_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMsisdn()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getCompleteVoiceMailNumber()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()> android.permission.CALL_PRIVILEGED  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> android.permission.READ_PHONE_STATE  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceSvn()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> android.permission.READ_PHONE_STATE  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getCnapName()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()> android.permission.READ_PHONE_STATE  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaEriText()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnNumber()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getImei()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> android.permission.READ_PHONE_STATE  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()>  -> _SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaPrlVersion()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getEsn()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getCompleteVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getIccSerialNumber()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> android.permission.READ_PHONE_STATE  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> android.permission.READ_PHONE_STATE  -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> android.permission.READ_PHONE_STATE  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getServiceProviderName()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaPrlVersion()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceId()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaMin()>  -> _SOURCE_
<com.android.internal.telephony.CallTracker: java.lang.String checkForTestEmergencyNumber(java.lang.String)>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaEriText()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getEsn()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)>  -> _SOURCE_
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.location.GpsSatellite: int getPrn()>  -> _SOURCE_
<android.location.Address: java.lang.String getFeatureName()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: android.telephony.CellLocation getCellLocation()>  -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<android.location.Address: java.lang.String getAdminArea()>  -> _SOURCE_
<android.location.Location: float getSpeed()>  -> _SOURCE_
<com.android.server.location.MockProvider: long getStatusUpdateTime()>  -> _SOURCE_
<android.location.Address: java.util.Locale getLocale()>  -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(boolean)>  -> _SOURCE_
<android.location.Address: java.lang.String getCountryName()>  -> _SOURCE_
<android.telephony.SmsCbLocation: int getLac()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>  -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()>  -> _SOURCE_
<android.location.GpsSatellite: float getSnr()>  -> _SOURCE_
<android.location.GeocoderParams: java.util.Locale getLocale()>  -> _SOURCE_
<android.renderscript.Allocation: int getBytesSize()>  -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>  -> _SOURCE_
<com.android.server.location.PassiveProvider: long getStatusUpdateTime()>  -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>  -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()>  -> _SOURCE_
<com.android.server.location.PassiveProvider: java.lang.String getName()>  -> _SOURCE_
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getNetworkBasedCountry()>  -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)>  -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: long getStatusUpdateTime()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>  -> _SOURCE_
<android.location.Address: int getMaxAddressLineIndex()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)>  -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>  -> _SOURCE_
<android.location.Criteria: int getVerticalAccuracy()>  -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)>  -> _SOURCE_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()>  -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>  -> _SOURCE_
<android.location.Location: long getElapsedRealtimeNanos()>  -> _SOURCE_
<android.location.Location: double getLatitude()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.location.Location: float getBearing()>  -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)>  -> _SOURCE_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.location.LocationProvider: java.lang.String getName()>  -> _SOURCE_
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>  -> _SOURCE_
<com.android.server.location.MockProvider: int getStatus(android.os.Bundle)>  -> _SOURCE_
<android.location.Location: android.os.Bundle getExtras()>  -> _SOURCE_
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.renderscript.Allocation: android.graphics.SurfaceTexture getSurfaceTexture()>  -> _SOURCE_
<android.location.Criteria: int getPowerRequirement()>  -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getPsc()>  -> _SOURCE_
<android.location.GpsStatus: java.lang.Iterable getSatellites()>  -> _SOURCE_
<com.android.camera.LocationManager: android.location.Location getCurrentLocation()>  -> _SOURCE_
<android.location.Address: java.lang.String getPremises()>  -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getLac()>  -> _SOURCE_
<com.android.internal.location.GpsNetInitiatedHandler: byte[] stringToByteArray(java.lang.String,boolean)>  -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>  -> _SOURCE_
<com.android.server.location.LocationProviderProxy: java.lang.String getName()>  -> _SOURCE_
<android.location.Address: java.lang.String getThoroughfare()>  -> _SOURCE_
<com.android.camera.RecordLocationPreference: java.lang.String getValue()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<android.location.LocationRequest: java.lang.String getProvider()>  -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<android.location.IGpsStatusProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.location.LocationRequest: int getQuality()>  -> _SOURCE_
<com.android.server.location.MockProvider: com.android.internal.location.ProviderProperties getProperties()>  -> _SOURCE_
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>  -> _SOURCE_
<android.location.Location: long getTime()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Element getElement()>  -> _SOURCE_
<android.location.Address: java.lang.String getAddressLine(int)>  -> _SOURCE_
<com.android.server.location.PassiveProvider: com.android.internal.location.ProviderProperties getProperties()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>  -> _SOURCE_
<com.android.server.location.MockProvider: java.lang.String getName()>  -> _SOURCE_
<android.location.Country: int getSource()>  -> _SOURCE_
<com.android.server.location.GeofenceState: double getDistanceToBoundary()>  -> _SOURCE_
<com.android.server.location.LocationProviderProxy: int getStatus(android.os.Bundle)>  -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.location.Address: java.lang.String getPhone()>  -> _SOURCE_
<android.location.Geofence: double getLongitude()>  -> _SOURCE_
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()>  -> _SOURCE_
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()>  -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>  -> _SOURCE_
<android.location.INetInitiatedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.location.LocationRequest: long getInterval()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)>  -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>  -> _SOURCE_
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.location.Address: java.lang.String getUrl()>  -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: java.lang.String getCountryFromLocation(android.location.Location)>  -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: long getQueryLocationTimeout()>  -> _SOURCE_
<android.location.Address: java.lang.String getLocality()>  -> _SOURCE_
<android.location.IGpsStatusProvider$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>  -> _SOURCE_
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>  -> _SOURCE_
<android.location.INetInitiatedListener$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.location.Location: java.lang.String getProvider()>  -> _SOURCE_
<android.location.LocationProvider: int getPowerRequirement()>  -> _SOURCE_
<com.android.server.location.LocationProviderProxy: com.android.internal.location.ProviderProperties getProperties()>  -> _SOURCE_
<com.android.server.LocationManagerService: java.util.List getAllProviders()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>  -> _SOURCE_
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.location.LocationManager: java.util.List getAllProviders()>  -> _SOURCE_
<android.location.Criteria: int getSpeedAccuracy()>  -> _SOURCE_
<android.location.GpsStatus: int getTimeToFirstFix()>  -> _SOURCE_
<android.location.Geofence: int getType()>  -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<android.location.Geofence: float getRadius()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()>  -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<android.location.Geofence: double getLatitude()>  -> _SOURCE_
<android.location.Address: android.os.Bundle getExtras()>  -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>  -> _SOURCE_
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>  -> _SOURCE_
<android.location.Location: double getAltitude()>  -> _SOURCE_
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>  -> _SOURCE_
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>  -> _SOURCE_
<android.location.Address: double getLongitude()>  -> _SOURCE_
<android.location.GpsSatellite: float getElevation()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Type getType()>  -> _SOURCE_
<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>  -> _SOURCE_
<android.renderscript.Allocation: android.view.Surface getSurface()>  -> _SOURCE_
<android.location.IGeocodeProvider$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()>  -> _SOURCE_
<android.location.IGpsStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.server.location.GpsLocationProvider: com.android.internal.location.ProviderProperties getProperties()>  -> _SOURCE_
<android.location.Country: java.lang.String getCountryIso()>  -> _SOURCE_
<android.location.LocationProvider: int getAccuracy()>  -> _SOURCE_
<android.location.GpsStatus: int getMaxSatellites()>  -> _SOURCE_
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.google.android.apps.lightcycle.util.LocationProvider: android.location.Location getCurrentLocation()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)>  -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getSimBasedCountry()>  -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: int getStatus(android.os.Bundle)>  -> _SOURCE_
<android.location.GeocoderParams: java.lang.String getClientPackage()>  -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLocaleCountry()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)>  -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getCid()>  -> _SOURCE_
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<android.location.LocationRequest: long getExpireAt()>  -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>  -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>  -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastLocation()>  -> _SOURCE_
<com.android.server.location.GpsLocationProvider: java.lang.String getName()>  -> _SOURCE_
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>  -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)>  -> _SOURCE_
<com.android.server.location.GpsXtraDownloader: byte[] downloadXtraData()>  -> _SOURCE_
<android.location.Address: java.lang.String getPostalCode()>  -> _SOURCE_
<android.webkit.GeolocationPermissionsClassic: android.webkit.GeolocationPermissionsClassic getInstance()>  -> _SOURCE_
<android.location.GpsSatellite: float getAzimuth()>  -> _SOURCE_
<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()>  -> _SOURCE_
<android.location.Country: long getTimestamp()>  -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: com.android.internal.location.ProviderProperties getProperties()>  -> _SOURCE_
<com.android.server.location.GpsXtraDownloader: byte[] doDownload(java.lang.String,boolean,java.lang.String,int)>  -> _SOURCE_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>  -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>  -> _SOURCE_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>  -> _SOURCE_
<com.android.internal.location.GpsNetInitiatedHandler: java.lang.String getDialogTitle(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification,android.content.Context)>  -> _SOURCE_
<android.location.LocationRequest: long getFastestInterval()>  -> _SOURCE_
<android.location.Address: java.lang.String getSubLocality()>  -> _SOURCE_
<android.location.Address: java.lang.String getSubAdminArea()>  -> _SOURCE_
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>  -> _SOURCE_
<android.renderscript.AllocationAdapter: int getID(android.renderscript.RenderScript)>  -> _SOURCE_
<android.location.Address: double getLatitude()>  -> _SOURCE_
<android.location.Criteria: int getHorizontalAccuracy()>  -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<android.renderscript.Allocation: int getUsage()>  -> _SOURCE_
<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()>  -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLastKnownLocationBasedCountry()>  -> _SOURCE_
<android.telephony.SmsCbLocation: int getCid()>  -> _SOURCE_
<android.location.LocationRequest: int getNumUpdates()>  -> _SOURCE_
<com.android.server.location.GpsLocationProvider: long getStatusUpdateTime()>  -> _SOURCE_
<com.android.server.location.GpsLocationProvider: int getStatus(android.os.Bundle)>  -> _SOURCE_
<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)>  -> _SOURCE_
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.location.LocationRequest: float getSmallestDisplacement()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()>  -> _SOURCE_
<android.location.Address: java.lang.String getCountryCode()>  -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: int getNetworkType()>  -> _SOURCE_
<android.location.Location: float getAccuracy()>  -> _SOURCE_
<android.location.Location: double getLongitude()>  -> _SOURCE_
<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()>  -> _SOURCE_
<android.location.Criteria: int getAccuracy()>  -> _SOURCE_
<com.android.server.location.PassiveProvider: int getStatus(android.os.Bundle)>  -> _SOURCE_
<android.location.Criteria: int getBearingAccuracy()>  -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()>  -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)>  -> _SOURCE_
<com.android.server.location.LocationProviderProxy: long getStatusUpdateTime()>  -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<android.location.Address: java.lang.String getSubThoroughfare()>  -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Call$State getState()>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getNumOfVoicemails()>  -> _SOURCE_
<com.android.server.sip.SipService: android.os.Looper access$1800()>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: android.net.Uri$Builder buildUpon()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getRemoteStreamMaxVolume()>  -> _SOURCE_
<com.android.internal.telephony.IccRefreshResponse: java.lang.String toString()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getPointer()>  -> _SOURCE_
<com.android.exchange.EasSyncService: com.android.exchange.EasSyncService getServiceForMailbox(android.content.Context,com.android.emailcommon.provider.Mailbox)>  -> _SOURCE_
<com.android.internal.telephony.SmsUsageMonitor: int getPremiumSmsPermission(java.lang.String)>  -> _SOURCE_
<android.net.ConnectivityManager: boolean isNetworkSupported(int)>  -> _SOURCE_
<android.telephony.ServiceState: int getRilRadioTechnology()>  -> _SOURCE_
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getLocalAddress()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int)>  -> _SOURCE_
<com.android.server.BackupManagerService: java.lang.String getDestinationString(java.lang.String)>  -> _SOURCE_
<com.android.server.MountService$ObbState: android.os.IBinder getBinder()>  -> _SOURCE_
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)>  -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getDbm()>  -> _SOURCE_
<com.android.internal.telephony.SMSDispatcher: int getPremiumSmsPermission(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.OutputStream getOutputStream()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: int getSerialNumber()>  -> _SOURCE_
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInputInnerLocked()>  -> _SOURCE_
<android.app.ContextImpl$ServiceFetcher: java.lang.Object getService(android.app.ContextImpl)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>  -> _SOURCE_
<com.android.internal.telephony.AdnRecordCache: java.util.ArrayList getRecordsIfLoaded(int)>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>  -> _SOURCE_
<android.net.http.Headers: int getConnectionType()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getAttributeNames()>  -> _SOURCE_
<android.net.http.AndroidHttpClientConnection: int getRemotePort()>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsSummaryDev()>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getServerSessionContext()>  -> _SOURCE_
<android.media.AudioService: int getMasterVolume()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()>  -> _SOURCE_
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: int getPort()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getUserDataSeptetPadding()>  -> _SOURCE_
<com.android.internal.telephony.Connection: int getCnapNamePresentation()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Package[] getPackages()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()>  -> _SOURCE_
<android.net.LocalSocketAddress: android.net.LocalSocketAddress$Namespace getNamespace()>  -> _SOURCE_
<com.android.internal.telephony.ServiceStateTracker: boolean getDesiredPowerState()>  -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: java.security.Provider getProvider()>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnectionAc getDataConnectionAc()>  -> _SOURCE_
<com.android.email.mail.transport.MailTransport: java.lang.String getHost()>  -> _SOURCE_
<android.telephony.CellInfo: long getTimeStamp()>  -> _SOURCE_
<com.android.internal.telephony.DataConnection: java.lang.String getWhatToString(int)>  -> _SOURCE_
<com.android.server.MountService: java.lang.String getMountedObbPath(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: java.lang.String getNodeName()>  -> _SOURCE_
<android.net.wifi.WifiStateTracker: java.lang.String getTcpBufferSizesPropName()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmMmiCode: com.android.internal.telephony.MmiCode$State getState()>  -> _SOURCE_
<android.net.MobileDataStateTracker: android.net.LinkProperties getLinkProperties()>  -> _SOURCE_
<android.net.http.HttpConnection: java.lang.String getScheme()>  -> _SOURCE_
<android.net.LocalSocketImpl: java.lang.Object getOption(int)>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailFrom()>  -> _SOURCE_
<android.net.Proxy: java.lang.String getHost(android.content.Context)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getNativeLibraryPath()>  -> _SOURCE_
<android.telephony.SmsMessage: byte[] getPdu()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimEprlLoaded: java.lang.String getEfName()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.lang.String getAlgorithm()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getDurationMillis()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)>  -> _SOURCE_
<com.android.server.ThrottleService$DataRecorder: long getPeriodEnd()>  -> _SOURCE_
<android.net.nsd.NsdServiceInfo: int getPort()>  -> _SOURCE_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.UiccCardApplication getUiccCardApplication(int)>  -> _SOURCE_
<android.net.http.Request: java.lang.String getHostPort()>  -> _SOURCE_
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellCheckerSubtype()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int[] getUsersLocked()>  -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbEtwsInfo getEtwsWarningInfo()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailBody()>  -> _SOURCE_
<android.net.NetworkPolicyManager: int getUidPolicy(int)>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>  -> _SOURCE_
<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>  -> _SOURCE_
<android.media.AudioService: int getLastAudibleStreamVolume(int)>  -> _SOURCE_
<android.net.Uri$PathPart: android.net.Uri$PathSegments getPathSegments()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String getPeerHostName()>  -> _SOURCE_
<android.net.sip.ISipSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getCallForwardingIndicator()>  -> _SOURCE_
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>  -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIdsForHost(int)>  -> _SOURCE_
<com.android.internal.telephony.CallManager: java.util.List getPendingMmiCodes(com.android.internal.telephony.Phone)>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnAlphaTag()>  -> _SOURCE_
<android.net.Uri: java.lang.String access$600()>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>  -> _SOURCE_
<com.android.internal.telephony.ApnSetting: java.lang.String toString()>  -> _SOURCE_
<android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)>  -> _SOURCE_
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName getDefaultDreamComponent()>  -> _SOURCE_
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()>  -> _SOURCE_
<com.android.server.ThrottleService: int getCliffLevel(java.lang.String,int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()>  -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getDName()>  -> _SOURCE_
<android.net.http.Connection: android.net.http.SslCertificate getCertificate()>  -> _SOURCE_
<android.inputmethodservice.Keyboard: int[] getNearestKeys(int,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: int getWrappedPort()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getForegroundCall()>  -> _SOURCE_
<android.telephony.SignalStrength: int getGsmLevel()>  -> _SOURCE_
<com.android.server.ConnectivityService: int getNetworkPreference()>  -> _SOURCE_
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()>  -> _SOURCE_
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()>  -> _SOURCE_
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getResourcePath()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int[] getRunningUserIds()>  -> _SOURCE_
<com.android.internal.telephony.SmsResponse: java.lang.String toString()>  -> _SOURCE_
<android.net.nsd.DnsSdTxtRecord: byte[] getRawData()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>  -> _SOURCE_
<android.inputmethodservice.Keyboard$Key: int[] getCurrentDrawableState()>  -> _SOURCE_
<com.android.server.input.InputManagerService: android.view.InputDevice[] getInputDevices()>  -> _SOURCE_
<com.android.exchange.ExchangeService: int getStatusType(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.net.EthernetDataTracker: android.net.LinkProperties getLinkProperties()>  -> _SOURCE_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getCarrierName(java.lang.String)>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.DTDHandler getDTDHandler()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentDataConnectionState()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getLastChild()>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils$StubKeyManager: java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])>  -> _SOURCE_
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>  -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getLevel()>  -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()>  -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValueOf(java.lang.String)>  -> _SOURCE_
<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>  -> _SOURCE_
<com.android.internal.telephony.CallManager: java.util.List getBgCallConnections()>  -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionKey()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.util.List getRunningAppProcesses()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.util.List getAllPermissionGroups(int)>  -> _SOURCE_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.ClassLoader access$000()>  -> _SOURCE_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableUsbRegexs()>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getQuery()>  -> _SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getEriFileVersion()>  -> _SOURCE_
<android.net.NetworkIdentity: boolean getRoaming()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getRingingCall()>  -> _SOURCE_
<android.telephony.SignalStrength: int getLteAsuLevel()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>  -> _SOURCE_
<android.telephony.ServiceState: int getState()>  -> _SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: int getState()>  -> _SOURCE_
<android.telephony.SmsCbCmasInfo: java.lang.String toString()>  -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.security.cert.X509Certificate[] getPeerCertificateChain()>  -> _SOURCE_
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getWantClientAuth()>  -> _SOURCE_
<com.android.internal.telephony.IccFileHandler: java.lang.String getCommonIccEFPath(int)>  -> _SOURCE_
<android.media.AudioService: int getStreamVolume(int)>  -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getProfileName()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String,int)>  -> _SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription access$1300(android.net.sip.SipAudioCall)>  -> _SOURCE_
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: android.database.Cursor doInBackground(java.lang.Void[])>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>  -> _SOURCE_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int getApiLevel()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: android.os.IBinder getFocusedWindowToken()>  -> _SOURCE_
<android.service.wallpaper.IWallpaperService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.ComponentName getActivityClassForToken(android.os.IBinder)>  -> _SOURCE_
<android.inputmethodservice.Keyboard: int getHeight()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getUseClientMode()>  -> _SOURCE_
<android.net.rtp.RtpStream: int getSocket()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>  -> _SOURCE_
<android.net.NetworkTemplate: java.lang.String getSubscriberId()>  -> _SOURCE_
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()>  -> _SOURCE_
<android.net.Uri: java.lang.String access$300()>  -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategoryResult()>  -> _SOURCE_
<com.android.internal.telephony.RetryManager: int getRetryTimer()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconIndex()>  -> _SOURCE_
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()>  -> _SOURCE_
<android.net.EthernetDataTracker: int getDefaultGatewayAddr()>  -> _SOURCE_
<android.telephony.SignalStrength: int getGsmDbm()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.String getStringParam(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>  -> _SOURCE_
<android.net.http.RequestHandle: java.lang.String getMethod()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>  -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(int)>  -> _SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.Menu getMenu()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.util.List getAllCellInfo()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String,java.lang.String)>  -> _SOURCE_
<android.service.wallpaper.IWallpaperService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.server.LightsService: com.android.server.LightsService$Light getLight(int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getWantClientAuth()>  -> _SOURCE_
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getEnableSessionCreation()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getWantClientAuth()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.NodeList getChildNodes()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(java.security.interfaces.DSAPrivateKey)>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.ProxyProperties getGlobalProxy()>  -> _SOURCE_
<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()>  -> _SOURCE_
<com.android.email.service.AttachmentDownloadService: int getSize()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SpnOverride: java.lang.String getSpn(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlVersion()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: java.lang.String getFormat()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedAuthority()>  -> _SOURCE_
<android.inputmethodservice.KeyboardView: android.inputmethodservice.KeyboardView$OnKeyboardActionListener getOnKeyboardActionListener()>  -> _SOURCE_
<java.security.Provider$Service: java.lang.String getAlgorithm()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getLocalSocketAddress()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$4: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$3: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$1: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$2: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$8: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$7: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$6: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$5: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$9: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.lang.String getFormat()>  -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getDisplayName()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call$State getActiveFgCallState()>  -> _SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()>  -> _SOURCE_
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconMode()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getInetAddress()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: com.android.server.pm.UserManagerService getUserManagerLocked()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: boolean getCsimSpnDisplayCondition()>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getPath()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: com.android.internal.telephony.DctConstants$State getOverallState()>  -> _SOURCE_
<com.android.server.WifiService: android.net.wifi.WifiInfo getConnectionInfo()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] getDnsForwarders()>  -> _SOURCE_
<com.android.server.input.InputManagerService: android.view.InputDevice getInputDevice(int)>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: float getWindowCompatibilityScale(android.os.IBinder)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()>  -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedQuery()>  -> _SOURCE_
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()>  -> _SOURCE_
<android.net.WebAddress: java.lang.String getHost()>  -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getInputEncoding()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>  -> _SOURCE_
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>  -> _SOURCE_
<android.net.wifi.WifiManager: int getFrequencyBand()> android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getNeedClientAuth()>  -> _SOURCE_
<android.net.ConnectivityManager: int getNetworkPreference()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils$StubKeyManager: java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[])>  -> _SOURCE_
<com.android.server.ServiceWatcher: android.os.IBinder getBinder()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getContentDisposition()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()>  -> _SOURCE_
<com.android.server.ClipboardService: android.content.ClipData getPrimaryClip(java.lang.String)>  -> _SOURCE_
<android.service.wallpaper.WallpaperService: java.util.ArrayList access$300(android.service.wallpaper.WallpaperService)>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedFragment()>  -> _SOURCE_
<android.net.LinkCapabilities: java.lang.String get(int)>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getLevel()>  -> _SOURCE_
<com.android.email.service.AccountService$1: android.os.Bundle getConfigurationData(java.lang.String)>  -> _SOURCE_
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.content.Context)> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<com.android.internal.telephony.ApnContext: boolean getDependencyMet()>  -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>  -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getLocalPrincipal()>  -> _SOURCE_
<android.net.http.SslError: int getPrimaryError()>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>  -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>  -> _SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: int getLength()>  -> _SOURCE_
<android.net.TrafficStats: long getMobileRxPackets()>  -> _SOURCE_
<com.android.internal.telephony.WspTypeDecoder: long getValue32()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroupList: java.lang.String getOwnerAddr(int)>  -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneType()>  -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.net.http.RequestQueue$ActivePool: org.apache.http.HttpHost getProxyHost()>  -> _SOURCE_
<com.android.server.WallpaperManagerService: int getHeightHint()>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>  -> _SOURCE_
<android.net.EthernetDataTracker: android.net.EthernetDataTracker getInstance()>  -> _SOURCE_
<android.net.TrafficStats: int getThreadStatsTag()>  -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getUseClientMode()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: int enableApnType(java.lang.String)>  -> _SOURCE_
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)>  -> _SOURCE_
<android.net.ConnectivityManager: boolean getMobileDataEnabled()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getRemainingPostDialString()>  -> _SOURCE_
<com.android.internal.telephony.WspTypeDecoder: int getDecodedDataLength()>  -> _SOURCE_
<android.service.dreams.IDreamService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)>  -> _SOURCE_
<android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()>  -> _SOURCE_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableWifiRegexs()>  -> _SOURCE_
<com.android.internal.telephony.Connection: java.lang.String getCnapName()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.ArrayList)>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()>  -> _SOURCE_
<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig getLegacyVpnConfig()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call getCall()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMStringList getParameterNames()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call$State getState()>  -> _SOURCE_
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getNextWaitingApn()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getMasterStreamType()>  -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.ExpatReader: java.lang.Object getProperty(java.lang.String)>  -> _SOURCE_
<android.net.INetworkManagementEventObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMFileHandler: java.lang.String getEFPath(int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedProtocols()>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getOOBInline()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getProtocol()>  -> _SOURCE_
<android.net.LinkProperties: android.net.ProxyProperties getHttpProxy()>  -> _SOURCE_
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getProcessRecordLocked(java.lang.String,int)>  -> _SOURCE_
<android.net.http.RequestQueue: android.net.http.Request getRequest()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket createSocket()>  -> _SOURCE_
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult access$500(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataCallState)>  -> _SOURCE_
<com.android.internal.telephony.ims.IsimFileHandler: java.lang.String getEFPath(int)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: int getUidForSharedUser(java.lang.String)>  -> _SOURCE_
<javax.net.ssl.SSLParameters: java.lang.String[] getCipherSuites()>  -> _SOURCE_
<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)>  -> _SOURCE_
<android.net.http.ErrorStrings: java.lang.String getString(int,android.content.Context)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getReuseAddress()>  -> _SOURCE_
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getPackageName()>  -> _SOURCE_
<android.service.wallpaper.IWallpaperEngine$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.SmsRawData: byte[] getBytes()>  -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: int getWarningType()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>  -> _SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver)>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: byte[] getRawData()>  -> _SOURCE_
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataKSC5601(int)>  -> _SOURCE_
<android.telephony.TelephonyManager: int getLteOnCdmaModeStatic()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: int getPkeyContext()>  -> _SOURCE_
<android.net.LocalSocket: java.io.InputStream getInputStream()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getPrefix()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getStreamMaxVolume(int)>  -> _SOURCE_
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getRemoteAddress()>  -> _SOURCE_
<com.android.server.input.InputManagerService: int[] getInputDeviceIds()>  -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: javax.net.ssl.SSLSession getSession()>  -> _SOURCE_
<com.android.server.pm.UserManagerService: android.graphics.Bitmap getUserIcon(int)>  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>  -> _SOURCE_
<com.android.server.connectivity.Tethering$TetherInterfaceSM: int getLastError()>  -> _SOURCE_
<android.media.AudioService: int getValueForVibrateSetting(int,int,int)>  -> _SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: boolean getFeature(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>  -> _SOURCE_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)>  -> _SOURCE_
<android.security.IKeyChainService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.net.NetworkInfo: int getSubtype()>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: java.util.ArrayList getWaitingApns()>  -> _SOURCE_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfaces()>  -> _SOURCE_
<android.net.BaseNetworkStateTracker: android.net.LinkProperties getLinkProperties()>  -> _SOURCE_
<android.net.http.AndroidHttpClient$2: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodSettings: int getCurrentUserId()>  -> _SOURCE_
<android.net.sip.SipProfile: boolean getSendKeepAlive()>  -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()>  -> _SOURCE_
<com.android.server.BatteryService: int getBatteryLevel()>  -> _SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getPeerProfile()>  -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getOperation()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: int getServiceCategory()>  -> _SOURCE_
<com.android.server.display.DisplayManagerService: android.view.DisplayInfo getDisplayInfo(int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey()>  -> _SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: short getNodeType()>  -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForNetwork(android.net.NetworkTemplate,int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: int getCDMAIndex()>  -> _SOURCE_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: android.view.textservice.SuggestionsInfo getNotInDictEmptySuggestions()>  -> _SOURCE_
<org.apache.harmony.security.fortress.Services: java.security.Provider$Service getSecureRandomService()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()>  -> _SOURCE_
<android.app.ContextImpl$StaticServiceFetcher: java.lang.Object getService(android.app.ContextImpl)>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAddress()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.CommentImpl: java.lang.String getNodeName()>  -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>  -> _SOURCE_
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()>  -> _SOURCE_
<android.net.EthernetDataTracker: android.net.LinkCapabilities getLinkCapabilities()>  -> _SOURCE_
<com.android.server.TwilightService$TwilightState: long getTodaySunrise()>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getAddress()>  -> _SOURCE_
<android.net.wifi.WifiInfo: int getRssi()>  -> _SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimImpi()>  -> _SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] getIsimImpu()>  -> _SOURCE_
<android.content.IContentService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.app.IMediaContainerService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)>  -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getLastAccessedTime()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getPendingMmiCodes()>  -> _SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getHost()>  -> _SOURCE_
<com.android.server.usb.UsbService: android.hardware.usb.UsbAccessory getCurrentAccessory()>  -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,int)>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)>  -> _SOURCE_
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.util.List getPersistentApplications(int)>  -> _SOURCE_
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdnNumber()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getConnectTime()>  -> _SOURCE_
<android.net.http.Connection: byte[] getBuf()>  -> _SOURCE_
<com.android.internal.telephony.cat.CommandDetails: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  -> _SOURCE_
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getNeedClientAuth()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.util.List getRunningExternalApplications()>  -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPacketBufferSize()>  -> _SOURCE_
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getReceiveBufferSize()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getWantClientAuth()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedProtocols()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.lang.String getAlgorithm()>  -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getHoldDurationMillis()>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNamespaceURI()>  -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getSSID()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getReryConfig(boolean)>  -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<java.lang.VMClassLoader: java.net.URL getResource(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager: int getCdmaSubscriptionSource()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getVibrateSetting(int)>  -> _SOURCE_
<com.android.server.WifiService: android.os.Messenger getWifiStateMachineMessenger()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int getTaskForActivityLocked(android.os.IBinder,boolean)>  -> _SOURCE_
<com.google.android.apps.lightcycle.panorama.StitchingService: android.net.Uri access$700(com.google.android.apps.lightcycle.panorama.StitchingService,java.lang.String,android.net.Uri)>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>  -> _SOURCE_
<android.net.nsd.INsdManager$Stub$Proxy: android.os.Messenger getMessenger()> android.permission.INTERNET  -> _SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getTarget()>  -> _SOURCE_
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getNextSibling()>  -> _SOURCE_
<android.net.http.SslError: java.lang.String getUrl()>  -> _SOURCE_
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfacePairs()>  -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()>  -> _SOURCE_
<android.net.LinkProperties: java.util.Collection getAddresses()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getBackgroundCall()>  -> _SOURCE_
<com.android.server.AppWidgetService: int[] getAppWidgetIdsForHost(int)>  -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: int getPremiumSmsPermission(java.lang.String)>  -> _SOURCE_
<android.net.ProxyProperties: java.net.InetSocketAddress getSocketAddress()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.Object getValue(java.lang.String)>  -> _SOURCE_
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.io.File access$2200(com.android.server.pm.PackageManagerService,java.io.File)>  -> _SOURCE_
<android.net.wifi.WifiStateMachine: int getFrequencyBand()>  -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getCategory()>  -> _SOURCE_
<android.net.wifi.WifiInfo: boolean getMeteredHint()>  -> _SOURCE_
<com.android.server.connectivity.Vpn: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedAuthority()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()>  -> _SOURCE_
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>  -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getNeedClientAuth()>  -> _SOURCE_
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SOURCE_
<android.net.http.RequestQueue: org.apache.http.HttpHost getProxyHost()>  -> _SOURCE_
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.UiccCardApplication getApplication(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToServiceId()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getHoldDurationMillis()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getCacheControl()>  -> _SOURCE_
<android.net.wifi.WifiNative: java.lang.String getNetworkVariable(int,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.CallManager: java.util.List getBackgroundCalls()>  -> _SOURCE_
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardStatus$PinState PinStateFromRILInt(int)>  -> _SOURCE_
<javax.net.ssl.SSLEngine: int getPeerPort()>  -> _SOURCE_
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()>  -> _SOURCE_
<com.android.server.connectivity.Vpn: java.lang.String getTcpBufferSizesPropName()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>  -> _SOURCE_
<com.android.email.RefreshManager: long getLastMessageListRefreshTime(long)>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: int getRetryCount()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>  -> _SOURCE_
<android.net.INetworkPolicyManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getAsuLevel()>  -> _SOURCE_
<android.server.search.SearchManagerService: java.util.List getSearchablesInGlobalSearch()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String)>  -> _SOURCE_
<android.net.DummyDataStateTracker: android.net.NetworkInfo getNetworkInfo()>  -> _SOURCE_
<com.android.internal.util.AsyncService: android.os.Handler getHandler()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: java.util.List getAllCellInfo()>  -> _SOURCE_
<com.android.server.WallpaperManagerService: int getWidthHint()>  -> _SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getPeriodStartTime(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: java.lang.String getFormat()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getByte()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: short getNodeType()>  -> _SOURCE_
<android.net.NetworkTemplate: int getMatchRule()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM7Bit(int,int,int)>  -> _SOURCE_
<android.media.AudioService$RcClientDeathHandler: android.os.IBinder getBinder()>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getSchemeSpecificPart()>  -> _SOURCE_
<android.net.SntpClient: long getNtpTimeReference()>  -> _SOURCE_
<android.telephony.SignalStrength: int getAsuLevel()>  -> _SOURCE_
<android.telephony.CellIdentityCdma: int getLatitude()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoLinger()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: short getSeverity()>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeName()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getTextContent()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList(boolean,boolean,boolean)>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipProfile[] getListOfProfiles()>  -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbCmasInfo getCmasWarningInfo()>  -> _SOURCE_
<com.android.internal.telephony.IWapPushManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl$1: java.lang.String getUri()>  -> _SOURCE_
<com.android.server.AppWidgetServiceImpl: java.io.File getSettingsFile(int)>  -> _SOURCE_
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>  -> _SOURCE_
<android.net.Uri$PathSegmentsBuilder: android.net.Uri$PathSegments build()>  -> _SOURCE_
<com.android.server.ThrottleService: long getPeriodStartTime(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbEtwsInfo getEtwsInfo()>  -> _SOURCE_
<android.inputmethodservice.Keyboard: int[] getShiftKeyIndices()>  -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getPassword()>  -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccFileHandler getIccFileHandler()>  -> _SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri,android.database.Cursor)>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getMasterVolume()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNetworkType()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnection: int getProfileId()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getNodeName()>  -> _SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation getDOMImplementation()>  -> _SOURCE_
<android.telephony.CellInfo$1: android.telephony.CellInfo createFromParcel(android.os.Parcel)>  -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoDbm()>  -> _SOURCE_
<com.android.server.RecognitionManagerService: android.content.ComponentName findAvailRecognizer(java.lang.String,int)>  -> _SOURCE_
<com.android.server.accessibility.AccessibilityManagerService$Service: float findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>  -> _SOURCE_
<com.android.internal.telephony.ServiceStateTracker: java.util.List getAllCellInfo()>  -> _SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimDomain()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdn()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getProtocol()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.KeyManager[] getKeyManagers()>  -> _SOURCE_
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(int,android.net.NetworkStatsHistory$Entry)>  -> _SOURCE_
<android.telephony.SignalStrength: int getLteDbm()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>  -> _SOURCE_
<android.telephony.CellIdentityCdma: int getBasestationId()>  -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()>  -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)>  -> _SOURCE_
<android.service.wallpaper.IWallpaperConnection$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.Connection: com.android.internal.telephony.Call$State getState()>  -> _SOURCE_
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>  -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMin()>  -> _SOURCE_
<android.telephony.SignalStrength: int getLteCqi()>  -> _SOURCE_
<com.android.server.NsdService$NsdStateMachine: java.lang.String getWhatToString(int)>  -> _SOURCE_
<com.android.internal.telephony.DataCallState: java.lang.String toString()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionKey()>  -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>  -> _SOURCE_
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>  -> _SOURCE_
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()>  -> _SOURCE_
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.telephony.SmsMessage: int getProtocolIdentifier()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLEngine: java.security.PrivateKey getPrivateKeyById(java.lang.String)>  -> _SOURCE_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: int getCapitalizationType(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getNid()>  -> _SOURCE_
<android.telephony.SmsMessage: int getIndexOnIcc()>  -> _SOURCE_
<com.android.internal.telephony.DataConnection: boolean isRetryNeeded()>  -> _SOURCE_
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>  -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.net.InetAddress getHost()>  -> _SOURCE_
<android.net.wifi.WifiManager: int getWifiState()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>  -> _SOURCE_
<android.net.wifi.WifiConfigStore: android.net.DhcpInfoInternal getIpConfiguration(int)>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: android.view.DisplayInfo getDefaultDisplayInfoLocked()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String,java.lang.String)>  -> _SOURCE_
<android.net.MobileDataStateTracker: android.net.NetworkInfo getNetworkInfo()>  -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>  -> _SOURCE_
<com.android.server.RecognitionManagerService: android.content.ComponentName getCurRecognizer(int)>  -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)>  -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: int getUidPolicy(int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: int getNumberPresentation()>  -> _SOURCE_
<android.net.wifi.WifiManager: int getWifiApState()>  -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()>  -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()>  -> _SOURCE_
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>  -> _SOURCE_
<com.android.internal.telephony.CallTracker: android.os.Message obtainNoPollCompleteMessage(int)>  -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()>  -> _SOURCE_
<com.android.internal.telephony.WspTypeDecoder: java.lang.String getValueString()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getEnableSessionCreation()>  -> _SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getQName(int)>  -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getStatus()>  -> _SOURCE_
<com.android.email.service.EmailServiceUtils$NullEmailService: int getApiLevel()>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()> android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream: byte[] access$300(org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream)>  -> _SOURCE_
<android.net.Uri$Part: java.lang.String getEncoded()>  -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getProxyAddress()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromServiceId()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.DctConstants$Activity getActivity()>  -> _SOURCE_
<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()>  -> _SOURCE_
<com.android.internal.telephony.IccProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int getRequestedOrientation(android.os.IBinder)>  -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: byte[] getPrimaryNotificationSignature()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: java.lang.String getLanguage()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)>  -> _SOURCE_
<com.android.emailcommon.service.AccountServiceProxy: android.os.Bundle getConfigurationData(java.lang.String)>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getRingerMode()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSendBufferSize()>  -> _SOURCE_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.IccRecords getIccRecords(int)>  -> _SOURCE_
<android.net.ThrottleManager: long getResetTime(java.lang.String)>  -> _SOURCE_
<android.net.LinkProperties: java.util.Collection getRoutes()>  -> _SOURCE_
<com.android.phone.EmergencyCallbackModeService: boolean getEmergencyCallbackModeCallState()>  -> _SOURCE_
<android.net.ProxyProperties: java.lang.String getExclusionList()>  -> _SOURCE_
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToRGB(byte[],int,boolean)>  -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isUidForeground(int)>  -> _SOURCE_
<android.net.http.HttpsConnection$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>  -> _SOURCE_
<android.net.WebAddress: java.lang.String getPath()>  -> _SOURCE_
<android.net.wifi.WifiManager: android.os.Messenger getWifiServiceMessenger()>  -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkType()>  -> _SOURCE_
<android.media.AudioService$VolumeStreamState: int getStreamType()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>  -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.lang.String getAsecPackageName(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.RetryManager: java.lang.String toString()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  -> _SOURCE_
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest()>  -> _SOURCE_
<android.net.MobileDataStateTracker: java.lang.String getTcpBufferSizesPropName()>  -> _SOURCE_
<android.net.sip.SipSession: android.net.sip.ISipSession getRealSession()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()>  -> _SOURCE_
<com.android.server.WifiService: android.net.DhcpInfo getDhcpInfo()>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.util.List getPathSegments()>  -> _SOURCE_
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(java.lang.String)>  -> _SOURCE_
<com.android.server.am.ProcessList: long getMemLevel(int)>  -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)>  -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategory()>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getPrefix()>  -> _SOURCE_
<android.telephony.SignalStrength: int getGsmAsuLevel()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.util.List getPathSegments()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroupList: java.util.Collection getGroupList()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getRingingPhone()>  -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>  -> _SOURCE_
<android.net.LinkAddress: int getNetworkPrefixLength()>  -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>  -> _SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getLastChild()>  -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.res.Configuration getConfiguration()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.ServiceState getServiceState()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedProtocols()>  -> _SOURCE_
<android.telephony.SmsCbMessage: java.lang.String getLanguageCode()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getMinRecordSize()>  -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getProtocol()>  -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int)>  -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getDbm()>  -> _SOURCE_
<android.net.LocalSocketAddress: java.lang.String getName()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandom()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.math.BigInteger getModulus()>  -> _SOURCE_
<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getUseClientMode()>  -> _SOURCE_
<com.android.internal.telephony.DataConnection$CallSetupException: int getRetryOverride()>  -> _SOURCE_
<android.net.ProxyProperties: int getPort()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.io.FileDescriptor getFileDescriptor$()>  -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getCertainty()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()>  -> _SOURCE_
<com.android.internal.telephony.cat.BerTlv: int getTag()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo)>  -> _SOURCE_
<android.telephony.SmsMessage: int getIndexOnSim()>  -> _SOURCE_
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String encodeBody()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getPreviousSibling()>  -> _SOURCE_
<com.android.server.pm.UserManagerService: int[] getUserIdsLPr()>  -> _SOURCE_
<android.telephony.CellIdentityLte: android.telephony.CellIdentityLte copy()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getOOBInline()>  -> _SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])>  -> _SOURCE_
<android.net.LocalSocketImpl: java.io.FileDescriptor[] getAncillaryFileDescriptors()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()>  -> _SOURCE_
<android.telephony.SignalStrength: int getLteLevel()>  -> _SOURCE_
<com.android.server.WifiService: int getWifiEnabledState()>  -> _SOURCE_
<com.android.internal.telephony.Connection: java.lang.Object getUserData()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getId()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMImplementationImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.server.ThrottleService: java.lang.String getHelpUri()>  -> _SOURCE_
<com.android.internal.telephony.DriverCall: java.lang.String toString()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.List)>  -> _SOURCE_
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByName(android.content.ComponentName,int)>  -> _SOURCE_
<android.support.v4.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)>  -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.ArrayList)>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getScheme()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPeerPort()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getSid()>  -> _SOURCE_
<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)>  -> _SOURCE_
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()>  -> _SOURCE_
<android.net.sip.ISipSessionListener$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map getTxtRecord()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService$4: float getInterpolation(float)>  -> _SOURCE_
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccRecords getIccRecords()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getIMSI()>  -> _SOURCE_
<android.net.rtp.AudioGroup: int getMode()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: java.lang.String getText()>  -> _SOURCE_
<android.telephony.ServiceState: int getSystemId()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getSoWriteTimeout()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.FileDescriptor getFileDescriptor$()>  -> _SOURCE_
<com.android.server.DropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>  -> _SOURCE_
<com.android.server.TwilightService: com.android.server.TwilightService$TwilightState getCurrentState()>  -> _SOURCE_
<android.net.ThrottleManager: int getCliffLevel(java.lang.String,int)>  -> _SOURCE_
<android.telephony.CellIdentityLte: int getCi()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$HandlerParams: android.os.UserHandle getUser()>  -> _SOURCE_
<com.google.android.gsf.Gservices: java.lang.String getString(android.content.ContentResolver,java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPeerPort()>  -> _SOURCE_
<com.android.providers.telephony.SmsProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()>  -> _SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document newDocument()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getDocumentURI()>  -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>  -> _SOURCE_
<com.android.email.mail.store.ServiceStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)>  -> _SOURCE_
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>  -> _SOURCE_
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(java.lang.Object,int)>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>  -> _SOURCE_
<com.android.internal.telephony.SmsHeader: java.lang.String toString()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getCreationTime()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMute()>  -> _SOURCE_
<com.google.android.apps.lightcycle.panorama.StitchingServiceManager: com.google.android.apps.lightcycle.panorama.StitchingServiceManager$StitchSession popNextSession()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLineCtrlZ()>  -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getNetworkType()>  -> _SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getNodeValue()>  -> _SOURCE_
<android.media.AudioService: int getRemoteStreamVolume()>  -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String)>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedSchemeSpecificPart()>  -> _SOURCE_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: int getAccountColor(long)>  -> _SOURCE_
<javax.net.ssl.SSLContext: java.lang.String getProtocol()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.SSLParametersImpl getDefault()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.CallTracker getCallTracker()>  -> _SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getUserInfo()>  -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getLanguage()>  -> _SOURCE_
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCacheListener getListener()>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getInstanceName()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.EntityResolver getEntityResolver()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeValue()>  -> _SOURCE_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl$1: org.w3c.dom.Node getRelatedNode()>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.Element getOwnerElement()>  -> _SOURCE_
<com.android.server.InputMethodManagerService: java.util.List getInputMethodList()>  -> _SOURCE_
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getService(android.content.Context,java.lang.String,com.android.emailcommon.service.IEmailServiceCallback)>  -> _SOURCE_
<android.net.WebAddress: java.lang.String getAuthInfo()>  -> _SOURCE_
<android.telephony.SignalStrength: int getGsmBitErrorRate()>  -> _SOURCE_
<android.media.IMediaScannerService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.net.NetworkStats: long getElapsedRealtimeAge()>  -> _SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>  -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaDbm()>  -> _SOURCE_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()>  -> _SOURCE_
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>  -> _SOURCE_
<com.android.internal.telephony.IccUtils: byte[] hexStringToBytes(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getOtasp()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimCdmaHomeLoaded: java.lang.String getEfName()>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedAuthority()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getBackgroundCall()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForToken(android.os.IBinder)>  -> _SOURCE_
<com.android.server.accessibility.AccessibilityManagerService: boolean getActiveWindowBounds(android.graphics.Rect)>  -> _SOURCE_
<android.net.wifi.WifiConfiguration: int getAuthType()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Document getOwnerDocument()>  -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)>  -> _SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.View getCustomView()>  -> _SOURCE_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: android.view.textservice.SuggestionsInfo getInDictEmptySuggestions()>  -> _SOURCE_
<com.android.internal.telephony.SMSDispatcher: int getNextConcatenatedRef()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$SpeechItem: int getStreamType()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey()>  -> _SOURCE_
<android.telephony.SmsCbMessage: int getSerialNumber()>  -> _SOURCE_
<android.net.sip.SipProfile: boolean getAutoRegistration()>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()> android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<org.apache.harmony.xml.dom.CommentImpl: short getNodeType()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint64()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getLocalName()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint32()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.net.http.Headers: long getTransferEncoding()>  -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSession getSession()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.UUSInfo getUUSInfo()>  -> _SOURCE_
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByName(android.content.ComponentName)>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getLteOnCdmaMode()>  -> _SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>  -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)>  -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>  -> _SOURCE_
<android.media.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()>  -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataState()>  -> _SOURCE_
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getWholeText()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: short getNodeType()>  -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()>  -> _SOURCE_
<android.net.Uri: java.util.Set getQueryParameterNames()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getName()>  -> _SOURCE_
<com.android.internal.telephony.cat.CommandParams: com.android.internal.telephony.cat.AppInterface$CommandType getCommandType()>  -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()>  -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int)>  -> _SOURCE_
<com.android.server.net.NetworkStatsService: java.lang.String[] getMobileIfaces()>  -> _SOURCE_
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.internal.telephony.ServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)>  -> _SOURCE_
<android.net.http.Connection: org.apache.http.protocol.HttpContext getHttpContext()>  -> _SOURCE_
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>  -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForNetwork(android.net.NetworkTemplate,long,long)>  -> _SOURCE_
<android.net.ProxyProperties: java.lang.String getHost()>  -> _SOURCE_
<android.telephony.CellIdentityCdma: int getLongitude()>  -> _SOURCE_
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getPendingMmiCodes()>  -> _SOURCE_
<android.net.http.AndroidHttpClientConnection: int getSocketTimeout()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: int getNumberPresentation()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getLocalPort()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: short getNodeType()>  -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaEcio()>  -> _SOURCE_
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>  -> _SOURCE_
<com.android.server.InputMethodManagerService$ImeSubtypeListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getLength()>  -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()>  -> _SOURCE_
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getCount()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeName()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodFileManager: java.util.HashMap getAllAdditionalInputMethodSubtypes()>  -> _SOURCE_
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()>  -> _SOURCE_
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)>  -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()>  -> _SOURCE_
<android.media.AudioService: int getMasterMaxVolume()>  -> _SOURCE_
<android.telephony.SmsCbMessage: int getMessagePriority()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getCdmaMin()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getTcpNoDelay()>  -> _SOURCE_
<android.net.Uri$AbstractHierarchicalUri: int getPort()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getFgPhone()>  -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneType(int)>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: int getTransactionId()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: android.media.IRingtonePlayer getRingtonePlayer()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmCall: java.util.List getConnections()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeP()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>  -> _SOURCE_
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo,boolean)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getPeerHost()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.telephony.CellIdentityCdma: android.telephony.CellIdentityCdma copy()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getTrafficClass()>  -> _SOURCE_
<android.net.NetworkIdentity: int getSubType()>  -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getMaxMessages()>  -> _SOURCE_
<com.android.email.RefreshManager$Status: long getLastRefreshTime()>  -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()>  -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[])>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>  -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivity()>  -> _SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.lang.Class loadClass(java.lang.String)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.util.List getPreferredPackages(int)>  -> _SOURCE_
<javax.net.ssl.SSLContext: java.security.Provider getProvider()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: java.lang.String toString()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getQuery()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaCall: java.util.List getConnections()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimImsimLoaded: java.lang.String getEfName()>  -> _SOURCE_
<com.android.internal.telephony.DataConnection: int getRilRadioTechnology(int)>  -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>  -> _SOURCE_
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>  -> _SOURCE_
<android.net.INetworkStatsSession$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoSnr()>  -> _SOURCE_
<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getDriverCalls()>  -> _SOURCE_
<com.android.server.MountService$ObbAction: android.content.res.ObbInfo getObbInfo()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getNeedClientAuth()>  -> _SOURCE_
<com.android.server.am.ActiveServices: java.util.List getRunningServiceInfoLocked(int,int)>  -> _SOURCE_
<android.net.http.IdleCache: android.net.http.Connection getConnection(org.apache.http.HttpHost)>  -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getResponseType()>  -> _SOURCE_
<android.webkit.SslCertLookupTable: android.webkit.SslCertLookupTable getInstance()>  -> _SOURCE_
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getEnableSessionCreation()>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: java.lang.String getSupplicantQuery()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,org.apache.harmony.xnet.provider.jsse.DataStream)>  -> _SOURCE_
<java.lang.VMClassLoader: java.util.List getResources(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.DataConnection: boolean isRetryForever()>  -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getSipDomain()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.util.Collection getClientList()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.pm.ApplicationInfo getAppInfoForUser(android.content.pm.ApplicationInfo,int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlEncoding()>  -> _SOURCE_
<com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getEtag()>  -> _SOURCE_
<android.media.AudioService$VolumeStreamState: int getMaxIndex()>  -> _SOURCE_
<android.telephony.SmsCbMessage: java.lang.String getMessageBody()>  -> _SOURCE_
<com.android.internal.telephony.cat.ComprehensionTlv: int getTag()>  -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> android.permission.USE_SIP  -> _SOURCE_
<android.net.INetworkManagementEventObserver$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.IccCardProxy: boolean getIccRecordsLoaded()>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsDetail()>  -> _SOURCE_
<android.net.Uri: java.lang.String toSafeString()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: int getInstallLocation()>  -> _SOURCE_
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,android.content.Context,com.android.internal.telephony.UiccCard)>  -> _SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getSubtitle()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>  -> _SOURCE_
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getRetrievalAllowingWindowLocked()>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getStatus()>  -> _SOURCE_
<android.inputmethodservice.Keyboard: java.util.List getKeys()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getTextContent()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$DumpState: com.android.server.pm.SharedUserSetting getSharedUser()>  -> _SOURCE_
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMessageListStatusForTest(long)>  -> _SOURCE_
<android.accessibilityservice.UiTestAutomationBridge: android.view.accessibility.AccessibilityEvent getLastAccessibilityEvent()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getLastAudibleMasterVolume()>  -> _SOURCE_
<android.net.http.RequestQueue$ActivePool: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost)>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()>  -> _SOURCE_
<android.app.LoadedApk$ServiceDispatcher: java.lang.RuntimeException getUnbindLocation()>  -> _SOURCE_
<android.inputmethodservice.Keyboard: int getKeyHeight()>  -> _SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconIndex(int,int)>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getOperatorNumeric()>  -> _SOURCE_
<com.android.server.BackupManagerService$PerformFullRestoreTask: com.android.server.BackupManagerService$RestorePolicy readAppManifest(com.android.server.BackupManagerService$FileMetadata,java.io.InputStream)>  -> _SOURCE_
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getInternalSubset()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getDurationMillis()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: int getAppOrientation(android.view.IApplicationToken)>  -> _SOURCE_
<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()>  -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getUserName()>  -> _SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getPreviousSibling()>  -> _SOURCE_
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getValue()>  -> _SOURCE_
<android.net.LocalSocketImpl: java.io.OutputStream getOutputStream()>  -> _SOURCE_
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()>  -> _SOURCE_
<com.android.internal.telephony.ATResponseParser: java.lang.String nextString()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceMessageCount()>  -> _SOURCE_
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)>  -> _SOURCE_
<android.net.wifi.WifiSsid: java.lang.String getHexString()>  -> _SOURCE_
<android.net.MobileDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()>  -> _SOURCE_
<android.net.sip.SipProfile: javax.sip.address.Address getSipAddress()>  -> _SOURCE_
<android.service.dreams.IDreamManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.telephony.SignalStrength: int getDbm()>  -> _SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String getAlphaTag()>  -> _SOURCE_
<com.android.server.TextServicesManagerService$TextServicesSettings: int getCurrentUserId()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getInetAddress()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<android.net.WebAddress: int getPort()>  -> _SOURCE_
<android.net.WebAddress: java.lang.String getScheme()>  -> _SOURCE_
<com.android.email.widget.WidgetManager: com.android.email.widget.WidgetManager getInstance()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()>  -> _SOURCE_
<com.android.server.BackupManagerService: java.lang.String getCurrentTransport()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneType()>  -> _SOURCE_
<android.media.AudioService$ScoClient: int getCount()>  -> _SOURCE_
<android.net.rtp.RtpStream: int getMode()>  -> _SOURCE_
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,long,android.net.NetworkStatsHistory$Entry)>  -> _SOURCE_
<com.android.server.MountService: int getEncryptionState()>  -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>  -> _SOURCE_
<android.net.sip.ISipSession$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getTextContent(java.lang.StringBuilder)>  -> _SOURCE_
<android.net.NetworkQuotaInfo: long getEstimatedBytes()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getWantClientAuth()>  -> _SOURCE_
<com.android.internal.telephony.cat.IconLoader: com.android.internal.telephony.cat.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getDnsType()>  -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.ArrayList buildValidRawData(java.util.ArrayList)>  -> _SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getData()>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getLocalName()>  -> _SOURCE_
<android.telephony.ServiceState: int getRadioTechnology()>  -> _SOURCE_
<android.net.wifi.WifiStateTracker: android.net.NetworkInfo getNetworkInfo()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>  -> _SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getPointer()>  -> _SOURCE_
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLine()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getSelectedInputMethod()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeName()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$100(com.android.internal.telephony.cdma.RuimRecords)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()>  -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailFrom()>  -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardStatus$PinState getPin1State()>  -> _SOURCE_
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$PersoSubState PersoSubstateFromRILInt(int)>  -> _SOURCE_
<com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>  -> _SOURCE_
<com.android.server.TwilightService$TwilightState: long getTomorrowSunrise()>  -> _SOURCE_
<com.android.internal.telephony.cat.ComprehensionTlv: int getValueIndex()>  -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>  -> _SOURCE_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailTag(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: com.android.internal.telephony.Phone getPhone()>  -> _SOURCE_
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest(org.apache.http.HttpHost)>  -> _SOURCE_
<android.net.TrafficStats: long getTxPackets(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)>  -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()>  -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.net.TrafficStats: long getTotalRxBytes()>  -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()>  -> _SOURCE_
<android.webkit.SslClientCertLookupTable: android.webkit.SslClientCertLookupTable getInstance()>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsSummaryXt()>  -> _SOURCE_
<com.android.internal.telephony.Connection: java.lang.String toString()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getPeerPrincipal()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>  -> _SOURCE_
<android.net.wifi.WifiManager: java.util.List getScanResults()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getAddress()>  -> _SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>  -> _SOURCE_
<android.net.wifi.WifiInfo: int getLinkSpeed()>  -> _SOURCE_
<android.net.TrafficStats: long getRxPackets(java.lang.String)>  -> _SOURCE_
<com.android.server.ConnectivityService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.cdma.CdmaConnection getConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.EntityReferenceImpl: java.lang.String getNodeName()>  -> _SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getCliffThreshold(java.lang.String,int)>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pWfdInfo: int getDeviceType()>  -> _SOURCE_
<com.android.internal.widget.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getHoldDurationMillis()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int getCurrentUserIdLocked()>  -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getLocalCertificates()>  -> _SOURCE_
<com.android.internal.telephony.AdnRecord: byte[] buildAdnString(int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.lang.String getFormat()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmSmsCbMessage: android.telephony.SmsCbMessage createSmsCbMessage(android.telephony.SmsCbLocation,byte[][])>  -> _SOURCE_
<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.SipProfile getLocalProfile()>  -> _SOURCE_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: int getApnProfileID(java.lang.String)>  -> _SOURCE_
<android.telephony.SignalStrength: int getLevel()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String[] getValueNames()>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getScheme()>  -> _SOURCE_
<android.net.wifi.WifiStateMachine: java.lang.String getConfigFile()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getPseudoSubject()>  -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()>  -> _SOURCE_
<android.net.NetworkIdentity: int getType()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.math.BigInteger getPrivateExponent()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getNeedClientAuth()>  -> _SOURCE_
<com.android.server.MountService: java.lang.String getSecureContainerPath(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getNextSibling()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getDurationMillis()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: int getIndexOnIcc()>  -> _SOURCE_
<org.apache.http.cookie.CookieOrigin: java.lang.String getHost()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.lang.String getCallingPackage(android.os.IBinder)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>  -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getX()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getY()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getP()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getQ()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getG()>  -> _SOURCE_
<android.net.InterfaceConfiguration: java.lang.String getHardwareAddress()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getFirstActiveBgCall()>  -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: java.lang.String toString()>  -> _SOURCE_
<com.android.internal.telephony.CallForwardInfo: java.lang.String toString()>  -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()>  -> _SOURCE_
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreInstallObserver: int getResult()>  -> _SOURCE_
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getLatestConnection()>  -> _SOURCE_
<android.telephony.CellInfoGsm$1: android.telephony.CellInfoGsm createFromParcel(android.os.Parcel)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipCallBase: java.util.List getConnections()>  -> _SOURCE_
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getColumnNumber()>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getSchemeSpecificPart()>  -> _SOURCE_
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>  -> _SOURCE_
<com.android.server.WifiService$Multicaster: int getUid()>  -> _SOURCE_
<android.security.IKeyChainService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>  -> _SOURCE_
<android.telephony.ServiceState: int getCdmaDefaultRoamingIndicator()>  -> _SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconMode()>  -> _SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription access$400(android.net.sip.SipAudioCall,java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getRecordSize(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()>  -> _SOURCE_
<com.android.internal.telephony.Call: long getEarliestConnectTime()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getPragma()>  -> _SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: int getDisplayRule(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: int getWaitingApnsPermFailCount()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.lang.String getTempContainerId()>  -> _SOURCE_
<android.net.NetworkInfo: int getType()>  -> _SOURCE_
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.String getTag()>  -> _SOURCE_
<android.inputmethodservice.InputMethodService: java.lang.CharSequence getTextForImeAction(int)>  -> _SOURCE_
<android.app.LoadedApk$ServiceDispatcher: android.content.ServiceConnection getServiceConnection()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>  -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: int getPremiumSmsPermission(java.lang.String)>  -> _SOURCE_
<android.net.IThrottleManager$Stub$Proxy: int getCliffLevel(java.lang.String,int)> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<android.net.nsd.INsdManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getWantClientAuth()>  -> _SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>  -> _SOURCE_
<com.android.email.activity.RecentMailboxManager: java.util.ArrayList getMostRecent(long,boolean)>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()>  -> _SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String toString()>  -> _SOURCE_
<android.net.TrafficStats: long getTotalRxPackets()>  -> _SOURCE_
<com.android.internal.telephony.BaseCommands: int getLteOnCdmaMode()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getDataCodingScheme()>  -> _SOURCE_
<android.media.AudioService: int getRingerMode()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getDisabledSystemInputMethods()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: int getPendingAppTransition()>  -> _SOURCE_
<android.app.IServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$000(com.android.internal.telephony.cdma.RuimRecords)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)>  -> _SOURCE_
<android.telephony.SignalStrength: java.lang.String toString()>  -> _SOURCE_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> android.permission.READ_SMS android.permission.RECEIVE_SMS  -> _SOURCE_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsDetail()>  -> _SOURCE_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()>  -> _SOURCE_
<android.media.AudioService$VolumeStreamState: java.util.concurrent.ConcurrentHashMap getAllIndexes(boolean)>  -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getLevel()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence getMessage()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getAcceptRanges()>  -> _SOURCE_
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIdsForHost(int)>  -> _SOURCE_
<com.android.internal.telephony.CsimFileHandler: java.lang.String getEFPath(int)>  -> _SOURCE_
<android.net.wifi.WifiInfo: int getIpAddress()>  -> _SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getByteCount(java.lang.String,int,int,int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getUserData(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getMessageType()>  -> _SOURCE_
<android.media.AudioService: int getRemoteStreamMaxVolume()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromCodeScheme()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)>  -> _SOURCE_
<android.view.textservice.SuggestionsInfo: int getCookie()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getHost()>  -> _SOURCE_
<android.app.Service: java.lang.String getClassName()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfacePairs()>  -> _SOURCE_
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>  -> _SOURCE_
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.net.LocalSocket: int getSendBufferSize()>  -> _SOURCE_
<com.android.exchange.ExchangeService: int getStatusChangeCount(java.lang.String)>  -> _SOURCE_
<android.view.textservice.TextInfo: int getCookie()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodAndSubtypeHashCodeListLocked()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeName()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionMethod()>  -> _SOURCE_
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,android.net.NetworkStatsHistory$Entry)>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItem(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getLength()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: java.lang.String getRemainingPostDialString()>  -> _SOURCE_
<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)>  -> _SOURCE_
<java.security.Provider$Service: java.util.List getAliases()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: long[] getProcessPss(int[])>  -> _SOURCE_
<android.inputmethodservice.AbstractInputMethodService: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>  -> _SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getParentNode()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: int getPhoneType()>  -> _SOURCE_
<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()>  -> _SOURCE_
<java.lang.BootClassLoader: java.net.URL getResource(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int)>  -> _SOURCE_
<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>  -> _SOURCE_
<javax.net.ssl.SSLEngine: java.lang.String getPeerHost()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: int getVoiceMessageCount()>  -> _SOURCE_
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$AppState AppStateFromRILInt(int)>  -> _SOURCE_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableIfaces()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getPrlVersion()>  -> _SOURCE_
<android.net.rtp.RtpStream: int getRemotePort()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.io.File getDataPathForUser(int)>  -> _SOURCE_
<com.android.server.NotificationManagerService: long[] getLongArray(android.content.res.Resources,int,int,long[])>  -> _SOURCE_
<android.net.NetworkQuotaInfo: long getSoftLimitBytes()>  -> _SOURCE_
<com.android.email.service.AccountService$1: java.lang.String getDeviceId()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getImsi()>  -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceClient$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getCipherSuite()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.PhoneConstants$State getState()>  -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccRecords getIccRecords()>  -> _SOURCE_
<com.android.internal.telephony.RestrictedState: java.lang.String toString()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getMessage()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)>  -> _SOURCE_
<android.net.NetworkStats: long getElapsedRealtime()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getServiceType()>  -> _SOURCE_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.ServiceState getServiceState()>  -> _SOURCE_
<android.net.DhcpInfoInternal: java.util.Collection getRoutes()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>  -> _SOURCE_
<com.android.email.service.MailService: java.util.ArrayList getPopImapAccountList(android.content.Context)>  -> _SOURCE_
<android.media.AudioService: int getLastAudibleMasterVolume()>  -> _SOURCE_
<com.android.email.EmailConnectivityManager: int getActiveNetworkType()>  -> _SOURCE_
<android.net.http.Connection: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: java.util.List getUniqueServiceNames()>  -> _SOURCE_
<android.net.wifi.WifiSsid: byte[] getOctets()>  -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: com.android.internal.widget.IRemoteViewsFactory getRemoteViewsFactory()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getRingingCall()>  -> _SOURCE_
<android.net.http.AndroidHttpClient: long getMinGzipSize(android.content.ContentResolver)>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedSchemeSpecificPart()>  -> _SOURCE_
<android.net.Uri$PathPart: java.lang.String getEncoded()>  -> _SOURCE_
<com.android.email.mail.store.ImapStore: java.util.Collection getConnectionPoolForTest()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder)>  -> _SOURCE_
<android.net.wifi.WifiNative: int getGroupCapability(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToRGB(byte[],int,boolean,byte[])>  -> _SOURCE_
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByIntent(android.content.Intent$FilterComparison,int)>  -> _SOURCE_
<android.net.sip.SipAudioCall: int getState()>  -> _SOURCE_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: android.os.Bundle getConfigurationData(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey()>  -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMap(org.apache.harmony.xml.dom.NodeImpl)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.List)>  -> _SOURCE_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener()>  -> _SOURCE_
<android.net.BaseNetworkStateTracker: android.net.LinkCapabilities getLinkCapabilities()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: com.android.server.wm.MagnificationSpec getDisplayMagnificationSpecLocked(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] getActiveApnTypes()>  -> _SOURCE_
<android.net.ThrottleManager: long getByteCount(java.lang.String,int,int,int)>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int getPackageScreenCompatMode(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSendBufferSize()>  -> _SOURCE_
<com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>  -> _SOURCE_
<android.net.ConnectivityManager: int tether(java.lang.String)>  -> _SOURCE_
<com.android.email.RefreshManager: com.android.email.RefreshManager getInstance(android.content.Context)>  -> _SOURCE_
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.net.ConnectivityManager)>  -> _SOURCE_
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getDefaultCipherSuites()>  -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$PersoSubState getPersoSubState()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()>  -> _SOURCE_
<android.app.Service: android.app.Application getApplication()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNodeName()>  -> _SOURCE_
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])>  -> _SOURCE_
<android.view.textservice.SentenceSuggestionsInfo: int getLengthAt(int)>  -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getLac()>  -> _SOURCE_
<android.net.Uri$PathSegments: java.lang.Object get(int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: int getLength()>  -> _SOURCE_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: int getPortCount()>  -> _SOURCE_
<android.inputmethodservice.Keyboard: java.util.List getModifierKeys()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconIndex()>  -> _SOURCE_
<android.net.SntpClient: long getNtpTime()>  -> _SOURCE_
<android.inputmethodservice.Keyboard: int getVerticalGap()>  -> _SOURCE_
<android.net.NetworkStats: long getTotalBytes()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getCurrentDataConnectionState()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.ApnSetting fetchDunApn()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getURI(int)>  -> _SOURCE_
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentGprsState()>  -> _SOURCE_
<android.net.Uri$StringUri: android.net.Uri$Builder buildUpon()>  -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()>  -> _SOURCE_
<com.android.server.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils: com.android.emailcommon.utility.SSLSocketFactory getHttpSocketFactory(boolean,javax.net.ssl.KeyManager)>  -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,java.util.HashSet)>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getTransactionId()>  -> _SOURCE_
<com.android.server.InputMethodManagerService: java.util.List getShortcutInputMethodsAndSubtypes()>  -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaLevel()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getAuthority()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: byte[] getEncoded()>  -> _SOURCE_
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>  -> _SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()>  -> _SOURCE_
<com.android.server.am.ActiveServices: android.app.PendingIntent getRunningServiceControlPanelLocked(android.content.ComponentName)>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getName()>  -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getUseClientMode()>  -> _SOURCE_
<android.telephony.CellIdentityGsm: int getMnc()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNamespaceURI()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: byte[] read(int)>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getBgPhone()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<com.android.exchange.EasOutboxService$SendMailParser: int getStatus()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.ComponentName getCallingActivity(android.os.IBinder)>  -> _SOURCE_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.ToneSettings getToneSettings()>  -> _SOURCE_
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>  -> _SOURCE_
<android.net.NetworkStatsHistory: int getIndexBefore(long)>  -> _SOURCE_
<com.android.internal.telephony.IccIoResult: com.android.internal.telephony.IccException getException()>  -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getTypeName()>  -> _SOURCE_
<com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getPhoneType()>  -> _SOURCE_
<android.telephony.SmsMessage: int getStatus()>  -> _SOURCE_
<javax.net.ssl.SSLSessionBindingEvent: java.lang.String getName()>  -> _SOURCE_
<android.telephony.CellIdentityGsm: int getMcc()>  -> _SOURCE_
<com.android.server.BackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)>  -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getProxy()>  -> _SOURCE_
<android.net.nsd.NsdServiceInfo: android.net.nsd.DnsSdTxtRecord getTxtRecord()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.lang.String getApkName(java.lang.String)>  -> _SOURCE_
<android.inputmethodservice.IInputMethodSessionWrapper: android.view.inputmethod.InputMethodSession getInternalInputMethodSession()>  -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailBody()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getKeepAlive()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNode(java.lang.String)>  -> _SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.net.URL getResource(java.lang.String)>  -> _SOURCE_
<com.android.server.WifiService: int getWifiApEnabledState()>  -> _SOURCE_
<android.net.sip.ISipService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getTitle()>  -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>  -> _SOURCE_
<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmCall: com.android.internal.telephony.Phone getPhone()>  -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$AppType getType()>  -> _SOURCE_
<android.net.wifi.NetworkUpdateResult: int getNetworkId()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords$EfPlLoaded: java.lang.String getEfName()>  -> _SOURCE_
<com.android.internal.telephony.CallerInfo: java.lang.String toString()>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>  -> _SOURCE_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: java.lang.String getDeviceId()>  -> _SOURCE_
<android.media.AudioService$ScoClient: android.os.IBinder getBinder()>  -> _SOURCE_
<android.telephony.CellIdentityGsm: int getLac()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>  -> _SOURCE_
<com.android.phone.BluetoothPhoneService$3: java.lang.String getNetworkOperator()>  -> _SOURCE_
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SOURCE_
<android.net.nsd.INsdManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToBnW(byte[],int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<android.net.wifi.WifiNative: java.lang.String getMacAddress()>  -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getPsc()>  -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaAsuLevel()>  -> _SOURCE_
<com.android.internal.telephony.cat.BerTlv: java.util.List getComprehensionTlvs()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getBSSID()>  -> _SOURCE_
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getEarliestConnection()>  -> _SOURCE_
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getFirstChild()>  -> _SOURCE_
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getLastSubtypeForInputMethodLocked(java.lang.String)>  -> _SOURCE_
<android.telephony.ServiceState: int getCssIndicator()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: short getNodeType()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: int getGeographicalScope()>  -> _SOURCE_
<android.net.wifi.WifiStateTracker: android.net.LinkProperties getLinkProperties()>  -> _SOURCE_
<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)>  -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getUriString()>  -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Phone getPhone()>  -> _SOURCE_
<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()>  -> _SOURCE_
<android.net.wifi.WifiManager: java.lang.String getConfigFile()> android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<android.net.wifi.WifiConfigStore: android.net.LinkProperties getLinkProperties(int)>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnection getDataConnection()>  -> _SOURCE_
<com.google.android.gsf.Gservices: java.lang.String getString(android.content.ContentResolver,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLine(boolean)>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getBaseURI()>  -> _SOURCE_
<android.server.search.SearchManagerService: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>  -> _SOURCE_
<android.net.TrafficStats: long getMobileTxBytes()>  -> _SOURCE_
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getActiveFgCall()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMessageWaitingIndicator()>  -> _SOURCE_
<com.android.emailcommon.service.EmailServiceProxy: int getApiLevel()>  -> _SOURCE_
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()>  -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: int getPremiumSmsPermission(java.lang.String)>  -> _SOURCE_
<android.net.LocalSocket: java.io.OutputStream getOutputStream()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager: com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager getInstance(android.content.Context,com.android.internal.telephony.CommandsInterface,android.os.Handler,int,java.lang.Object)>  -> _SOURCE_
<com.android.server.ServiceWatcher: java.lang.String getBestPackageName()>  -> _SOURCE_
<com.android.email.RefreshManager: boolean isRefreshingAnyMessageListForTest()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLEngine: org.apache.harmony.xnet.provider.jsse.OpenSSLEngine getInstance(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)>  -> _SOURCE_
<android.inputmethodservice.InputMethodService: int getBackDisposition()>  -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$AppState getState()>  -> _SOURCE_
<com.android.server.DeviceStorageMonitorService: long getMemoryLowThreshold()>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTetheredInterfaces()>  -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(int)>  -> _SOURCE_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: android.view.WindowInfo getWindowInfo(android.os.IBinder)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmCallTracker: boolean getMute()>  -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>  -> _SOURCE_
<java.security.Provider$Service: java.lang.String getClassName()>  -> _SOURCE_
<com.android.internal.statusbar.IStatusBarService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.speech.IRecognitionService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: com.android.internal.telephony.OperatorInfo$State getState()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>  -> _SOURCE_
<com.android.internal.telephony.IccCardApplicationStatus: java.lang.String toString()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getRemoteStreamVolume()>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)>  -> _SOURCE_
<com.android.server.TwilightService$TwilightState: long getTodaySunset()>  -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>  -> _SOURCE_
<com.android.server.BackupManagerService: java.util.List allAgentPackages()>  -> _SOURCE_
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>  -> _SOURCE_
<org.apache.harmony.security.fortress.Services: int getCacheVersion()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle getUser()>  -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>  -> _SOURCE_
<android.net.DummyDataStateTracker: android.net.LinkProperties getLinkProperties()>  -> _SOURCE_
<android.net.wifi.WifiConfiguration: java.lang.String getPrintableSsid()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttribute(java.lang.String)>  -> _SOURCE_
<android.telephony.ServiceState: int getCdmaRoamingIndicator()>  -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getUrgency()>  -> _SOURCE_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String getWrappedHostName()>  -> _SOURCE_
<android.media.AudioService$SetModeDeathHandler: int getMode()>  -> _SOURCE_
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()>  -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getLocalAddress()>  -> _SOURCE_
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellChecker()>  -> _SOURCE_
<com.android.server.ClipboardService: android.content.ClipDescription getPrimaryClipDescription()>  -> _SOURCE_
<com.android.internal.telephony.CommandException: com.android.internal.telephony.CommandException$Error getCommandError()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.Intent createAppErrorIntentLocked(com.android.server.am.ProcessRecord,long,android.app.ApplicationErrorReport$CrashInfo)>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForIntentSender(android.content.IIntentSender)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getNextSibling()>  -> _SOURCE_
<android.net.NetworkPolicyManager: boolean getRestrictBackground()>  -> _SOURCE_
<android.net.NetworkStatsHistory: long getTotalBytes()>  -> _SOURCE_
<android.net.RouteInfo: java.net.InetAddress getGateway()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimFileHandler: java.lang.String getEFPath(int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getPrlVersion()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.gsm.SimSmsInterfaceManager)>  -> _SOURCE_
<com.android.email.mail.store.ImapStore: com.android.email.mail.store.ImapConnection getConnection()>  -> _SOURCE_
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: int getPreferredOptionsPanelGravity()>  -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()>  -> _SOURCE_
<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getPath()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.lang.String getPkeyAlias()>  -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()>  -> _SOURCE_
<android.speech.IRecognitionService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.view.textservice.TextInfo: int getSequence()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getNotations()>  -> _SOURCE_
<com.android.internal.telephony.cat.IconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  -> _SOURCE_
<android.net.sip.ISipService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.net.NetworkStatsHistory: long getStart()>  -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>  -> _SOURCE_
<com.android.server.UiModeManagerService: int getCurrentModeType()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String,java.lang.String)>  -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getUName()>  -> _SOURCE_
<android.telephony.ServiceState: int getCdmaEriIconIndex()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ServerSessionContext getServerSessionContext()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getMode()>  -> _SOURCE_
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMImplementation getImplementation()>  -> _SOURCE_
<javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory getDefault()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: int getDisplayRule(java.lang.String)>  -> _SOURCE_
<android.net.Proxy: org.apache.http.HttpHost getPreferredHttpHost(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getConnectTime()>  -> _SOURCE_
<android.telephony.CellIdentityGsm: int getCid()>  -> _SOURCE_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedFragment()>  -> _SOURCE_
<android.net.IThrottleManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.net.INetworkStatsService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>  -> _SOURCE_
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>  -> _SOURCE_
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetDefaultSSLParameters()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>  -> _SOURCE_
<android.telephony.CellInfoCdma$1: android.telephony.CellInfoCdma createFromParcel(android.os.Parcel)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>  -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[])>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call getCall()>  -> _SOURCE_
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaMmiCode: java.lang.CharSequence getMessage()>  -> _SOURCE_
<android.net.EthernetDataTracker: android.net.NetworkInfo getNetworkInfo()>  -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaShort()>  -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: long getLastCertReqTime()>  -> _SOURCE_
<android.net.rtp.AudioStream: int getDtmfType()>  -> _SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: java.util.List getSupplicantQueryList()>  -> _SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getLocalProfile()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: int getDisplayRule(java.lang.String)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.telephony.SignalStrength: int getLteSignalStrenght()>  -> _SOURCE_
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>  -> _SOURCE_
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getIMSI()>  -> _SOURCE_
<android.net.LinkProperties: java.util.Collection getDnses()>  -> _SOURCE_
<android.security.IKeyChainService$Stub$Proxy: byte[] getCertificate(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.OutputStream getOutputStream()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String[] getValueNames()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodSettings: android.util.Pair getLastInputMethodAndSubtypeLocked()>  -> _SOURCE_
<com.android.internal.telephony.DataConnection: int getRetryTimer()>  -> _SOURCE_
<org.apache.harmony.xml.dom.TextImpl: short getNodeType()>  -> _SOURCE_
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetSupportedSSLParameters()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: java.util.List getRingingCalls()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getNativeLibraryPath()>  -> _SOURCE_
<android.net.ThrottleManager: java.lang.String getHelpUri()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.lang.String[] getSystemSharedLibraryNames()>  -> _SOURCE_
<android.net.INetworkPolicyListener$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)>  -> _SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document parse(org.xml.sax.InputSource)>  -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate,int,int,int,int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimSpnLoaded: java.lang.String getEfName()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: com.android.internal.telephony.DctConstants$State getState(java.lang.String)>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAddress()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMImplementationImpl: org.apache.harmony.xml.dom.DOMImplementationImpl getInstance()>  -> _SOURCE_
<com.android.server.MountService: java.lang.String[] getSecureContainerList()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.lang.String getPkeyAlias()>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DctConstants$State getState()>  -> _SOURCE_
<android.service.textservice.SpellCheckerService$Session: java.lang.String getLocale()>  -> _SOURCE_
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$SpeechItem: float getFloatParam(java.lang.String,float)>  -> _SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: java.lang.String getNodeName()>  -> _SOURCE_
<android.telephony.SmsCbMessage: int getMessageFormat()>  -> _SOURCE_
<com.android.email.activity.MessageOrderManager: int getTotalMessageCount()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getUseClientMode()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: int getNetworkId()>  -> _SOURCE_
<com.android.email.Throttle: long getLastEventTimeForTest()>  -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getTrafficClass()>  -> _SOURCE_
<com.android.email.activity.MessageOrderManager: int getCurrentPosition()>  -> _SOURCE_
<android.telephony.ServiceState: boolean getRoaming()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getLocalPrincipal()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int getProcessLimit()>  -> _SOURCE_
<android.net.InterfaceConfiguration: java.lang.Iterable getFlags()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$102(com.android.internal.telephony.cdma.RuimRecords,byte[])>  -> _SOURCE_
<com.android.internal.telephony.DataConnection: int getDataConnectionId()>  -> _SOURCE_
<com.android.phone.EmergencyCallbackModeService: long getEmergencyCallbackModeTimeout()>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: short getNodeType()>  -> _SOURCE_
<com.android.server.am.UsageStatsService: com.android.internal.app.IUsageStats getService()>  -> _SOURCE_
<android.server.search.SearchManagerService: java.util.List getGlobalSearchActivities()>  -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkClass(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()>  -> _SOURCE_
<android.telephony.TelephonyManager: int getCurrentPhoneType()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getContentEncoding()>  -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForAllUid(android.net.NetworkTemplate,long,long,boolean)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLEngine: int getEngineContext()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$2300(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>  -> _SOURCE_
<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>  -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList()>  -> _SOURCE_
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String[] getAttributeNames()>  -> _SOURCE_
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoLevel()>  -> _SOURCE_
<android.telephony.SignalStrength: int getGsmSignalStrength()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>  -> _SOURCE_
<com.android.server.ThrottleService: long getCliffThreshold(java.lang.String,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getTcpNoDelay()>  -> _SOURCE_
<com.android.internal.telephony.cat.ItemsIconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  -> _SOURCE_
<android.service.dreams.IDreamService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.telephony.SignalStrength: int getLteRssnr()>  -> _SOURCE_
<com.android.exchange.ExchangeService: java.lang.String getEasAccountSelector()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int getFrontActivityScreenCompatMode()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>  -> _SOURCE_
<android.telephony.SmsCbMessage: int getGeographicalScope()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int)>  -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotalIncludingTags(android.net.NetworkStats$Entry)>  -> _SOURCE_
<android.telephony.SmsCbMessage: int getServiceCategory()>  -> _SOURCE_
<com.android.exchange.ExchangeService: com.android.exchange.ExchangeService$AccountList access$600(android.content.Context,com.android.exchange.ExchangeService$AccountList)>  -> _SOURCE_
<android.net.LocalSocketImpl: android.net.LocalSocketAddress getSockAddress()>  -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>  -> _SOURCE_
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getApplicationBufferSize()>  -> _SOURCE_
<javax.net.ssl.SSLSessionBindingEvent: javax.net.ssl.SSLSession getSession()>  -> _SOURCE_
<com.android.server.ServiceWatcher: int getBestVersion()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionKey()>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getDefaultSSLParameters()>  -> _SOURCE_
<android.inputmethodservice.KeyboardView$SwipeTracker: float getYVelocity()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>  -> _SOURCE_
<android.net.sip.SipAudioCall: android.net.rtp.AudioStream getAudioStream()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getNeedClientAuth()>  -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getLastPathSegment()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$10: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.Object getParameter(java.lang.String)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$11: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$12: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAttribute(java.lang.String)>  -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getPeerPort()>  -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getRssi()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService$ActiveAdmin: int getUid()>  -> _SOURCE_
<android.net.LinkProperties$1: android.net.LinkProperties createFromParcel(android.os.Parcel)>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivity()>  -> _SOURCE_
<org.apache.http.HttpHost: java.lang.String getHostName()>  -> _SOURCE_
<com.android.internal.telephony.UUSInfo: int getDcs()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getOperatorNumeric()>  -> _SOURCE_
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getDefaultTrustManager()>  -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbLocation getLocation()>  -> _SOURCE_
<com.android.internal.telephony.IccServiceTable: java.lang.String toString()>  -> _SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>  -> _SOURCE_
<android.telephony.ServiceState: java.lang.String toString()>  -> _SOURCE_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictionaryPool getDictionaryPool(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: java.lang.String getTextContent()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String getPeerHostName()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconIndex()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: int getServiceState()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getRemainingPostDialString()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: java.util.List getFgCallConnections()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()>  -> _SOURCE_
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.InputStream getInputStream()>  -> _SOURCE_
<com.google.android.apps.lightcycle.panorama.StitchingServiceManager: com.google.android.apps.lightcycle.panorama.StitchingServiceManager getStitchingServiceManager(android.content.Context)>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: int getLidState()>  -> _SOURCE_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: android.content.res.ObbInfo getObbInfo(java.lang.String)>  -> _SOURCE_
<android.net.ConnectivityManager: android.net.ProxyProperties getProxy()>  -> _SOURCE_
<android.net.RouteInfo: android.net.LinkAddress getDestination()>  -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getAuthUserName()>  -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getSubtypeName()>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: byte[] getNpnSelectedProtocol(java.net.Socket)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: org.w3c.dom.DOMLocator getLocation()>  -> _SOURCE_
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getViewAt(int)>  -> _SOURCE_
<android.net.http.Connection: boolean getCanPersist()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.lang.String getNameForUid(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()>  -> _SOURCE_
<android.net.rtp.RtpStream: int getLocalPort()>  -> _SOURCE_
<android.server.search.SearchManagerService: android.content.ComponentName getWebSearchActivity()>  -> _SOURCE_
<android.media.AudioService: int getMode()>  -> _SOURCE_
<android.server.search.SearchManagerService: android.content.ComponentName getGlobalSearchActivity()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getMdnNumber()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getCreateTime()>  -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>  -> _SOURCE_
<android.net.wifi.WifiConfigStore: java.util.List getConfiguredNetworks()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$1: android.net.NetworkStats getSummaryForNetwork(android.net.NetworkTemplate,long,long)>  -> _SOURCE_
<android.speech.tts.TextToSpeechService: java.util.Set onGetFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.telephony.SmsMessage: long getTimestampMillis()>  -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getLastAudibleStreamVolume(int)>  -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()>  -> _SOURCE_
<android.app.IServiceConnection$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.email.RefreshManager$RefreshStatusMap: com.android.email.RefreshManager$Status get(long)>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: int getVersion()>  -> _SOURCE_
<com.android.providers.media.IMtpService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedData()>  -> _SOURCE_
<android.net.SntpClient: long getRoundTripTime()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker$TxRxSum: java.lang.String toString()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeValue()>  -> _SOURCE_
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()>  -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getSeverity()>  -> _SOURCE_
<com.android.server.pm.UserManagerService: int getUserSerialNumber(int)>  -> _SOURCE_
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getExchangeService(android.content.Context,com.android.emailcommon.service.IEmailServiceCallback)>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.ProxyProperties getProxy()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$1: android.net.NetworkStatsHistory getHistoryForNetwork(android.net.NetworkTemplate,int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmMmiCode: int getCLIRMode()>  -> _SOURCE_
<android.net.LocalSocketImpl: java.io.FileDescriptor getFileDescriptor()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: float[] getAnimationScales()>  -> _SOURCE_
<android.net.wifi.WifiManager: android.os.Messenger getWifiStateMachineMessenger()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getCreationTime()>  -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>  -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getPeerCertificates()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String)>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int,int)>  -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: java.lang.String getAlgorithm()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: int getPeerPort()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>  -> _SOURCE_
<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: java.lang.String getApnType()>  -> _SOURCE_
<com.android.emailcommon.service.AccountServiceProxy: java.lang.String getDeviceId()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedPath()>  -> _SOURCE_
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSenderLocked(int,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)>  -> _SOURCE_
<com.android.server.pm.UserManagerService: int[] getUserIds()>  -> _SOURCE_
<android.inputmethodservice.Keyboard: int getShiftKeyIndex()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: int getPort()>  -> _SOURCE_
<com.android.server.UiModeManagerService: int getNightMode()>  -> _SOURCE_
<com.android.server.ThrottleService$DataRecorder: long getPeriodTx(int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getEncoded()>  -> _SOURCE_
<com.android.server.ThrottleService$DataRecorder: long getPeriodRx(int)>  -> _SOURCE_
<android.telephony.CellIdentityGsm: int getPsc()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getLocalName()>  -> _SOURCE_
<com.android.server.ThrottleService: long getResetTime(java.lang.String)>  -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>  -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceMessageCount()>  -> _SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getCdmaMin()>  -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()>  -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()>  -> _SOURCE_
<android.telephony.ServiceState: boolean getIsManualSelection()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.CallTracker getCallTracker()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: boolean getVoiceMessageWaiting()>  -> _SOURCE_
<android.net.http.RequestHandle: int getRedirectCount()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedProtocols()>  -> _SOURCE_
<android.telephony.CellIdentityCdma: int getSystemId()>  -> _SOURCE_
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getProtocolIdentifier()>  -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoAsuLevel()>  -> _SOURCE_
<android.inputmethodservice.SoftInputWindow: int getSize()>  -> _SOURCE_
<com.google.android.picasastore.HttpUtils$MetricsTrackingConnectionManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLKey: org.apache.harmony.xnet.provider.jsse.OpenSSLEngine getEngine()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.CallManager getInstance()>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getEnableSessionCreation()>  -> _SOURCE_
<android.media.AudioService: int getMasterStreamType()>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>  -> _SOURCE_
<android.media.AudioService$VolumeStreamState: int getIndex(int,boolean)>  -> _SOURCE_
<com.android.internal.textservice.ITextServicesSessionListener$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.email.activity.MessageOrderManager: com.android.email.MessageListContext getListContext()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getScheme()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: boolean getMute()>  -> _SOURCE_
<android.net.EthernetDataTracker: java.lang.String getTcpBufferSizesPropName()>  -> _SOURCE_
<java.lang.BootClassLoader: java.util.Enumeration getResources(java.lang.String)>  -> _SOURCE_
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getDefaultCipherSuites()>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoUnfiltered()>  -> _SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.params.HttpParams getParams()>  -> _SOURCE_
<android.net.wifi.WifiInfo: android.net.wifi.WifiSsid getWifiSsid()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getXPermittedCrossDomainPolicies()>  -> _SOURCE_
<android.net.DummyDataStateTracker: java.lang.String getTcpBufferSizesPropName()>  -> _SOURCE_
<org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.Address get(int)>  -> _SOURCE_
<android.net.TrafficStats: long getTxBytes(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ClientSessionContext getClientSessionContext()>  -> _SOURCE_
<android.media.AudioService: android.media.IRingtonePlayer getRingtonePlayer()>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiStateMachineMessenger()>  -> _SOURCE_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: android.content.pm.PackageInfoLite getMinimalPackageInfo(java.lang.String,int,long)>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()>  -> _SOURCE_
<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()>  -> _SOURCE_
<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength getSignalStrength()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: int getPkeyContext()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.Object getValue(java.lang.String)>  -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getMessageBody()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.security.interfaces.DSAParams getParams()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getUseClientMode()>  -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>  -> _SOURCE_
<android.net.http.Headers: java.util.ArrayList getSetCookie()>  -> _SOURCE_
<com.android.internal.telephony.IccCardStatus: java.lang.String toString()>  -> _SOURCE_
<android.telephony.TelephonyManager: int getSimState()>  -> _SOURCE_
<com.android.server.input.InputManagerService: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getStatus()>  -> _SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagNameNS(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>  -> _SOURCE_
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getPort()>  -> _SOURCE_
<java.security.Provider$Service: java.lang.String getType()>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()>  -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])>  -> _SOURCE_
<com.android.server.BatteryService: int getPlugType()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getForegroundCall()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.util.List getProcessesInErrorState()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getStreamVolume(int)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>  -> _SOURCE_
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToBnW(byte[],int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getTextContent()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaCallTracker: boolean getMute()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media[] getMedia()>  -> _SOURCE_
<com.android.email.Throttle: int getTimeoutForTest()>  -> _SOURCE_
<android.net.NetworkPolicyManager: long computeNextCycleBoundary(long,android.net.NetworkPolicy)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getRemoteSocketAddress()>  -> _SOURCE_
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>  -> _SOURCE_
<android.net.TrafficStats: long getMobileRxBytes()>  -> _SOURCE_
<com.android.server.NetworkManagementService: int getInterfaceRxThrottle(java.lang.String)>  -> _SOURCE_
<com.android.server.display.DisplayManagerService: int[] getDisplayIds()>  -> _SOURCE_
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.IccCardStatus$CardState getCardState()>  -> _SOURCE_
<com.android.emailcommon.service.IEmailService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.google.android.gsf.Gservices: java.util.Map getStringsByPrefix(android.content.ContentResolver,java.lang.String[])>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getAuthority()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedQuery()>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: boolean getSpecified()>  -> _SOURCE_
<com.android.server.WallpaperManagerService: java.lang.String getName()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandomMember()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: int getRotation()>  -> _SOURCE_
<android.net.TrafficStats: long getMobileTxPackets()>  -> _SOURCE_
<android.service.dreams.IDreamManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>  -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.inputmethodservice.Keyboard: int getHorizontalGap()>  -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getCName()>  -> _SOURCE_
<android.net.wifi.WifiInfo: int getNetworkId()>  -> _SOURCE_
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: java.lang.String getLocale()>  -> _SOURCE_
<android.net.wifi.WifiNative: int getBand()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataUCS2(int)>  -> _SOURCE_
<android.telephony.CellIdentityCdma: int getNetworkId()>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()> android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<android.net.NetworkIdentity: java.lang.String getSubscriberId()>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: java.util.ArrayList getSmsCbProgramData()>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getServiceCenterAddress()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$002(com.android.internal.telephony.cdma.RuimRecords,byte[])>  -> _SOURCE_
<android.net.http.Request: android.net.http.EventHandler getEventHandler()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String,int)>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceRxThrottle(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: com.android.internal.telephony.Phone getPhone()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.lang.String getProviderMimeType(android.net.Uri,int)>  -> _SOURCE_
<com.android.server.WifiService: java.lang.String getConfigFile()> android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>  -> _SOURCE_
<android.net.TrafficStats: long getRxBytes(java.lang.String)>  -> _SOURCE_
<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponents()>  -> _SOURCE_
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.IccCardStatus$PinState getUniversalPinState()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getDefaultPhone()>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getNextMessageId()>  -> _SOURCE_
<com.android.exchange.AbstractSyncService: void <init>(android.content.Context,com.android.emailcommon.provider.Mailbox)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>  -> _SOURCE_
<com.android.internal.telephony.WspTypeDecoder: java.util.HashMap getContentParameters()>  -> _SOURCE_
<android.inputmethodservice.IInputMethodWrapper: android.view.inputmethod.InputMethod getInternalInputMethod()>  -> _SOURCE_
<com.android.internal.telephony.UUSInfo: byte[] getUserData()>  -> _SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallState()>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SimTlv: int getTag()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getOverallState()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>  -> _SOURCE_
<com.android.email.service.AttachmentDownloadService: int getQueueSize()>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionMethod()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimLiLoaded: java.lang.String getEfName()>  -> _SOURCE_
<android.telephony.CellInfo: java.lang.String toString()>  -> _SOURCE_
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getTeleService()>  -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: boolean getStrictErrorChecking()>  -> _SOURCE_
<android.net.sip.SipProfile: int getPort()>  -> _SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getLastPathSegment()>  -> _SOURCE_
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>  -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconMode()>  -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoLinger()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: byte[] getUserData()>  -> _SOURCE_
<android.telephony.SmsMessage: int getStatusOnSim()>  -> _SOURCE_
<android.net.NetworkStats: int[] getUniqueUids()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String[] getAttributeNames()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getEnableSessionCreation()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: void getTextContent(java.lang.StringBuilder)>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,int,boolean)>  -> _SOURCE_
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccCardConstants$State getState()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getFragment()>  -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>  -> _SOURCE_
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String getLanguage()>  -> _SOURCE_
<android.net.wifi.WifiConfigStore: android.net.ProxyProperties getProxyProperties(int)>  -> _SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLKey: int getPkeyContext()>  -> _SOURCE_
<com.android.server.am.ActiveServices$ServiceMap: java.util.Collection getAllServices(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: int getNumberOfPages()>  -> _SOURCE_
<com.android.exchange.EasSyncService: java.lang.String getTargetCollectionClassFromCursor(android.database.Cursor)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey getInstance(org.apache.harmony.xnet.provider.jsse.OpenSSLKey)>  -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)>  -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getMessageClass()>  -> _SOURCE_
<android.telephony.SmsCbMessage: java.lang.String toString()>  -> _SOURCE_
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>  -> _SOURCE_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.IccFileHandler getIccFileHandler(int)>  -> _SOURCE_
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$AppType AppTypeFromRILInt(int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getType()>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsUidDetail(int)>  -> _SOURCE_
<com.android.internal.telephony.CallManager: java.util.List getAllPhones()>  -> _SOURCE_
<android.view.textservice.SuggestionsInfo: int getSequence()>  -> _SOURCE_
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.UiccCard getUiccCard()>  -> _SOURCE_
<com.android.email.activity.MessageOrderManager: android.os.Handler getHandlerForContentObserver()>  -> _SOURCE_
<dalvik.system.BaseDexClassLoader: java.lang.Package getPackage(java.lang.String)>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: void getVisibleWindowsForDisplay(int,java.util.List)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>  -> _SOURCE_
<android.server.search.SearchManagerService: android.content.ComponentName getAssistIntent(int)>  -> _SOURCE_
<android.net.DnsPinger: java.util.List getDnsList()>  -> _SOURCE_
<android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator getInstance()>  -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()>  -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean doRename(int,java.lang.String,java.lang.String)>  -> _SOURCE_
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: int getDataCodingScheme()>  -> _SOURCE_
<android.net.wifi.WifiStateMachine: android.os.Messenger getMessenger()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int getUidForIntentSender(android.content.IIntentSender)>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getPath()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaEriText()>  -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getDbm()>  -> _SOURCE_
<android.net.BaseNetworkStateTracker: android.os.Handler getTargetHandler()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getReuseAddress()>  -> _SOURCE_
<com.android.internal.telephony.IccIoResult: java.lang.String toString()>  -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramResults: int getLanguage()>  -> _SOURCE_
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: boolean isStreamMute(int)>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiServiceMessenger()>  -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSession$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.app.LoadedApk$ServiceDispatcher: android.app.ServiceConnectionLeaked getLocation()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbCmasInfo getCmasInfo()>  -> _SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getLanguage()>  -> _SOURCE_
<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)>  -> _SOURCE_
<com.android.emailcommon.service.EmailServiceProxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<android.net.NetworkPolicyManager: int[] getUidsWithPolicy(int)>  -> _SOURCE_
<android.net.TrafficStats: long getTotalTxPackets()>  -> _SOURCE_
<com.android.email.activity.RecentMailboxManager: com.android.email.activity.RecentMailboxManager getInstance(android.content.Context)>  -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaLong()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getDisconnectTime()>  -> _SOURCE_
<android.net.http.RequestQueue: android.net.http.Request getRequest(org.apache.http.HttpHost)>  -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>  -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getOName()>  -> _SOURCE_
<org.apache.harmony.xml.dom.EntityReferenceImpl: short getNodeType()>  -> _SOURCE_
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: java.lang.String getInstallerPackageName(java.lang.String)>  -> _SOURCE_
<android.telephony.CellInfo: int hashCode()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: int getPropertyInt(java.lang.String[],int,int,int,android.util.DisplayMetrics)>  -> _SOURCE_
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getDisconnectTime()>  -> _SOURCE_
<android.net.NetworkStatsHistory: long getEnd()>  -> _SOURCE_
<com.android.email.activity.RecentMailboxManager: com.android.emailcommon.utility.EmailAsyncTask touch(long,long)>  -> _SOURCE_
<android.accessibilityservice.UiTestAutomationBridge: android.view.accessibility.AccessibilityNodeInfo getRootAccessibilityNodeInfoInActiveWindow()>  -> _SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String[] getEmails()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMapForRead(org.apache.harmony.xml.dom.NodeImpl)>  -> _SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getParserPointer()>  -> _SOURCE_
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByIntent(android.content.Intent$FilterComparison)>  -> _SOURCE_
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: android.os.Bundle getBundle()>  -> _SOURCE_
<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceHolder getSurfaceHolder()>  -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: byte[] getData(int)>  -> _SOURCE_
<com.android.internal.telephony.DataConnection$FailCause: int getErrorCode()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  -> _SOURCE_
<com.android.server.SerialService: java.lang.String[] getSerialPorts()>  -> _SOURCE_
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$SpeechItem: float getPan()>  -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()>  -> _SOURCE_
<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()>  -> _SOURCE_
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumHeight()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getEntities()>  -> _SOURCE_
<android.net.NetworkStats: java.lang.String[] getUniqueIfaces()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getTrustManager()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String)>  -> _SOURCE_
<android.telephony.ServiceState: int getNetworkId()>  -> _SOURCE_
<android.net.NetworkStatsHistory: int getIndexAfter(long)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getLocalPrincipal()>  -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()>  -> _SOURCE_
<android.media.AudioService: int getVibrateSetting(int)>  -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoEcio()>  -> _SOURCE_
<android.media.AudioService$VolumeStreamState: java.lang.String getSettingNameForDevice(boolean,int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getOrigDialString()>  -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet$TextEncodingDetails: java.lang.String toString()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPacketBufferSize()>  -> _SOURCE_
<android.net.ThrottleManager: long getCliffThreshold(java.lang.String,int)> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.util.Enumeration getResources(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$13: int getLength()>  -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,com.android.internal.telephony.cdma.sms.UserData,boolean)>  -> _SOURCE_
<com.google.android.gsf.Gservices: java.lang.Object getVersionToken(android.content.ContentResolver)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoTimeout()>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: java.lang.String getReason()>  -> _SOURCE_
<android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: int getLaunchedFromUid(android.os.IBinder)>  -> _SOURCE_
<com.android.internal.telephony.UUSInfo: int getType()>  -> _SOURCE_
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getViewTypeCount()>  -> _SOURCE_
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers)>  -> _SOURCE_
<com.android.internal.telephony.CallManager: java.lang.String toString()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: java.util.List getServices(int,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getRemoteSocketAddress()>  -> _SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getEncodedUserInfo()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)>  -> _SOURCE_
<org.apache.harmony.security.fortress.Services: java.security.Provider$Service getService(java.lang.String)>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTtys()>  -> _SOURCE_
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: java.lang.String getEfName()>  -> _SOURCE_
<com.android.server.ThrottleService: int getThrottle(java.lang.String)> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.server.CountryDetectorService$Receiver: android.location.ICountryListener getListener()>  -> _SOURCE_
<android.net.wifi.WifiConfigStore: android.net.wifi.NetworkUpdateResult saveNetwork(android.net.wifi.WifiConfiguration)>  -> _SOURCE_
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName[] getDreamComponents()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoTimeout()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getSchemeSpecificPart()>  -> _SOURCE_
<android.widget.RemoteViewsService: java.lang.Object access$000()>  -> _SOURCE_
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()>  -> _SOURCE_
<android.net.http.RequestQueue$ActivePool: android.net.http.ConnectionThread getThread(org.apache.http.HttpHost)>  -> _SOURCE_
<android.net.LinkProperties: java.lang.String getInterfaceName()>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedQuery()>  -> _SOURCE_
<com.android.emailcommon.service.IEmailServiceCallback$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.TrustManager[] getTrustManagers()>  -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>  -> _SOURCE_
<android.net.NetworkStatsHistory: long getBucketDuration()>  -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection getFgCallLatestConnection()>  -> _SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsEmergency(android.content.Context)>  -> _SOURCE_
<android.net.ThrottleManager: long getPeriodStartTime(java.lang.String)>  -> _SOURCE_
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()>  -> _SOURCE_
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials()>  -> _SOURCE_
<android.telephony.SmsMessage: int getStatusOnIcc()>  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceTxThrottle(java.lang.String)>  -> _SOURCE_
<com.android.exchange.ExchangeService: com.android.emailcommon.utility.EmailClientConnectionManager getClientConnectionManager(boolean,int)>  -> _SOURCE_
<android.widget.RemoteViewsService: java.util.HashMap access$100()>  -> _SOURCE_
<com.android.server.display.DisplayManagerService: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>  -> _SOURCE_
<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getClccLines()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getParserPointer()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ContentHandler getContentHandler()>  -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>  -> _SOURCE_
<java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>  -> _SOURCE_
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>  -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm8BitPacked(java.lang.String)>  -> _SOURCE_
<android.net.Proxy: java.net.Proxy getProxy(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.server.MountService: java.lang.String getSecureContainerFilesystemPath(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.CallManager: java.util.List getForegroundCalls()>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedPath()>  -> _SOURCE_
<android.os.INetworkManagementService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLKey: java.lang.String getAlias()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getLocalAddress()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getIMSI()>  -> _SOURCE_
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>  -> _SOURCE_
<android.content.pm.RegisteredServicesCache: java.util.Collection getAllServices(int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getDocumentElement()>  -> _SOURCE_
<android.telephony.TelephonyManager: int getDataState()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ErrorHandler getErrorHandler()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String[] getActiveApnTypes()>  -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)>  -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getExtraInfo()>  -> _SOURCE_
<android.net.http.Connection: org.apache.http.HttpHost getHost()>  -> _SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailAlphaTag()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>  -> _SOURCE_
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaMmiCode: com.android.internal.telephony.MmiCode$State getState()>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()>  -> _SOURCE_
<android.telephony.SignalStrength: int getLteRsrq()>  -> _SOURCE_
<android.telephony.SignalStrength: int getLteRsrp()>  -> _SOURCE_
<android.telephony.NeighboringCellInfo: java.lang.String toString()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: byte[] getNpnSelectedProtocol()>  -> _SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getResetTime(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconMode(int,int)>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults()>  -> _SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: java.lang.Object getAttribute(java.lang.String)>  -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getAlertOption()>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodListLocked()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getLastModified()>  -> _SOURCE_
<com.android.server.ThrottleService$DataRecorder: int getPeriodCount()>  -> _SOURCE_
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnAlphaTag()>  -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$PostDialState getPostDialState()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()>  -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: long getPrimaryNotificationTimestamp()>  -> _SOURCE_
<android.media.IMediaScannerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.media.AudioService: int getStreamMaxVolume(int)>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()>  -> _SOURCE_
<android.net.LinkAddress: java.net.InetAddress getAddress()>  -> _SOURCE_
<android.net.nsd.DnsSdTxtRecord: byte[] access$000(android.net.nsd.DnsSdTxtRecord)>  -> _SOURCE_
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccFileHandler getIccFileHandler()>  -> _SOURCE_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.Menu getMenu()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getNodeName()>  -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoLevel()>  -> _SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedUserInfo()>  -> _SOURCE_
<android.inputmethodservice.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: int disableApnType(java.lang.String)>  -> _SOURCE_
<java.lang.BootClassLoader: java.lang.Package getPackage(java.lang.String)>  -> _SOURCE_
<com.android.server.WifiService: java.util.List getConfiguredNetworks()> android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: android.net.RouteInfo[] getRoutes(java.lang.String)>  -> _SOURCE_
<com.android.email.activity.MessageOrderManager: android.database.Cursor access$500(com.android.email.activity.MessageOrderManager)>  -> _SOURCE_
<android.content.IContentService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.telephony.Call: long getEarliestCreateTime()>  -> _SOURCE_
<android.net.LinkProperties: java.util.Collection getLinkAddresses()>  -> _SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SipSession getSipSession()>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pWfdInfo: int getMaxThroughput()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: int getGSMIndex()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getKeepAlive()>  -> _SOURCE_
<android.net.LocalSocket: int getReceiveBufferSize()>  -> _SOURCE_
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>  -> _SOURCE_
<android.telephony.CellInfo: int getTimeStampType()>  -> _SOURCE_
<com.android.server.MountService: int[] getStorageUsers(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.CatCmdMessage$CallSettings getCallSettings()>  -> _SOURCE_
<android.net.wifi.WifiInfo: boolean getHiddenSSID()>  -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>  -> _SOURCE_
<com.android.internal.telephony.cdma.EriManager: java.lang.String getCdmaEriText(int,int)>  -> _SOURCE_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: long[] getFileSystemStats(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: boolean getRecordsLoaded()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getLocation()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToCodeScheme()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()>  -> _SOURCE_
<android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.math.BigInteger getX()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getDisconnectTime()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateKey)>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String getAddress()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: int getOrientationFromAppTokensLocked()>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)>  -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>  -> _SOURCE_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getApnSetting()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(android.view.Display)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getCipherSuite()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeNamespace()>  -> _SOURCE_
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$SpeechItem: int getIntParam(java.lang.String,int)>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: byte[] toNpnProtocolsList(byte[][])>  -> _SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()>  -> _SOURCE_
<com.android.internal.telephony.cat.CatResponseMessage: com.android.internal.telephony.cat.CommandDetails getCmdDetails()>  -> _SOURCE_
<android.net.http.AndroidHttpClientConnection: int getLocalPort()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getState(java.lang.String)>  -> _SOURCE_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: int getRecoveryAction()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getPeerHost()>  -> _SOURCE_
<com.android.emailcommon.utility.SSLUtils: android.net.SSLCertificateSocketFactory getSSLSocketFactory(boolean,int)>  -> _SOURCE_
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNodeNS(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.AppInterface$CommandType getCmdType()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getPeerPrincipal()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.InputStream getInputStream()>  -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.UsimFileHandler: java.lang.String getEFPath(int)>  -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int getMasterMaxVolume()>  -> _SOURCE_
<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>  -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>  -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>  -> _SOURCE_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.CatCmdMessage$BrowserSettings getBrowserSettings()>  -> _SOURCE_
<android.media.IAudioService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.phone.EmergencyCallbackModeService$LocalBinder: com.android.phone.EmergencyCallbackModeService getService()>  -> _SOURCE_
<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()>  -> _SOURCE_
<android.net.http.Request: java.lang.String getUri()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getProxyAuthenticate()>  -> _SOURCE_
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getNodeName()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getReceiveBufferSize()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getRecordForAppLocked(android.app.IApplicationThread)>  -> _SOURCE_
<com.android.internal.telephony.cat.DeviceIdentities: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  -> _SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)>  -> _SOURCE_
<com.android.server.connectivity.Tethering: java.lang.String[] getErroredIfaces()>  -> _SOURCE_
<com.android.server.pm.UserManagerService: int getUserHandle(int)>  -> _SOURCE_
<org.apache.http.auth.AuthScope: java.lang.String getHost()>  -> _SOURCE_
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.UiccCardApplication getApplicationIndex(int)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$3000(com.android.server.pm.PackageManagerService,android.net.Uri,int,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int)>  -> _SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: java.lang.String getEfName()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.graphics.Bitmap getTaskTopThumbnail(int)>  -> _SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pDeviceList: android.net.wifi.p2p.WifiP2pDevice get(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getPort()>  -> _SOURCE_
<android.net.NetworkQuotaInfo: long getHardLimitBytes()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getConnectTime()>  -> _SOURCE_
<android.telephony.CellInfoLte$1: android.telephony.CellInfoLte createFromParcel(android.os.Parcel)>  -> _SOURCE_
<android.telephony.ServiceState: int getNetworkType()>  -> _SOURCE_
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: com.android.internal.telephony.IWapPushManager getWapPushManager()>  -> _SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getData()>  -> _SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedException()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>  -> _SOURCE_
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()>  -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getCategory()>  -> _SOURCE_
<android.net.Uri: android.net.Uri normalizeScheme()>  -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>  -> _SOURCE_
<com.android.server.NsdService: android.os.Messenger getMessenger()> android.permission.INTERNET  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodSettings: int getSelectedInputMethodSubtypeHashCode()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getSoTimeout()>  -> _SOURCE_
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getLocalName(int)>  -> _SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeValue()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()>  -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pWfdInfo: int getControlPort()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: boolean getMute()>  -> _SOURCE_
<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>  -> _SOURCE_
<com.android.server.am.UsageStatsService: byte[] readFully(java.io.FileInputStream)>  -> _SOURCE_
<com.android.email.RefreshManager: java.util.Collection getListenersForTest()>  -> _SOURCE_
<android.service.textservice.SpellCheckerService$Session: android.os.Bundle getBundle()>  -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>  -> _SOURCE_
<com.android.server.WifiService: int getFrequencyBand()>  -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.TextServicesManager getInstance()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords$EfCsimMdnLoaded: java.lang.String getEfName()>  -> _SOURCE_
<android.view.textservice.TextInfo: java.lang.String getText()>  -> _SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getEriNumberOfEntries()>  -> _SOURCE_
<android.net.LocalSocketImpl: java.io.InputStream getInputStream()>  -> _SOURCE_
<com.android.server.input.InputManagerService: int getScanCodeState(int,int,int)>  -> _SOURCE_
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token getToken(int)>  -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedCipherSuites()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getApplicationBufferSize()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>  -> _SOURCE_
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>  -> _SOURCE_
<com.android.server.accessibility.AccessibilityManagerService: int getActiveWindowId()>  -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeListImpl: int getLength()>  -> _SOURCE_
<com.android.server.ThrottleService$DataRecorder: long getPeriodStart()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getDataSize(int)>  -> _SOURCE_
<com.android.server.WallpaperManagerService: android.app.WallpaperInfo getWallpaperInfo()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedProtocols()>  -> _SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getLocalIp()>  -> _SOURCE_
<libcore.net.http.ResponseHeaders: java.lang.String getConnection()>  -> _SOURCE_
<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>  -> _SOURCE_
<android.net.Uri$StringUri: java.util.List getPathSegments()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$SpeechItem: float getVolume()>  -> _SOURCE_
<com.android.internal.telephony.cat.ComprehensionTlv: byte[] getRawValue()>  -> _SOURCE_
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getHelpUri()> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: boolean getXmlStandalone()>  -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>  -> _SOURCE_
<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities getLinkCapabilities()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getTagName()>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedPath()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.AdnRecordCache getAdnCache()>  -> _SOURCE_
<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()>  -> _SOURCE_
<com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher: int getNumberCategory(java.lang.String)>  -> _SOURCE_
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$SuggestionsGatherer: com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$SuggestionsGatherer$Result getResults(int,java.util.Locale)>  -> _SOURCE_
<android.net.wifi.p2p.WifiP2pWfdInfo: java.lang.String getDeviceInfoHex()>  -> _SOURCE_
<android.net.http.HttpsConnection: java.lang.String getScheme()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()>  -> _SOURCE_
<android.telephony.TelephonyManager: int getCallState()>  -> _SOURCE_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.server.BackupManagerService: long getAvailableRestoreToken(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: int getPageIndex()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getGlobalProxy()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>  -> _SOURCE_
<com.android.exchange.ExchangeService$AccountObserver: java.lang.String getAccountKeyWhere()>  -> _SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: java.lang.String getEfName()>  -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getLocalPort()>  -> _SOURCE_
<com.android.server.accessibility.AccessibilityManagerService: boolean getAccessibilityFocusBoundsInActiveWindow(android.graphics.Rect)>  -> _SOURCE_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)>  -> _SOURCE_
<android.net.TrafficStats: long getTotalTxBytes()>  -> _SOURCE_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)>  -> _SOURCE_
<javax.net.ssl.SSLParameters: boolean getWantClientAuth()>  -> _SOURCE_
<android.net.nsd.DnsSdTxtRecord: java.lang.String get(java.lang.String)>  -> _SOURCE_
<android.net.INetworkPolicyListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionMethod()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)>  -> _SOURCE_
<android.net.ConnectivityManager: int untether(java.lang.String)>  -> _SOURCE_
<android.telephony.CellIdentityLte: int getMcc()>  -> _SOURCE_
<com.android.internal.telephony.IccRecords: boolean getVoiceCallForwardingFlag()>  -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>  -> _SOURCE_
<android.net.Uri$AbstractPart: java.lang.String getDecoded()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getEnableSessionCreation()>  -> _SOURCE_
<android.net.NetworkIdentity: java.lang.String getNetworkId()>  -> _SOURCE_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfacePairs()>  -> _SOURCE_
<android.telephony.CellIdentityLte: int getMnc()>  -> _SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getParentNode()>  -> _SOURCE_
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>  -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getRefresh()>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>  -> _SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.net.IThrottleManager$Stub$Proxy: int getThrottle(java.lang.String)>  -> _SOURCE_
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)>  -> _SOURCE_
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: com.android.server.InputMethodManagerService$ImeSubtypeListItem getNextInputMethod(boolean,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getDnsQueryName()>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>  -> _SOURCE_
<libcore.net.http.RequestHeaders: java.lang.String getConnection()>  -> _SOURCE_
<android.telephony.ServiceState: int getCdmaEriIconMode()>  -> _SOURCE_
<com.android.internal.telephony.Connection: java.lang.String getOrigDialString()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLSession getSession()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getLanguage()>  -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getCid()>  -> _SOURCE_
<android.net.BaseNetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: javax.net.ssl.SSLSession getSession()>  -> _SOURCE_
<android.net.ConnectivityManager: android.net.ProxyProperties getGlobalProxy()>  -> _SOURCE_
<com.android.internal.telephony.BaseCommands: com.android.internal.telephony.CommandsInterface$RadioState getRadioState()>  -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getLastAccessedTime()>  -> _SOURCE_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SimTlv: byte[] getData()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.content.pm.ActivityInfo getActivityInfoForUser(android.content.pm.ActivityInfo,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.Runnable getDelegatedTask()>  -> _SOURCE_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getVersion()>  -> _SOURCE_
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()>  -> _SOURCE_
<android.net.wifi.WifiConfigStore: java.lang.String getConfigFile()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: short getNodeType()>  -> _SOURCE_
<com.android.internal.telephony.RetryManager: int getRetryCount()>  -> _SOURCE_
<com.android.exchange.ExchangeService: android.content.Context getContext()>  -> _SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getQuery()>  -> _SOURCE_
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.Object[] getValues()>  -> _SOURCE_
<android.telephony.SmsMessage: byte[] getUserData()>  -> _SOURCE_
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateCrtKey)>  -> _SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getEriFileType()>  -> _SOURCE_
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getContentType()>  -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getFragment()>  -> _SOURCE_
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getFragment()>  -> _SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()>  -> _SOURCE_
<android.telephony.CellIdentityLte: int getPci()>  -> _SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getFormats()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedFragment()>  -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: int getStatusOnIcc()>  -> _SOURCE_
<android.app.LoadedApk$ServiceDispatcher: int getFlags()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getCreateTime()>  -> _SOURCE_
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: int getStorageEncryptionStatus(int)>  -> _SOURCE_
<android.speech.tts.ITextToSpeechService$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getFirstActiveRingingCall()>  -> _SOURCE_
<com.android.emailcommon.service.AccountServiceProxy: int getAccountColor(long)>  -> _SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: byte[] makeSmsRecordData(int,byte[])>  -> _SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri)>  -> _SOURCE_
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)>  -> _SOURCE_
<android.net.http.Headers: long getContentLength()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: boolean getVoiceCallForwardingFlag()>  -> _SOURCE_
<android.net.wifi.ScanResult$1: android.net.wifi.ScanResult createFromParcel(android.os.Parcel)>  -> _SOURCE_
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.CommandParamsFactory getInstance(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.IccFileHandler)>  -> _SOURCE_
<android.net.LocalSocket: int getSoTimeout()>  -> _SOURCE_
<com.android.server.ThrottleService: long getByteCount(java.lang.String,int,int,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] getId()>  -> _SOURCE_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getLineNumber()>  -> _SOURCE_
<com.android.server.am.ActivityManagerService: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>  -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()>  -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: byte[] getEncoded()>  -> _SOURCE_
<com.android.internal.telephony.cat.ComprehensionTlv: int getLength()>  -> _SOURCE_
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: float getAnimationScale(int)>  -> _SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.MenuInflater getMenuInflater()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getLocalSocketAddress()>  -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getReason()>  -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String[] getMobileIfaces()>  -> _SOURCE_
<android.media.AudioService$AudioFocusDeathHandler: android.os.IBinder getBinder()>  -> _SOURCE_
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String encodeBody()>  -> _SOURCE_
<com.android.internal.telephony.IntRangeManager: boolean isEmpty()>  -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getAuthority()>  -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,int)>  -> _SOURCE_
<com.android.server.TwilightService$TwilightState: long getYesterdaySunset()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getRUIMOperatorNumeric()>  -> _SOURCE_
<android.net.Proxy: java.lang.String getDefaultHost()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call$State getState()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNamespaceURI()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor getInputMonitor()>  -> _SOURCE_
<com.android.server.dreams.DreamManagerService: android.content.ComponentName getDefaultDreamComponent()>  -> _SOURCE_
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>  -> _SOURCE_
<com.android.server.MountService: android.os.storage.StorageVolume[] getVolumeList()>  -> _SOURCE_
<com.android.server.connectivity.Tethering: int[] getUpstreamIfaceTypes()>  -> _SOURCE_
<com.android.server.WifiService: java.util.List getScanResults()> android.permission.ACCESS_WIFI_STATE  -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listInterfaces()>  -> _SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getPrefix()>  -> _SOURCE_
<android.net.DummyDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()>  -> _SOURCE_
<android.telephony.CellIdentityGsm: android.telephony.CellIdentityGsm copy()>  -> _SOURCE_
<android.os.ServiceManagerNative: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.exchange.EasSyncService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)>  -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: java.lang.String getCategoryName()>  -> _SOURCE_
<android.telephony.CellIdentityLte: int getTac()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getExpires()>  -> _SOURCE_
<com.android.exchange.EasOutboxService$SendMailEntity: long getContentLength()>  -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: int[] getUidsWithPolicy(int)>  -> _SOURCE_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()>  -> _SOURCE_
<android.telephony.TelephonyManager: int getLteOnCdmaMode()>  -> _SOURCE_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>  -> _SOURCE_
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()>  -> _SOURCE_
<com.android.server.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int)>  -> _SOURCE_
<com.android.internal.telephony.IWapPushManager$Stub: com.android.internal.telephony.IWapPushManager asInterface(android.os.IBinder)>  -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>  -> _SOURCE_
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientOptions()>  -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>  -> _SOURCE_
<com.android.internal.telephony.DataConnection: int getRetryCount()>  -> _SOURCE_
<android.net.NetworkTemplate: java.lang.String getNetworkId()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: int getOrientationFromWindowsLocked()>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePath()>  -> _SOURCE_
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getLoadingView()>  -> _SOURCE_
<com.android.internal.telephony.SmsAddress: java.lang.String getAddressString()>  -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getUserInfo()>  -> _SOURCE_
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken,com.android.server.wm.DisplayContent)>  -> _SOURCE_
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>  -> _SOURCE_
<com.android.internal.telephony.ISms$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] getChangeCipherSpecMesage(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)>  -> _SOURCE_
<android.net.http.Headers: java.lang.String getWwwAuthenticate()>  -> _SOURCE_
<com.android.server.NetworkManagementService: android.net.RouteInfo[] getRoutes(java.lang.String)>  -> _SOURCE_
<com.android.server.NetworkManagementService: int getInterfaceTxThrottle(java.lang.String)>  -> _SOURCE_
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>  -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAllAccounts()>  -> _SOURCE_
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()> android.permission.GET_ACCOUNTS  -> _SOURCE_
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>  -> _SOURCE_
<com.google.android.picasasync.Authorizer: java.lang.String getAuthToken(java.lang.String)>  -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>  -> _SOURCE_
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS  -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()>  -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>  -> _SOURCE_
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> android.permission.AUTHENTICATE_ACCOUNTS  -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>  -> _SOURCE_
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()>  -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)>  -> _SOURCE_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(android.accounts.AccountManagerService$UserAccounts,java.lang.String)>  -> _SOURCE_
<android.accounts.AccountManager: java.util.HashMap access$1300(android.accounts.AccountManager)>  -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS  -> _SOURCE_
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)>  -> _SOURCE_
<com.google.android.picasasync.Authorizer: java.lang.String getFreshAuthToken(java.lang.String,java.lang.String)>  -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AccountManagerService getSingleton()>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS  -> _SOURCE_
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)>  -> _SOURCE_
<android.accounts.AccountManagerService$Session: android.accounts.IAccountManagerResponse getResponseAndClose()>  -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> android.permission.AUTHENTICATE_ACCOUNTS  -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>  -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)>  -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS  -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>  -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getRunningAccounts()>  -> _SOURCE_
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)>  -> _SOURCE_
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS  -> _SOURCE_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>  -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>  -> _SOURCE_
<android.accounts.AccountManager: android.os.Handler access$600(android.accounts.AccountManager)>  -> _SOURCE_
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> android.permission.GET_ACCOUNTS  -> _SOURCE_
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()>  -> _SOURCE_
<android.accounts.AccountManager: java.lang.Exception access$400(android.accounts.AccountManager,int,java.lang.String)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.IAccountManager access$000(android.accounts.AccountManager)>  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SOURCE_
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>  -> _SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS  -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>  -> _SOURCE_
<android.accounts.AccountManagerService$Session: java.lang.String toDebugString()>  -> _SOURCE_
<com.android.server.sip.SipSessionGroup: java.lang.String getLocalProfileUri()>  -> _SOURCE_
<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<com.android.ex.chips.Queries$Query: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.emailcommon.provider.EmailContent: android.net.Uri getUri()>  -> _SOURCE_
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>  -> _SOURCE_
<libcore.net.http.ResponseHeaders: java.net.URI getUri()>  -> _SOURCE_
<android.content.CursorLoader: android.net.Uri getUri()>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumsUri()>  -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)>  -> _SOURCE_
<org.ccil.cowan.tagsoup.Schema: java.lang.String getURI()>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostPhotosUri()>  -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadRecordsUri()>  -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>  -> _SOURCE_
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getAlbumCoverUri(long,java.lang.String)>  -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)>  -> _SOURCE_
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()>  -> _SOURCE_
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>  -> _SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)>  -> _SOURCE_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getSecurityMode()>  -> _SOURCE_
<android.net.sip.SipProfile: javax.sip.address.SipURI getUri()>  -> _SOURCE_
<gov.nist.javax.sip.header.RequestLine: gov.nist.javax.sip.address.GenericURI getUri()>  -> _SOURCE_
<android.content.ClipData$Item: android.net.Uri getUri()>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPhotosUri()>  -> _SOURCE_
<com.android.server.am.ActivityRecord: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()>  -> _SOURCE_
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.javax.sip.address.GenericURI getParameterAsURI(java.lang.String)>  -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getUri()>  -> _SOURCE_
<gov.nist.javax.sip.header.Challenge: java.lang.String getURI()>  -> _SOURCE_
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)>  -> _SOURCE_
<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)>  -> _SOURCE_
<gov.nist.javax.sip.address.AddressImpl: javax.sip.address.URI getURI()>  -> _SOURCE_
<com.android.videoeditor.service.VideoEditorProject: android.net.Uri getExportedMovieUri()>  -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>  -> _SOURCE_
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUsersUri()>  -> _SOURCE_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: com.android.internal.policy.impl.keyguard.KeyguardSecurityView getSecurityView()>  -> _SOURCE_
<com.android.camera.PhotoModule$ImageNamer: android.net.Uri getUri()>  -> _SOURCE_
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)>  -> _SOURCE_
<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>  -> _SOURCE_
<com.android.phone.PhoneUtils: com.android.internal.telephony.Phone getSipPhoneFromUri(com.android.internal.telephony.CallManager,java.lang.String)>  -> _SOURCE_
<com.android.server.pm.PackageManagerService$InstallParams: android.net.Uri getPackageUri()>  -> _SOURCE_
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadsUri()>  -> _SOURCE_
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE  -> _SOURCE_
<com.android.server.am.ServiceRecord$StartItem: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()>  -> _SOURCE_
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<android.content.pm.VerificationParams: android.net.Uri getOriginatingURI()>  -> _SOURCE_
<libcore.net.http.RequestHeaders: java.net.URI getUri()>  -> _SOURCE_
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getBackupSecurityMode(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSettingsUri()>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostAlbumsUri()>  -> _SOURCE_
<com.google.android.picasasync.UploadTaskEntry: android.net.Uri getContentUri()>  -> _SOURCE_
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>  -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)>  -> _SOURCE_
<com.android.emailcommon.utility.AttachmentUtilities: android.net.Uri getAttachmentUri(long,long)>  -> _SOURCE_
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE  -> _SOURCE_
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String getURI(java.lang.String)>  -> _SOURCE_
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()>  -> _SOURCE_
<com.android.ex.chips.RecipientEntry: android.net.Uri getPhotoThumbnailUri()>  -> _SOURCE_
<android.content.ContentProviderOperation: android.net.Uri getUri()>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadUri(long)>  -> _SOURCE_
<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>  -> _SOURCE_
<java.lang.SecurityManager: java.lang.Object getSecurityContext()>  -> _SOURCE_
<android.webkit.HTML5VideoView: boolean getPauseDuringPreparing()>  -> _SOURCE_
<com.android.ex.chips.Queries$Query: android.net.Uri getContentFilterUri()>  -> _SOURCE_
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>  -> _SOURCE_
<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getURI(int)>  -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>  -> _SOURCE_
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)>  -> _SOURCE_
<gov.nist.javax.sip.header.ims.PAssociatedURI: javax.sip.address.URI getAssociatedURI()>  -> _SOURCE_
<java.lang.System: java.lang.SecurityManager getSecurityManager()>  -> _SOURCE_
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)>  -> _SOURCE_
<org.apache.http.impl.client.DefaultRedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>  -> _SOURCE_
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()>  -> _SOURCE_
<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)>  -> _SOURCE_
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<com.android.camera.VideoModule$VideoNamer: android.net.Uri getUri()>  -> _SOURCE_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getSecurityMechanism()>  -> _SOURCE_
<com.android.launcher2.LauncherSettings$Favorites: android.net.Uri getContentUri(long,boolean)>  -> _SOURCE_
<com.android.email.AttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)>  -> _SOURCE_
<com.android.phone.PhoneUtils: android.net.Uri getProviderGatewayUri(android.content.Intent)>  -> _SOURCE_
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)>  -> _SOURCE_
<libcore.net.http.HttpEngine: java.net.URI getUri()>  -> _SOURCE_
<org.apache.http.message.BasicRequestLine: java.lang.String getUri()>  -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)>  -> _SOURCE_
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)>  -> _SOURCE_
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()>  -> _SOURCE_
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>  -> _SOURCE_
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>  -> _SOURCE_
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<org.kxml2.io.KXmlParser: java.lang.String getNamespaceUri(int)>  -> _SOURCE_
<gov.nist.javax.sip.header.AuthenticationHeader: javax.sip.address.URI getURI()>  -> _SOURCE_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getURI(int)>  -> _SOURCE_
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE  -> _SOURCE_
<android.media.Ringtone: android.net.Uri getUri()>  -> _SOURCE_
<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespaceURI(java.lang.String)>  -> _SOURCE_
<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumUri(long)>  -> _SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE  -> _SOURCE_
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getPhotoUri(long,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.content.pm.VerificationParams: android.net.Uri getVerificationURI()>  -> _SOURCE_
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>  -> _SOURCE_
<android.net.Uri: android.net.Uri getCanonicalUri()>  -> _SOURCE_
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>  -> _SOURCE_
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)>  -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)>  -> _SOURCE_
<com.google.android.picasastore.FIFEUtil: java.lang.String getImageUriOptions(android.net.Uri)>  -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.bluetooth.IBluetoothInputDevice$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()>  -> _SOURCE_
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)>  -> _SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: java.lang.String getName()>  -> _SOURCE_
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkCapabilities getLinkCapabilities()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)>  -> _SOURCE_
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices: com.android.bluetooth.btservice.RemoteDevices$DeviceProperties getDeviceProperties(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.BluetoothServerSocket: int getChannel()>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapAuthenticator: byte[] onAuthenticationResponse(byte[])>  -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> android.permission.BLUETOOTH  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hid.HidService: boolean getProtocolMode(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.pan.PanService: java.lang.String getName()>  -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: byte[] getAddress()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: int getBondState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneName()>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneNum()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: int getAdapterConnectionState()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: int getConnectionState()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()>  -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()>  -> _SOURCE_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()>  -> _SOURCE_
<android.bluetooth.BluetoothTetheringDataTracker: java.lang.String getTcpBufferSizesPropName()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> android.permission.BLUETOOTH  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetService: java.util.List getConnectedDevices()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetService: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetPhone$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hfp.AtPhonebook: boolean getCheckingAccessPermission()>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpService: java.lang.String getName()>  -> _SOURCE_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getConnectedDevices()>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumActiveCall()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: int getProfileConnectionState(int)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: int getState()>  -> _SOURCE_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: int getDiscoverableTimeout()>  -> _SOURCE_
<com.android.bluetooth.btservice.Config: java.lang.Class[] getSupportedProfiles()>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetService: java.lang.String getName()>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getBatteryCharge()>  -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.bluetooth.Utils: byte[] getByteAddress(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hid.HidService: com.android.bluetooth.hid.HidService getHidService()>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppPreference: java.lang.String getName(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>  -> _SOURCE_
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()>  -> _SOURCE_
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppManager: int getBatchSize()>  -> _SOURCE_
<android.bluetooth.BluetoothTetheringDataTracker: int getDefaultGatewayAddr()>  -> _SOURCE_
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSignal()>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetService: int getPriority(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: android.os.ParcelUuid[] getUuids()>  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String createOneEntry(boolean)>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>  -> _SOURCE_
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)>  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()>  -> _SOURCE_
<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo getNetworkInfo()>  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getAlias()>  -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()>  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService: java.lang.String getName()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()>  -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSpeakerVolume()>  -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppSendFileInfo getSendFileInfo(android.net.Uri)>  -> _SOURCE_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)>  -> _SOURCE_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppSendFileInfo: com.android.bluetooth.opp.BluetoothOppSendFileInfo generateFileInfo(android.content.Context,android.net.Uri,java.lang.String)>  -> _SOURCE_
<com.android.bluetooth.Utils: byte[] getBytesFromAddress(java.lang.String)>  -> _SOURCE_
<com.android.bluetooth.hid.HidService: int getPriority(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpService: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppRfcommTransport: java.lang.String getRemoteAddress()>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppBatch: com.android.bluetooth.opp.BluetoothOppShareInfo getPendingShare()>  -> _SOURCE_
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> android.permission.BLUETOOTH  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>  -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getBondState()>  -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetooth getBluetoothService(android.bluetooth.IBluetoothManagerCallback)>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker getInstance()>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetStateMachine: int getAudioState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getNetworkOperator()>  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService: java.util.List getHealthDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetService: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()>  -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.IBluetooth getService()>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> android.permission.BLUETOOTH  -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.bluetooth.hid.HidService: java.lang.String getName()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: com.android.bluetooth.btservice.AdapterService getService()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getCallState()>  -> _SOURCE_
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getUuids()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getState()>  -> _SOURCE_
<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()>  -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties getLinkProperties()>  -> _SOURCE_
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>  -> _SOURCE_
<android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> android.permission.WAKE_LOCK  -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>  -> _SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()>  -> _SOURCE_
<com.android.server.BluetoothManagerService: java.lang.String getAddress()>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])>  -> _SOURCE_
<com.android.bluetooth.hid.HidService: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.btservice.ProfileService: android.os.IBinder onBind(android.content.Intent)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: java.lang.String getName()>  -> _SOURCE_
<com.android.bluetooth.hid.HidService: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)>  -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService: java.util.List lookupHealthDevicesMatchingStates(int[])>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getRemoteDeviceName()>  -> _SOURCE_
<android.bluetooth.BluetoothUuid: int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid)>  -> _SOURCE_
<com.android.bluetooth.btservice.ProfileService: android.bluetooth.BluetoothDevice getDevice(byte[])>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String getErrorReason()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.BluetoothPbap: int getState()>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()>  -> _SOURCE_
<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppManager: com.android.bluetooth.opp.BluetoothOppManager getInstance(android.content.Context)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: byte[] getAddress()>  -> _SOURCE_
<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.Utils: java.lang.String getAddressStringFromByte(byte[])>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getConnectionState()> android.permission.BLUETOOTH  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()>  -> _SOURCE_
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: int getScanMode()>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetService: com.android.bluetooth.hfp.HeadsetService getHeadsetService()>  -> _SOURCE_
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getRoam()>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppUtility: java.lang.String getStatusDescription(android.content.Context,int,java.lang.String)>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getScanMode()>  -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getDeviceType()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)>  -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getName()> android.permission.BLUETOOTH  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getAudioState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()>  -> _SOURCE_
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppTransfer: int getBatchId()>  -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpService: int getPriority(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getConnectedHealthDevices()>  -> _SOURCE_
<com.android.bluetooth.hdp.HealthService: java.util.List getConnectedHealthDevices()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: int getBluetoothClass()>  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getName()>  -> _SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()>  -> _SOURCE_
<com.android.server.BluetoothManagerService: java.lang.String getName()>  -> _SOURCE_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.BluetoothPan: boolean isTetheringOn()> android.permission.BLUETOOTH  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBondState()>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: int getCount()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: int getRemoteClass(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: android.bluetooth.BluetoothDevice[] getBondedDevices()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>  -> _SOURCE_
<android.bluetooth.IBluetoothCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.bluetooth.BluetoothSocket: int getPort()>  -> _SOURCE_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.a2dp.A2dpService getA2dpService()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: com.android.bluetooth.btservice.AdapterService getAdapterService()>  -> _SOURCE_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppPreference: com.android.bluetooth.opp.BluetoothOppPreference getInstance(android.content.Context)>  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: short getRssi()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()>  -> _SOURCE_
<com.android.bluetooth.pan.PanService: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpService: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getSubscriberNumber()>  -> _SOURCE_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])> android.permission.BLUETOOTH  -> _SOURCE_
<com.android.bluetooth.pan.PanService: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.bluetooth.BluetoothClass: int getDeviceClass()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetoothManager getBluetoothManager()>  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices: android.bluetooth.BluetoothDevice getDevice(byte[])>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothDevice[] getBondedDevices()>  -> _SOURCE_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hid.HidService: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>  -> _SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>  -> _SOURCE_
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: android.os.ParcelUuid[] getUuids()>  -> _SOURCE_
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: android.bluetooth.BluetoothDevice[] getBondedDevices()>  -> _SOURCE_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService: java.lang.String getAddress()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: int getScanMode()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()> android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumHeldCall()>  -> _SOURCE_
<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()>  -> _SOURCE_
<com.android.bluetooth.btservice.ProfileService: java.lang.String getName()>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getMicVolume()>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetPhoneState: int getService()>  -> _SOURCE_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getHealthDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: int getDiscoverableTimeout()>  -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: int getState()>  -> _SOURCE_
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetService: int getAudioState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()>  -> _SOURCE_
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.BluetoothDevice: boolean getTrustState()>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()>  -> _SOURCE_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>  -> _SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppReceiveFileInfo: com.android.bluetooth.opp.BluetoothOppReceiveFileInfo generateFileInfo(android.content.Context,int)>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getState()>  -> _SOURCE_
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothManagerCallback$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: int getChannelType()>  -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()> android.permission.BLUETOOTH  -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<android.bluetooth.IBluetoothHealth$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.bluetooth.pan.PanService: java.util.List getDevicesMatchingConnectionStates(int[])>  -> _SOURCE_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBluetoothClass()>  -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getConnectedDevices()>  -> _SOURCE_
<com.android.bluetooth.opp.BluetoothOppPreference: int getChannel(android.bluetooth.BluetoothDevice,int)>  -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)>  -> _SOURCE_
<com.android.bluetooth.btservice.AdapterProperties: int getProfileConnectionState(int)>  -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])>  -> _SOURCE_
<android.database.CursorWrapper: int getCount()>  -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.os.Bundle getExtras()>  -> _SOURCE_
<android.database.CursorWrapper: float getFloat(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>  -> _SOURCE_
<android.database.MergeCursor: short getShort(int)>  -> _SOURCE_
<android.database.AbstractWindowedCursor: short getShort(int)>  -> _SOURCE_
<android.database.AbstractCursor: int getColumnCount()>  -> _SOURCE_
<android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()>  -> _SOURCE_
<android.database.sqlite.SQLiteConnection: int getConnectionId()>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>  -> _SOURCE_
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)>  -> _SOURCE_
<android.database.MergeCursor: int getCount()>  -> _SOURCE_
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>  -> _SOURCE_
<android.database.AbstractWindowedCursor: double getDouble(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()>  -> _SOURCE_
<android.database.AbstractCursor: android.net.Uri getNotificationUri()>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int getVersion()>  -> _SOURCE_
<android.database.MatrixCursor: byte[] getBlob(int)>  -> _SOURCE_
<android.database.CursorWindow: double getDouble(int,int)>  -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()>  -> _SOURCE_
<android.database.MatrixCursor: int getType(int)>  -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()>  -> _SOURCE_
<android.database.sqlite.SQLiteProgram: java.lang.Object[] getBindArgs()>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>  -> _SOURCE_
<android.database.MergeCursor: byte[] getBlob(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>  -> _SOURCE_
<android.database.AbstractWindowedCursor: int getInt(int)>  -> _SOURCE_
<android.database.MergeCursor: int getType(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: int getWALConnectionPoolSize()>  -> _SOURCE_
<android.database.CursorWrapper: int getType(int)>  -> _SOURCE_
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>  -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>  -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>  -> _SOURCE_
<android.database.MergeCursor: long getLong(int)>  -> _SOURCE_
<android.database.CursorWindow: long getLong(int,int)>  -> _SOURCE_
<android.database.sqlite.SQLiteCursor: int getColumnIndex(java.lang.String)>  -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()>  -> _SOURCE_
<com.android.providers.telephony.MmsSmsDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>  -> _SOURCE_
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()>  -> _SOURCE_
<android.database.AbstractWindowedCursor: byte[] getBlob(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>  -> _SOURCE_
<android.database.ContentObserver: android.database.IContentObserver releaseContentObserver()>  -> _SOURCE_
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>  -> _SOURCE_
<android.database.AbstractCursor: java.lang.String getColumnName(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$1: android.database.sqlite.SQLiteSession initialValue()>  -> _SOURCE_
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()>  -> _SOURCE_
<android.database.MergeCursor: java.lang.String[] getColumnNames()>  -> _SOURCE_
<android.database.MatrixCursor: int getInt(int)>  -> _SOURCE_
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)>  -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: int getCount()>  -> _SOURCE_
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()>  -> _SOURCE_
<android.database.MatrixCursor: long getLong(int)>  -> _SOURCE_
<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)>  -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.database.MatrixCursor: short getShort(int)>  -> _SOURCE_
<android.database.MergeCursor: int getInt(int)>  -> _SOURCE_
<android.database.CursorWrapper: int getColumnCount()>  -> _SOURCE_
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>  -> _SOURCE_
<android.database.AbstractCursor: byte[] getBlob(int)>  -> _SOURCE_
<android.database.CursorWrapper: long getLong(int)>  -> _SOURCE_
<android.database.CursorWindow: short getShort(int,int)>  -> _SOURCE_
<android.database.sqlite.SQLiteProgram: java.lang.String getSql()>  -> _SOURCE_
<android.database.MergeCursor: java.lang.String getString(int)>  -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()>  -> _SOURCE_
<android.database.CursorWrapper: android.os.Bundle getExtras()>  -> _SOURCE_
<android.database.MergeCursor: float getFloat(int)>  -> _SOURCE_
<android.database.CursorWrapper: int getPosition()>  -> _SOURCE_
<android.database.BulkCursorProxy: android.os.Bundle getExtras()>  -> _SOURCE_
<android.database.AbstractCursor: int getColumnIndex(java.lang.String)>  -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()>  -> _SOURCE_
<android.database.CursorWrapper: byte[] getBlob(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteProgram: int getConnectionFlags()>  -> _SOURCE_
<android.database.CursorWindow: int getStartPosition()>  -> _SOURCE_
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>  -> _SOURCE_
<android.database.CursorWindow: int getInt(int,int)>  -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.ArrayList getDbStats()>  -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getPageSize()>  -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.database.CursorWrapper: double getDouble(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase getDatabase()>  -> _SOURCE_
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteSession getSession()>  -> _SOURCE_
<android.database.AbstractCursor: android.os.Bundle getExtras()>  -> _SOURCE_
<android.database.MatrixCursor: int getCount()>  -> _SOURCE_
<android.database.CursorWrapper: int getInt(int)>  -> _SOURCE_
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()>  -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()>  -> _SOURCE_
<android.database.MergeCursor: double getDouble(int)>  -> _SOURCE_
<android.database.CursorWrapper: int getColumnIndex(java.lang.String)>  -> _SOURCE_
<android.database.IContentObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.database.IContentObserver$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.database.sqlite.SQLiteConnection: byte[] access$500()>  -> _SOURCE_
<android.database.CursorWindow: byte[] getBlob(int,int)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>  -> _SOURCE_
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>  -> _SOURCE_
<android.database.MatrixCursor: float getFloat(int)>  -> _SOURCE_
<android.database.AbstractCursor: android.database.CursorWindow getWindow()>  -> _SOURCE_
<android.database.AbstractWindowedCursor: float getFloat(int)>  -> _SOURCE_
<android.database.BulkCursorNative: android.os.IBinder asBinder()>  -> _SOURCE_
<android.database.CursorWrapper: java.lang.String getString(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.database.CursorWrapper: short getShort(int)>  -> _SOURCE_
<android.database.CursorWindow: java.lang.String getName()>  -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.database.MatrixCursor: double getDouble(int)>  -> _SOURCE_
<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>  -> _SOURCE_
<android.database.CursorWindow: int getType(int,int)>  -> _SOURCE_
<android.database.CursorWrapper: java.lang.String getColumnName(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.database.sqlite.SQLiteCursor: int getCount()>  -> _SOURCE_
<android.database.sqlite.SQLiteProgram: int getUniqueId()>  -> _SOURCE_
<android.database.AbstractWindowedCursor: int getType(int)>  -> _SOURCE_
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()>  -> _SOURCE_
<android.database.AbstractWindowedCursor: long getLong(int)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession createSession()>  -> _SOURCE_
<android.database.CursorWrapper: java.lang.String[] getColumnNames()>  -> _SOURCE_
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<android.database.CursorWindow: int getNumRows()>  -> _SOURCE_
<android.database.sqlite.SQLiteProgram: java.lang.String[] getColumnNames()>  -> _SOURCE_
<android.database.CursorWindow: java.lang.String getString(int,int)>  -> _SOURCE_
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)>  -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.database.BulkCursorDescriptor getBulkCursorDescriptor()>  -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()>  -> _SOURCE_
<android.database.AbstractCursor: int getPosition()>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>  -> _SOURCE_
<android.database.CursorWindow: float getFloat(int,int)>  -> _SOURCE_
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)>  -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)>  -> _SOURCE_
<android.database.AbstractCursor: int getType(int)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()>  -> _SOURCE_
<android.database.sqlite.SQLiteConnection: java.lang.String describeCurrentOperationUnsafe()>  -> _SOURCE_
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)>  -> _SOURCE_
<android.database.MatrixCursor: java.lang.String getString(int)>  -> _SOURCE_
<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>  -> _SOURCE_
<com.android.email.activity.MessagesAdapter$SearchResultsCursor: com.android.emailcommon.provider.Mailbox getSearchedMailbox()>  -> _SOURCE_
<com.android.email.FolderProperties: int getMessageCountForCombinedMailbox(android.content.Context,long)>  -> _SOURCE_
<com.android.email.activity.EmailActivity: android.content.Intent createOpenAccountIntent(android.app.Activity,long)>  -> _SOURCE_
<com.android.email.activity.Welcome: android.content.Intent createOpenAccountInboxIntent(android.content.Context,long)>  -> _SOURCE_
<com.android.email.Controller: long findOrCreateMailboxOfType(long,int)>  -> _SOURCE_
<com.android.email.RefreshManager: boolean isRefreshingAnyMailboxListForTest()>  -> _SOURCE_
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxOfType(android.content.Context,long,int)>  -> _SOURCE_
<com.android.email.activity.UIControllerBase: long getMailboxListMailboxId()>  -> _SOURCE_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: java.lang.String getMailboxDisplayName()>  -> _SOURCE_
<com.android.email.activity.UIControllerBase: long getMessageListMailboxId()>  -> _SOURCE_
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMailboxIntent(android.app.Activity,long,long)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.email.activity.MailboxListFragment: long getInitialCurrentMailboxId()>  -> _SOURCE_
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getSearchedMailbox()>  -> _SOURCE_
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMailboxListStatusForTest(long)>  -> _SOURCE_
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMessageIntent(android.app.Activity,long,long,long)>  -> _SOURCE_
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: java.lang.String getMailboxName()>  -> _SOURCE_
<com.android.email.widget.WidgetManager: long loadMailboxIdPref(android.content.Context,int)>  -> _SOURCE_
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: long getMailboxId()>  -> _SOURCE_
<com.android.email.activity.Welcome: android.content.Intent createOpenMessageIntent(android.content.Context,long,long,long)>  -> _SOURCE_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getMailboxMessageCount()>  -> _SOURCE_
<com.android.email.MessageListContext: long getSearchedMailbox()>  -> _SOURCE_
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getAttachmentMailbox()>  -> _SOURCE_
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxWithId(android.content.Context,long)>  -> _SOURCE_
<com.android.email.FolderProperties: java.lang.String getCombinedMailboxName(long)>  -> _SOURCE_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getRecentMailboxCount()>  -> _SOURCE_
<com.android.email.activity.UIControllerTwoPane: long getMailboxSettingsMailboxId()>  -> _SOURCE_
<com.android.email.RefreshManager: long getLastMailboxListRefreshTime(long)>  -> _SOURCE_
<com.android.email.activity.UIControllerSearchTwoPane: long getMailboxSettingsMailboxId()>  -> _SOURCE_
<com.android.email.activity.MailboxListFragment: long getSelectedMailboxId()>  -> _SOURCE_
<com.android.email.Controller: java.lang.String getMailboxServerName(android.content.Context,int)>  -> _SOURCE_
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: long getMailboxId()>  -> _SOURCE_
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getSearchMailbox(long)>  -> _SOURCE_
<com.android.email.activity.MessageListFragment: long getMailboxId()>  -> _SOURCE_
<com.android.email.activity.UIControllerOnePane: long getMailboxSettingsMailboxId()>  -> _SOURCE_
<com.android.email.activity.UIControllerBase: com.android.email.activity.MailboxListFragment getMailboxListFragment()>  -> _SOURCE_
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getMailbox()>  -> _SOURCE_
<com.android.emailcommon.provider.Mailbox: long findMailboxOfType(android.content.Context,long,int)>  -> _SOURCE_
<com.android.email.MessageListContext: long getMailboxId()>  -> _SOURCE_
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: long getMailboxId()>  -> _SOURCE_
<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS  -> _SOURCE_
<com.android.emailcommon.TrafficFlags: int getSyncFlags(android.content.Context,com.android.emailcommon.provider.Account)>  -> _SOURCE_
<android.content.SyncStorageEngine: int getIsSyncable(android.accounts.Account,int,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionAc: int getRefCountSync()>  -> _SOURCE_
<android.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()>  -> _SOURCE_
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>  -> _SOURCE_
<com.android.exchange.ExchangeService$AccountObserver: java.lang.String getSyncableEasMailboxWhere()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionAc: java.util.Collection getApnListSync()>  -> _SOURCE_
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: long[] getSyncSamples()>  -> _SOURCE_
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<android.content.ContentResolver: java.util.List getCurrentSyncs()>  -> _SOURCE_
<android.content.SyncStorageEngine: int getSyncRandomOffset()>  -> _SOURCE_
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SyncSampleBox getSyncSampleBox()>  -> _SOURCE_
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<android.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedSyncStates()>  -> _SOURCE_
<android.content.SyncStorageEngine: java.util.ArrayList getSyncHistory()>  -> _SOURCE_
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<android.content.SyncStorageEngine: java.util.ArrayList getSyncStatus()>  -> _SOURCE_
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatus(android.content.SyncStorageEngine$AuthorityInfo)>  -> _SOURCE_
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: java.lang.String getEndSync()>  -> _SOURCE_
<android.content.SyncStatusInfo: long getPeriodicSyncTime(int)>  -> _SOURCE_
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS  -> _SOURCE_
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.ApnSetting getApnSettingSync()>  -> _SOURCE_
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionAc: android.net.LinkCapabilities getLinkCapabilitiesSync()>  -> _SOURCE_
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<android.os.CommonTimeConfig: int getClientSyncInterval()>  -> _SOURCE_
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS  -> _SOURCE_
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSyncRequestUri()>  -> _SOURCE_
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS  -> _SOURCE_
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity: int getSyncMode(com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay)>  -> _SOURCE_
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: long[] getSyncSamples()>  -> _SOURCE_
<com.android.providers.calendar.CalendarInstancesHelper: java.lang.String getSyncIdKey(java.lang.String,long)>  -> _SOURCE_
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<com.android.exchange.adapter.ProvisionParser: java.lang.String getSecuritySyncKey()>  -> _SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS  -> _SOURCE_
<android.content.SyncStorageEngine: java.util.List getPeriodicSyncs(android.accounts.Account,int,java.lang.String)>  -> _SOURCE_
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<android.content.SyncManager: android.content.SyncAdapterType[] getSyncAdapterTypes(int)>  -> _SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()>  -> _SOURCE_
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.exchange.AbstractSyncService: java.lang.Object getSynchronizer()>  -> _SOURCE_
<android.content.SyncManager: android.content.SyncStorageEngine getSyncStorageEngine()>  -> _SOURCE_
<com.android.providers.calendar.SQLiteContentProvider: boolean getIsCallerSyncAdapter(android.net.Uri)>  -> _SOURCE_
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<android.content.SyncContext: android.os.IBinder getSyncContextBinder()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: int getSyncResult()>  -> _SOURCE_
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()>  -> _SOURCE_
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createAsyncTaskExecutor()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionAc: android.app.PendingIntent getReconnectIntentSync()>  -> _SOURCE_
<com.android.exchange.adapter.PingParser: int getSyncStatus()>  -> _SOURCE_
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS  -> _SOURCE_
<com.android.email.Preferences: boolean getHasShownRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account)>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionAc: int getCidSync()>  -> _SOURCE_
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>  -> _SOURCE_
<com.android.server.display.DisplayAdapter: com.android.server.display.DisplayManagerService$SyncRoot getSyncRoot()>  -> _SOURCE_
<android.content.SyncStorageEngine: java.util.List getCurrentSyncs(int)>  -> _SOURCE_
<com.android.exchange.adapter.PingParser: java.util.ArrayList getSyncList()>  -> _SOURCE_
<android.content.AbstractThreadedSyncAdapter: android.os.IBinder getSyncAdapterBinder()>  -> _SOURCE_
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<android.webkit.WebStorageClassic: java.util.Collection getOriginsSync()>  -> _SOURCE_
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS  -> _SOURCE_
<com.android.email.activity.MessageViewFragmentBase: com.android.emailcommon.provider.EmailContent$Message reloadMessageSync(android.app.Activity)>  -> _SOURCE_
<android.content.ContentService: java.util.List getCurrentSyncs()>  -> _SOURCE_
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getSyncKey()>  -> _SOURCE_
<android.net.wifi.WifiStateMachine: java.util.List syncGetScanResultsList()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionAc: android.net.LinkProperties getLinkPropertiesSync()>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getShouldSync()>  -> _SOURCE_
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.AsyncDialog getAsyncDialog()>  -> _SOURCE_
<android.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>  -> _SOURCE_
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS  -> _SOURCE_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>  -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByFileName(java.lang.String)>  -> _SOURCE_
<com.google.android.mms.util.AbstractCache: java.lang.Object get(java.lang.Object)>  -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: long getExpiry()>  -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: byte[] getTextString(int)>  -> _SOURCE_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>  -> _SOURCE_
<com.google.android.mms.pdu.DeliveryInd: long getDate()>  -> _SOURCE_
<com.google.android.mms.pdu.PduBody: int getPartIndex(com.google.android.mms.pdu.PduPart)>  -> _SOURCE_
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.EncodedStringValue getFrom()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getData()>  -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: int getReadStatus()>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: byte[] getTransactionId()>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getRetrieveText()>  -> _SOURCE_
<com.google.android.mms.pdu.SendReq: byte[] getTransactionId()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentDisposition()>  -> _SOURCE_
<com.google.android.mms.pdu.ReadRecInd: long getDate()>  -> _SOURCE_
<com.google.android.mms.pdu.PduParser: byte[] getWapString(java.io.ByteArrayInputStream,int)>  -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getFrom()>  -> _SOURCE_
<com.google.android.mms.pdu.PduParser: com.google.android.mms.pdu.PduHeaders parseHeaders(java.io.ByteArrayInputStream)>  -> _SOURCE_
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getCc()>  -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: long getDate()>  -> _SOURCE_
<com.google.android.mms.pdu.SendConf: byte[] getTransactionId()>  -> _SOURCE_
<com.google.android.mms.pdu.SendConf: int getResponseStatus()>  -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentId(java.lang.String)>  -> _SOURCE_
<com.google.android.mms.pdu.GenericPdu: int getMessageType()>  -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: byte[] getMessageId()>  -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: int getDeliveryReport()>  -> _SOURCE_
<com.google.android.mms.pdu.AcknowledgeInd: int getReportAllowed()>  -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: byte[] getMessageClass()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)>  -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: int getPriority()>  -> _SOURCE_
<com.google.android.mms.pdu.SendReq: int getDeliveryReport()>  -> _SOURCE_
<com.google.android.mms.pdu.ReadRecInd: byte[] getMessageId()>  -> _SOURCE_
<com.google.android.mms.pdu.EncodedStringValue: byte[] getTextString()>  -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: long getDate()>  -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentLocation(java.lang.String)>  -> _SOURCE_
<com.google.android.mms.pdu.SendReq: byte[] getContentType()>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getFrom()>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageClass()>  -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: long getLongInteger(int)>  -> _SOURCE_
<com.google.android.mms.pdu.NotifyRespInd: byte[] getTransactionId()>  -> _SOURCE_
<com.google.android.mms.pdu.SendReq: long getExpiry()>  -> _SOURCE_
<com.google.android.mms.util.PduCacheEntry: long getThreadId()>  -> _SOURCE_
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getBcc()>  -> _SOURCE_
<com.google.android.mms.pdu.EncodedStringValue: int getCharacterSet()>  -> _SOURCE_
<com.google.android.mms.ContentType: java.util.ArrayList getImageTypes()>  -> _SOURCE_
<com.google.android.mms.ContentType: java.util.ArrayList getAudioTypes()>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue[] getCc()>  -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: byte[] getContentLocation()>  -> _SOURCE_
<com.google.android.mms.util.PduCacheEntry: int getMessageBox()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getName()>  -> _SOURCE_
<com.google.android.mms.pdu.SendConf: byte[] getMessageId()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: int getCharset()>  -> _SOURCE_
<com.google.android.mms.pdu.DeliveryInd: byte[] getMessageId()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.google.android.mms.pdu.ReadRecInd: int getReadStatus()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: int getContentClass()>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: byte[] getContentType()>  -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: int getOctet(int)>  -> _SOURCE_
<com.google.android.mms.pdu.SendReq: byte[] getMessageClass()>  -> _SOURCE_
<com.google.android.mms.pdu.AcknowledgeInd: byte[] getTransactionId()>  -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()>  -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.PduBody getBody()>  -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getSubject()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentId()>  -> _SOURCE_
<com.google.android.mms.util.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.google.android.mms.util.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentType()>  -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: byte[] getTransactionId()>  -> _SOURCE_
<com.google.android.mms.pdu.NotifyRespInd: int getReportAllowed()>  -> _SOURCE_
<com.google.android.mms.util.PduCache: com.google.android.mms.util.PduCache getInstance()>  -> _SOURCE_
<com.google.android.mms.pdu.PduBody: int getPartsNum()>  -> _SOURCE_
<com.google.android.mms.pdu.SendReq: int getReadReport()>  -> _SOURCE_
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue getFrom()>  -> _SOURCE_
<com.android.providers.telephony.MmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: int getDeliveryReport()>  -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue getEncodedStringValue(int)>  -> _SOURCE_
<com.google.android.mms.pdu.SendReq: long getMessageSize()>  -> _SOURCE_
<com.google.android.mms.util.DrmConvertSession: byte[] convert(byte[],int)>  -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue getSubject()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentLocation()>  -> _SOURCE_
<com.google.android.mms.pdu.DeliveryInd: int getStatus()>  -> _SOURCE_
<com.google.android.mms.pdu.ReadRecInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()>  -> _SOURCE_
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.google.android.mms.pdu.NotificationInd: long getMessageSize()>  -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByName(java.lang.String)>  -> _SOURCE_
<com.google.android.mms.pdu.DeliveryInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: android.net.Uri getDataUri()>  -> _SOURCE_
<com.google.android.mms.util.PduCacheEntry: com.google.android.mms.pdu.GenericPdu getPdu()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getContentTransferEncoding()>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageId()>  -> _SOURCE_
<com.google.android.mms.ContentType: java.util.ArrayList getSupportedTypes()>  -> _SOURCE_
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue[] getTo()>  -> _SOURCE_
<com.google.android.mms.pdu.NotifyRespInd: int getStatus()>  -> _SOURCE_
<com.google.android.mms.pdu.GenericPdu: int getMmsVersion()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPersister: byte[] getBytes(java.lang.String)>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: int getRetrieveStatus()>  -> _SOURCE_
<com.google.android.mms.pdu.RetrieveConf: int getReadReport()>  -> _SOURCE_
<com.google.android.mms.pdu.PduComposer$PositionMarker: int getLength()>  -> _SOURCE_
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.PduHeaders getPduHeaders()>  -> _SOURCE_
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPart(int)>  -> _SOURCE_
<com.google.android.mms.pdu.PduComposer: byte[] make()>  -> _SOURCE_
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue[] getEncodedStringValues(int)>  -> _SOURCE_
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.PduPersister getPduPersister(android.content.Context)>  -> _SOURCE_
<com.google.android.mms.pdu.Base64: byte[] discardNonBase64(byte[])>  -> _SOURCE_
<com.google.android.mms.ContentType: java.util.ArrayList getVideoTypes()>  -> _SOURCE_
<com.google.android.mms.pdu.PduPart: byte[] getFilename()>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: long getId()>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.String getViewGroupActivity()>  -> _SOURCE_
<com.android.contacts.widget.IndexerListAdapter: int getPinnedHeaderCount()>  -> _SOURCE_
<com.android.contacts.widget.IndexerListAdapter: int getPositionForSection(int)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$NicknameKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.ContactPresenceIconUtil: android.graphics.drawable.Drawable getPresenceIcon(android.content.Context,int)>  -> _SOURCE_
<com.android.vcard.VCardUtils: java.lang.String getPropertyNameForIm(int)>  -> _SOURCE_
<com.android.contacts.activities.ActionBarAdapter: int getCurrentTab()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$NameKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getResourceText(android.content.Context,java.lang.String,int,java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getEditContactActivityClassName()>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache$CachedValue getCachedValue(java.lang.Object)>  -> _SOURCE_
<com.android.contacts.editor.EventFieldEditorView: android.app.Dialog createDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticGivenName()>  -> _SOURCE_
<com.android.contacts.detail.StreamItemAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromQuery(android.net.Uri,android.content.ContentResolver,java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)>  -> _SOURCE_
<com.android.contacts.model.Contact: java.util.ArrayList getContentValues()>  -> _SOURCE_
<com.android.contacts.preference.ContactsPreferences: int getDefaultDisplayOrder()>  -> _SOURCE_
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getByRawContactId(java.lang.Long)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String toString()>  -> _SOURCE_
<com.android.contacts.interactions.ContactDeletionInteraction: android.app.LoaderManager getLoaderManager()>  -> _SOURCE_
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.dataitem.DataKind getKind()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeId(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.dataitem.StructuredPostalDataItem: java.lang.String getFormattedAddress()>  -> _SOURCE_
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getCallDetailIntentProvider(com.android.contacts.calllog.CallLogAdapter,int,long,int)>  -> _SOURCE_
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.util.Iterator getNameLookupKeys(java.lang.String)>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getCreatedAccount(int,android.content.Intent)>  -> _SOURCE_
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>  -> _SOURCE_
<com.android.contacts.list.ContactsRequest: java.lang.CharSequence getActivityTitle()>  -> _SOURCE_
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeAndDataSet()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.contacts.model.account.AccountTypeWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet get(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getPlayVoicemailIntentProvider(long,java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticMiddleName()>  -> _SOURCE_
<com.android.contacts.model.RawContact: com.android.contacts.model.account.AccountType getAccountType()>  -> _SOURCE_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getStreamItems()>  -> _SOURCE_
<com.android.contacts.editor.GroupMembershipView$GroupSelectionItem: long getGroupId()>  -> _SOURCE_
<com.android.contacts.ContactsUtils: android.content.Intent getInvitableIntent(com.android.contacts.model.account.AccountType,android.net.Uri)>  -> _SOURCE_
<com.android.contacts.list.ContactListFilterController: com.android.contacts.list.ContactListFilterController getInstance(android.content.Context)>  -> _SOURCE_
<com.android.contacts.list.ContactTileListFragment$2: int getApproximateTileWidth()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getAsString(java.lang.String)>  -> _SOURCE_
<com.android.contacts.editor.PhotoActionPopup$ChoiceListItem: int getId()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence getTypeLabel(android.content.res.Resources,java.lang.Integer,java.lang.CharSequence)>  -> _SOURCE_
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServicePackageName()>  -> _SOURCE_
<com.android.contacts.ContactsApplication: java.lang.Object getSystemService(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getInstance(android.content.Context)>  -> _SOURCE_
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.SpecialCharSequenceMgr$SimContactQueryCookie: android.widget.EditText getTextField()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$RelationActionInflater: int getTypeLabelResource(java.lang.Integer)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: int getContactNameDisplayOrder()>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getRawContactAccountType(android.content.Context)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailDisplayUtils: android.view.View addStreamItemText(android.content.Context,com.android.contacts.util.StreamItemEntry,android.view.View)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.ContactListFilter getFilter()>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.dataitem.PhotoDataItem: byte[] getPhoto()>  -> _SOURCE_
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getNewInstanceForTest(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$PhoneKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.providers.contacts.PhotoProcessor: byte[] getThumbnailPhotoBytes()>  -> _SOURCE_
<com.android.providers.contacts.ReorderingCursorWrapper: int getInt(int)>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getSectionForPosition(int)>  -> _SOURCE_
<com.android.vcard.VCardUtils: java.lang.String getPhoneTypeString(java.lang.Integer)>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: java.lang.String getDataSet()>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailUriType getUriType()>  -> _SOURCE_
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>  -> _SOURCE_
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.providers.contacts.PhotoProcessor: byte[] getDisplayPhotoBytes()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: android.widget.ListView getListView()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.dialog.ClearFrequentsDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: int getScore()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountName()>  -> _SOURCE_
<com.android.providers.contacts.AbstractContactsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getMimetype()>  -> _SOURCE_
<com.android.contacts.interactions.ImportExportDialogFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailLayoutController: com.android.contacts.activities.ContactDetailActivity$FragmentKeyListener getCurrentPage()>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getNameTextView()>  -> _SOURCE_
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: long getContactId()>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getCompany(android.content.Context,com.android.contacts.model.Contact)>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getDataView()>  -> _SOURCE_
<com.android.phone.ContactsAsyncHelper$ImageTracker: int getPhotoState()>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccounts(boolean)>  -> _SOURCE_
<com.android.contacts.quickcontact.ResolveCache: java.lang.CharSequence getDescription(com.android.contacts.quickcontact.Action)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getLabelColumn()>  -> _SOURCE_
<com.android.contacts.group.GroupListItem: java.lang.String getAccountName()>  -> _SOURCE_
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ContactDirectoryManager: com.android.providers.contacts.ContactsDatabaseHelper getDbHelper()>  -> _SOURCE_
<com.android.vcard.VCardEntry: java.lang.String getDisplayName()>  -> _SOURCE_
<com.android.contacts.list.DirectoryPartition: java.lang.String getDirectoryType()>  -> _SOURCE_
<com.android.contacts.calllog.CallTypeIconsView: int getCount()>  -> _SOURCE_
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.account.AccountType$EditType getType()>  -> _SOURCE_
<com.android.contacts.util.StructuredPostalUtils: android.net.Uri getPostalAddressUri(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.RawContact: java.util.List getDataItems()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: int getMaxDisplayPhotoDim()>  -> _SOURCE_
<com.android.contacts.ContactsApplication: android.content.ContentResolver getContentResolver()>  -> _SOURCE_
<com.android.contacts.interactions.PhoneNumberInteraction: android.content.CursorLoader getLoader()>  -> _SOURCE_
<com.android.contacts.interactions.GroupDeletionDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: boolean getUseStrictPhoneNumberComparisonForTest()>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<gov.nist.javax.sip.header.Contact: gov.nist.javax.sip.header.ContactList getContactList()>  -> _SOURCE_
<com.android.contacts.list.ContactListAdapter: int getSelectedContactPosition()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNumber()>  -> _SOURCE_
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)>  -> _SOURCE_
<com.android.contacts.util.StopWatch: com.android.contacts.util.StopWatch getNullStopWatch()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$PostalActionInflater: int getTypeLabelResource(java.lang.Integer)>  -> _SOURCE_
<com.android.mms.data.Contact: byte[] access$1700(com.android.mms.data.Contact)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: java.lang.ThreadLocal getTransactionHolder()>  -> _SOURCE_
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getPhoneticName(android.content.Context,com.android.contacts.model.Contact)>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager createAccountTypeManager(android.content.Context)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedText()>  -> _SOURCE_
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)>  -> _SOURCE_
<com.android.contacts.util.AccountsListAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri)>  -> _SOURCE_
<com.android.contacts.quickcontact.QuickContactListFragment$1: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)>  -> _SOURCE_
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: int getLimit()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: com.android.contacts.model.account.AccountType getItem(int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getIccRecordsLoaded()>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getPhoneticNameTextView()>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: int getNumberActivityVoicemailSources(android.database.Cursor)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object[] getSections()>  -> _SOURCE_
<com.android.contacts.model.Contact: int getDirectoryExportSupport()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.model.Contact: int getDisplayNameSource()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: android.view.View getView()>  -> _SOURCE_
<com.android.mms.data.Contact: com.android.mms.data.Contact get(java.lang.String,boolean)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: java.lang.Long getRawContactId()>  -> _SOURCE_
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment: android.content.Context getContext()>  -> _SOURCE_
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>  -> _SOURCE_
<com.android.contacts.calllog.CallLogFragment: com.android.contacts.calllog.CallLogAdapter getAdapter()>  -> _SOURCE_
<com.android.contacts.model.RawContactDeltaList: java.lang.Long getRawContactId(int)>  -> _SOURCE_
<com.android.contacts.model.Contact: long getFirstWritableRawContactId(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)>  -> _SOURCE_
<com.android.contacts.list.EmailAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: com.android.contacts.model.dataitem.DataKind getKindForMimetype(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getDisplayLabel(android.content.Context)>  -> _SOURCE_
<com.android.contacts.list.ContactBrowseListFragment: android.net.Uri getSelectedContactUri()>  -> _SOURCE_
<com.android.contacts.ContactStatusUtil: java.lang.String getStatusString(android.content.Context,int)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getSuperPrimaryEntry(java.lang.String,boolean)>  -> _SOURCE_
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getSelectedGroup()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: java.lang.CharSequence getLabel()>  -> _SOURCE_
<com.android.providers.contacts.DefaultCallLogInsertionHelper: java.lang.String getGeocodedLocationFor(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListView: float getTopFadingEdgeStrength()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getContentValues()>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountName()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.contacts.activities.ActionBarAdapter: java.lang.String getQueryString()>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getGroupWritableAccounts()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getPhoneType()>  -> _SOURCE_
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact get(java.lang.String,boolean)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)>  -> _SOURCE_
<com.android.contacts.list.ContactListAdapter: long getSelectedContactId()>  -> _SOURCE_
<com.android.contacts.calllog.PhoneNumberHelper: java.lang.CharSequence getDisplayNumber(java.lang.CharSequence,java.lang.CharSequence)> android.permission.READ_PHONE_STATE  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: android.view.View createPinnedSectionHeaderView(android.content.Context,android.view.ViewGroup)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForSip()>  -> _SOURCE_
<com.android.vcard.VCardComposer: java.lang.String createOneEntry(java.lang.reflect.Method)>  -> _SOURCE_
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()>  -> _SOURCE_
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactDirectoryManager getContactDirectoryManagerForTest()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.Exception getException()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: com.android.contacts.detail.ContactDetailFragment$ViewEntry getItem(int)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$EmailActionInflater: int getTypeLabelResource(java.lang.Integer)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)>  -> _SOURCE_
<com.android.contacts.calllog.CallTypeHelper: java.lang.CharSequence getCallTypeText(int)>  -> _SOURCE_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getInvitableAccountTypes()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getUseStrictPhoneNumberComparisonParameter()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.widget.ContextMenuAdapter getContextMenuAdapter()>  -> _SOURCE_
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: android.app.Fragment getItem(int)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$WebsiteKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManagerImpl$InvitableAccountTypeCache: java.util.Map getCachedValue()>  -> _SOURCE_
<com.android.contacts.editor.ViewIdGenerator: int getId(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,int)>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: java.lang.String getLabelRes()>  -> _SOURCE_
<com.android.vcard.VCardEntry$WebsiteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$ActivityReference: android.app.Activity get()>  -> _SOURCE_
<com.android.contacts.list.ContactListFilterControllerImpl: com.android.contacts.list.ContactListFilter getFilter()>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$Member: java.lang.String getDisplayName()>  -> _SOURCE_
<com.android.contacts.ContactsUtils: android.net.Uri getCallUri(java.lang.String)>  -> _SOURCE_
<com.android.contacts.util.BitmapUtil: int getSmallerExtentFromBytes(byte[])>  -> _SOURCE_
<android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>  -> _SOURCE_
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailDisplayUtils: android.text.Html$ImageGetter getImageGetter(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.RawContact: com.android.contacts.model.RawContact$NamedDataItem addNamedDataItemValues(android.net.Uri,android.content.ContentValues)>  -> _SOURCE_
<com.android.providers.contacts.util.Clock: com.android.providers.contacts.util.Clock getInstance()>  -> _SOURCE_
<com.android.contacts.GroupMetaData: long getGroupId()>  -> _SOURCE_
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.util.Iterator getNameLookupKeys(java.lang.String)>  -> _SOURCE_
<com.android.contacts.ContactsActivity: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getLabelView()>  -> _SOURCE_
<com.android.contacts.quickcontact.QuickContactListFragment$1: int getCount()>  -> _SOURCE_
<com.android.providers.contacts.ContactLocaleUtils: java.util.Iterator getNameLookupKeys(java.lang.String,int)>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V21: java.lang.String getVersionString()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V30: java.lang.String getVersionString()>  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemActivity()>  -> _SOURCE_
<com.android.contacts.calllog.CallLogListItemViews: com.android.contacts.calllog.CallLogListItemViews createForTest(android.content.Context)>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V40: java.lang.String getVersionString()>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getLookupKey()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.ContactPhotoManager getPhotoLoader()>  -> _SOURCE_
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: byte[] getPhotoByteArray()>  -> _SOURCE_
<com.android.contacts.model.dataitem.ImDataItem: java.lang.Integer getProtocol()>  -> _SOURCE_
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String getSelection()>  -> _SOURCE_
<com.android.providers.contacts.PhotoStore: long getTotalSize()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getProperty(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.list.ContactListAdapter: java.lang.String[] getProjection(boolean)>  -> _SOURCE_
<com.android.providers.contacts.ReorderingCursorWrapper: double getDouble(int)>  -> _SOURCE_
<com.android.contacts.util.AccountsListAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.AccountTypeManager)>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteFragment$ContactTileAdapterListener: int getApproximateTileWidth()>  -> _SOURCE_
<com.android.mms.data.Contact: com.android.mms.data.Contact getMe(boolean)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>  -> _SOURCE_
<com.android.contacts.model.RawContact: android.content.ContentValues getValues()>  -> _SOURCE_
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.AccountTypeManager getAccountTypeManager()>  -> _SOURCE_
<com.android.contacts.ContactsApplication: com.android.contacts.test.InjectedServices getInjectedServices()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: java.lang.String getDataSet()>  -> _SOURCE_
<com.android.contacts.widget.IndexerListAdapter: com.android.contacts.widget.IndexerListAdapter$Placement getItemPlacementInSection(int)>  -> _SOURCE_
<com.android.contacts.ContactsUtils: java.lang.String getCurrentCountryIso(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.AbstractContactsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SOURCE_
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.vcard.VCardProperty: byte[] getByteValue()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V30: java.lang.String getBase64(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ProfileProvider: java.lang.ThreadLocal getTransactionHolder()>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V21: java.lang.String getBase64(java.lang.String)>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedComments()>  -> _SOURCE_
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromIterator(java.util.Iterator)>  -> _SOURCE_
<com.android.providers.contacts.VoicemailStatusTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)>  -> _SOURCE_
<com.android.contacts.model.account.GoogleAccountType: java.util.List getExtensionPackageNames()>  -> _SOURCE_
<com.android.vcard.VCardSourceDetector: java.lang.String getEstimatedCharset()>  -> _SOURCE_
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)>  -> _SOURCE_
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor buildSingleRowResult(java.lang.String[],java.lang.String[],java.lang.Object[])>  -> _SOURCE_
<com.android.contacts.model.Contact: boolean getStarred()>  -> _SOURCE_
<com.android.contacts.detail.StreamItemAdapter: int getItemViewType(int)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.list.ContactEntryListAdapter getAdapter()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$KindTitleViewEntry: java.lang.String getTitle()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.editor.ContactEditorUtils getInstance(android.content.Context)>  -> _SOURCE_
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)>  -> _SOURCE_
<com.android.contacts.group.GroupBrowseListAdapter$GroupListItemViewCache: android.net.Uri getUri()>  -> _SOURCE_
<com.android.providers.contacts.aggregation.ContactAggregator: android.database.Cursor queryAggregationSuggestions(android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],long,int,java.lang.String,java.util.ArrayList)>  -> _SOURCE_
<gov.nist.javax.sip.header.Contact: gov.nist.core.NameValueList getContactParms()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListView: int getPinnedHeaderHeight(int)>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getDirectoryType()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoPriorityResolver createPhotoPriorityResolver(android.content.Context)>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListView: int getTotalTopPinnedHeaderHeight()>  -> _SOURCE_
<gov.nist.javax.sip.header.Contact: java.lang.String getTempGruuParam()>  -> _SOURCE_
<com.android.contacts.group.SuggestedMemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.providers.contacts.aggregation.util.CommonNicknameCache: java.lang.String[] getCommonNicknameClusters(java.lang.String)>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: int getTypeLabelResource(java.lang.Integer)>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getChildId(int,int)>  -> _SOURCE_
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getBody()>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: java.util.List getPhotos()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$PhotoKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager getInstance(android.content.Context)>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorUtils: java.lang.String[] getWritableAccountTypeStrings()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$StructuredPostalKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getWidePaddingLeft()>  -> _SOURCE_
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getTitle()>  -> _SOURCE_
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V21: java.lang.String getNonEmptyLine()>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getGroup(int)>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEvent(android.content.Context)>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getGroupId(int)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getItemPosition(java.lang.Object)>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V30: java.lang.String getNonEmptyLine()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: int getContactNameDisplayOrder()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getNewInstanceForTest(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForEmail()>  -> _SOURCE_
<com.android.contacts.datepicker.DatePicker$SavedState: int getMonth()>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()>  -> _SOURCE_
<com.android.contacts.vcard.ExportProcessor: com.android.contacts.vcard.ExportRequest getRequest()>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)>  -> _SOURCE_
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader getLoader(int)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.account.AccountTypeWithDataSet)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getAsLong(java.lang.String)>  -> _SOURCE_
<com.android.contacts.interactions.GroupCreationDialogFragment: int getTitleResourceId()>  -> _SOURCE_
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountType()>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.String getEditContactActivityClassName()>  -> _SOURCE_
<com.android.contacts.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS  -> _SOURCE_
<com.android.contacts.util.ExpirableCache$GenerationalCachedValue: java.lang.Object getValue()>  -> _SOURCE_
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: com.android.exchange.adapter.ContactsSyncAdapter$RowBuilder createBuilder(android.content.Entity,java.lang.String,int,java.lang.String)>  -> _SOURCE_
<com.android.contacts.group.GroupListItem: long getGroupId()>  -> _SOURCE_
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>  -> _SOURCE_
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: android.app.Fragment getItem(int)>  -> _SOURCE_
<com.android.providers.contacts.DataRowHandler: android.content.ContentValues getAugmentedValues(android.database.sqlite.SQLiteDatabase,long,android.content.ContentValues)>  -> _SOURCE_
<com.android.providers.contacts.PhotoPriorityResolver: int getPhotoPriority(java.lang.String)>  -> _SOURCE_
<com.android.vcard.VCardEntry$PostalData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailLabel()>  -> _SOURCE_
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: int getTypeRank(int)>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getSourcePackage()>  -> _SOURCE_
<com.android.contacts.list.DefaultContactBrowseListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()>  -> _SOURCE_
<com.android.contacts.quickcontact.DataAction: android.content.Intent getIntent()>  -> _SOURCE_
<com.android.providers.contacts.AbstractContactsProvider: com.android.providers.contacts.ContactsTransaction getCurrentTransaction()>  -> _SOURCE_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getRawContacts()>  -> _SOURCE_
<com.android.contacts.ContactsApplication: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>  -> _SOURCE_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getName()>  -> _SOURCE_
<com.android.vcard.VCardConfig: int getNameOrderType(int)>  -> _SOURCE_
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByIds(java.lang.String,boolean)>  -> _SOURCE_
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getAsByteArray(java.lang.String)>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.GET_ACCOUNTS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>  -> _SOURCE_
<com.android.contacts.quickcontact.QuickContactListFragment$1: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.contacts.quickcontact.QuickContactListFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.providers.contacts.NameSplitter: int getAdjustedFullNameStyle(int)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindSipAddress(android.content.Context)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment: android.net.Uri getUri()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getOrCreateAccountIdInTransaction(com.android.providers.contacts.AccountWithDataSet)>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$Member: long getContactId()>  -> _SOURCE_
<com.android.contacts.model.Contact: android.net.Uri getLookupUri()>  -> _SOURCE_
<com.android.contacts.calllog.CallDetailHistoryAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider$UriData: android.net.Uri getUri()>  -> _SOURCE_
<com.android.providers.contacts.CallLogProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getGroupRowId()>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailTabCarousel: float getStoredYCoordinateForTab(int)>  -> _SOURCE_
<com.android.mms.ui.QuickContactDivot: float getCloseOffset()>  -> _SOURCE_
<com.android.providers.contacts.DataRowHandlerForOrganization: int getTypeRank(int)>  -> _SOURCE_
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()>  -> _SOURCE_
<com.android.providers.contacts.MemoryCursor: int getCount()>  -> _SOURCE_
<com.android.contacts.list.ContactListFilter: com.android.contacts.list.ContactListFilter restoreDefaultPreferences(android.content.SharedPreferences)>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getViewGroupLabel(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.Contact: byte[] getPhotoBinaryData()>  -> _SOURCE_
<com.android.providers.contacts.util.MemoryUtils: long getTotalMemorySize()>  -> _SOURCE_
<com.android.providers.contacts.VoicemailStatusTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.mms.data.Contact: byte[] access$1702(com.android.mms.data.Contact,byte[])>  -> _SOURCE_
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS  -> _SOURCE_
<com.android.contacts.activities.DialtactsActivity$PageChangeListener: int getCurrentPosition()>  -> _SOURCE_
<com.android.contacts.group.GroupDetailDisplayUtils: android.view.View getNewGroupSourceView(android.content.Context)>  -> _SOURCE_
<com.android.vcard.VCardEntry$PostalData: java.lang.String getFormattedAddress(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>  -> _SOURCE_
<com.android.contacts.activities.ShowOrCreateActivity: android.app.Dialog onCreateDialog(int)>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: int getColumnCount()>  -> _SOURCE_
<com.android.providers.contacts.ReorderingCursorWrapper: int getCount()>  -> _SOURCE_
<com.android.contacts.socialwidget.SocialWidgetSettings: android.net.Uri getContactUri(android.content.Context,int)>  -> _SOURCE_
<com.android.contacts.editor.RawContactReadOnlyEditorView: long getRawContactId()>  -> _SOURCE_
<com.android.contacts.calllog.ExtendedCursor: long getLong(int)>  -> _SOURCE_
<com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: int getInviteContactActionResId()>  -> _SOURCE_
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)>  -> _SOURCE_
<com.android.contacts.list.ContactsRequest: android.content.Intent getRedirectIntent()>  -> _SOURCE_
<com.android.providers.contacts.FastScrollingIndexCache: android.os.Bundle get(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.list.ContactsRequest: android.net.Uri getContactUri()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment: long getContactId()>  -> _SOURCE_
<com.android.mms.data.Contact: java.lang.String getName()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getPhoto()>  -> _SOURCE_
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: int getDirectorySearchMode()>  -> _SOURCE_
<com.android.email.activity.setup.SetupData: android.accounts.AccountAuthenticatorResponse getAccountAuthenticatorResponse()>  -> _SOURCE_
<com.android.contacts.calllog.ExtendedCursor: float getFloat(int)>  -> _SOURCE_
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getItemViewType(int)>  -> _SOURCE_
<com.android.contacts.calllog.CallTypeIconsView: int getCallType(int)>  -> _SOURCE_
<com.android.contacts.util.LocalizedNameResolver: java.lang.String getAllContactsName(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.RawContact: android.content.Context getContext()>  -> _SOURCE_
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNumber()>  -> _SOURCE_
<com.android.contacts.model.Contact: long getPhotoId()>  -> _SOURCE_
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getInequalityClause(java.lang.String,long)>  -> _SOURCE_
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)>  -> _SOURCE_
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getCanonicalPath()>  -> _SOURCE_
<com.android.contacts.group.GroupDetailFragment$1: int getApproximateTileWidth()>  -> _SOURCE_
<com.android.contacts.util.AccountSelectionUtil$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.activities.DialtactsActivity: android.content.Intent getCallSettingsIntent()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: android.widget.QuickContactBadge getQuickContact()>  -> _SOURCE_
<com.android.contacts.calllog.CallTypeHelper: java.lang.Integer getHighlightedColor(int)>  -> _SOURCE_
<com.android.contacts.ContactsUtils: android.content.Intent getVoicemailIntent()>  -> _SOURCE_
<com.android.providers.contacts.SearchIndexManager: java.lang.String getFtsMatchQuery(java.lang.String,com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: char[] getUpperCaseQueryString()>  -> _SOURCE_
<com.android.contacts.model.Contact: android.net.Uri getRequestedUri()>  -> _SOURCE_
<com.android.providers.contacts.TransactionContext: java.util.Set getDirtyRawContactIds()>  -> _SOURCE_
<com.android.contacts.quickcontact.DataAction: java.lang.String getAlternateIconDescription()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingBottom()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment: android.database.Cursor access$1202(com.android.contacts.editor.ContactEditorFragment,android.database.Cursor)>  -> _SOURCE_
<gov.nist.javax.sip.header.Contact: java.lang.String getPubGruuParam()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragmentCarousel: int getCurrentPage()>  -> _SOURCE_
<com.android.contacts.test.InjectedServices: android.content.SharedPreferences getSharedPreferences()>  -> _SOURCE_
<com.android.contacts.model.dataitem.DataItem: java.lang.String getMimeType()>  -> _SOURCE_
<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.contacts.widget.IndexerListAdapter: int getSectionForPosition(int)>  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewGroupActivity()>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V30: java.util.Set getKnownPropertyNameSet()>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownPropertyNameSet()>  -> _SOURCE_
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()>  -> _SOURCE_
<com.android.contacts.model.Contact: long getNameRawContactId()>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getPhotoUri()>  -> _SOURCE_
<com.android.contacts.activities.ConfirmAddDetailActivity: com.android.contacts.util.DialogManager getDialogManager()>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V40: java.util.Set getKnownPropertyNameSet()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.DirectoryPartition createDefaultDirectoryPartition()>  -> _SOURCE_
<com.android.providers.contacts.ProfileProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action getAction()>  -> _SOURCE_
<com.android.vcard.VCardEntry$ImData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.calllog.ClearCallLogDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.model.account.AccountWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeWithDataSet()>  -> _SOURCE_
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long getWritableEntityId()> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS  -> _SOURCE_
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getCountView()>  -> _SOURCE_
<com.android.contacts.list.JoinContactLoader: android.database.Cursor loadInBackground()>  -> _SOURCE_
<com.android.contacts.preference.ContactsPreferences: int getSortOrder()>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: java.lang.CharSequence getTitle(android.content.Context)>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.dialpad.DialpadFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>  -> _SOURCE_
<com.android.vcard.VCardEntry$EmailData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.providers.contacts.DataRowHandler: int getTypeRank(int)>  -> _SOURCE_
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticFamilyName()>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getStatusView()>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getChild(int,int)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$KindParser: java.util.List parseDataKindTag(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getData()>  -> _SOURCE_
<com.android.providers.contacts.ProfileProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.contacts.ContactsActivity: android.content.ContentResolver getContentResolver()>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: int getInviteContactActionResId()>  -> _SOURCE_
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountType(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountTypeForAccount(com.android.contacts.model.account.AccountWithDataSet)>  -> _SOURCE_
<com.android.contacts.editor.EditorAnimator: com.android.contacts.editor.EditorAnimator getInstance()>  -> _SOURCE_
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(boolean,boolean)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getTypeColumn()>  -> _SOURCE_
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$EmailKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListAdapter: int getPinnedHeaderCount()>  -> _SOURCE_
<com.android.contacts.GroupMetaData: java.lang.String getTitle()>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)>  -> _SOURCE_
<com.android.contacts.util.HtmlUtils$StreamItemQuoteSpan: int getLeadingMargin(boolean)>  -> _SOURCE_
<com.android.contacts.util.ImageViewDrawableSetter: byte[] getCompressedImage()>  -> _SOURCE_
<com.android.contacts.editor.KindSectionView: java.lang.String getTitle()>  -> _SOURCE_
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>  -> _SOURCE_
<com.android.vcard.VCardEntry$OrganizationData: java.lang.String getFormattedString()>  -> _SOURCE_
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()>  -> _SOURCE_
<com.android.providers.contacts.TransactionContext: java.lang.Long getAccountIdOrNullForRawContact(long)>  -> _SOURCE_
<com.android.providers.contacts.CallLogProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>  -> _SOURCE_
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>  -> _SOURCE_
<com.android.contacts.activities.GroupEditorActivity: com.android.contacts.util.DialogManager getDialogManager()>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action: int getMessageId()>  -> _SOURCE_
<com.android.contacts.calllog.CallDetailHistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getItemPosition(java.lang.Object)>  -> _SOURCE_
<com.android.contacts.ContactsUtils: android.graphics.Rect getTargetRectFromView(android.content.Context,android.view.View)>  -> _SOURCE_
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)>  -> _SOURCE_
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: int getDirectoryResultLimit()>  -> _SOURCE_
<com.android.contacts.interactions.GroupNameDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.quickcontact.DataAction: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.contacts.util.ContactBadgeUtil: java.lang.CharSequence getSocialDate(com.android.contacts.util.StreamItemEntry,android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexRawContactIds()>  -> _SOURCE_
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.account.AccountType$EditType)>  -> _SOURCE_
<com.android.providers.contacts.PhotoStore: com.android.providers.contacts.PhotoStore$Entry get(long)>  -> _SOURCE_
<com.android.contacts.list.LegacyContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.vcard.ExportProcessor: int getType()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: java.lang.String getCurrentPhotoFile()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.Long getAccountIdOrNull(com.android.providers.contacts.AccountWithDataSet)>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListAdapter: int getScrollPositionForHeader(int)>  -> _SOURCE_
<com.android.contacts.detail.StreamItemAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.datepicker.DatePicker: int getDayOfMonth()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticFamilyName()>  -> _SOURCE_
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher$Status getProviderStatus()>  -> _SOURCE_
<com.android.contacts.calllog.ExtendedCursor: java.lang.String getString(int)>  -> _SOURCE_
<com.android.contacts.ContactsActivity: android.view.View getView(int)>  -> _SOURCE_
<com.android.mms.data.Contact: int getContactMethodType()>  -> _SOURCE_
<com.android.vcard.VCardEntry$NicknameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache$Entry getEntry(com.android.contacts.quickcontact.Action)>  -> _SOURCE_
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri,java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandlerForProfile(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.lang.String getSortKey(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ReorderingCursorWrapper: short getShort(int)>  -> _SOURCE_
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher getInstance(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.Contact: long getDirectoryId()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountType()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)>  -> _SOURCE_
<com.android.contacts.preference.SortOrderPreference: java.lang.CharSequence getSummary()>  -> _SOURCE_
<com.android.contacts.ContactPhotoManagerImpl$Request: long getId()>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getVisible()>  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemPhotoActivity()>  -> _SOURCE_
<com.android.mms.data.ContactList: java.lang.String[] getNumbers()>  -> _SOURCE_
<com.android.contacts.datepicker.DatePicker: int getMonth()>  -> _SOURCE_
<com.android.contacts.list.ContactsSectionIndexer: java.lang.Object[] getSections()>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getLookupUri()>  -> _SOURCE_
<com.android.providers.contacts.NameLookupBuilder: java.lang.String normalizeName(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)>  -> _SOURCE_
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: android.net.Uri[] getSourceUris()>  -> _SOURCE_
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])>  -> _SOURCE_
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServicePackageName()>  -> _SOURCE_
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager getInstance(android.content.Context)>  -> _SOURCE_
<com.android.contacts.ContactsUtils: int getThumbnailSize(android.content.Context)>  -> _SOURCE_
<com.android.vcard.VCardSourceDetector: int getEstimatedType()>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteFragment: com.android.contacts.list.ContactListFilter getFilter()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: android.app.LoaderManager getLoaderManager()>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>  -> _SOURCE_
<com.android.contacts.editor.BaseRawContactEditorView: com.android.contacts.editor.PhotoEditorView getPhotoEditor()>  -> _SOURCE_
<com.android.contacts.editor.KindSectionView: com.android.contacts.model.dataitem.DataKind getKind()>  -> _SOURCE_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getType(com.android.contacts.model.dataitem.DataKind,int)>  -> _SOURCE_
<com.android.contacts.list.ContactsSectionIndexer: int getSectionForPosition(int)>  -> _SOURCE_
<gov.nist.javax.sip.header.Contact: boolean getWildCardFlag()>  -> _SOURCE_
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: long getLastModified()>  -> _SOURCE_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getString(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String getString(int)>  -> _SOURCE_
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNormalizedNumber()>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallDetailsMessageId()>  -> _SOURCE_
<com.android.contacts.list.PhoneNumberPickerFragment: com.android.contacts.list.ContactListFilter getFilter()>  -> _SOURCE_
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.Long getId()>  -> _SOURCE_
<com.android.contacts.activities.PhotoSelectionActivity: android.content.Intent buildIntent(android.content.Context,android.net.Uri,android.graphics.Bitmap,byte[],android.graphics.Rect,com.android.contacts.model.RawContactDeltaList,boolean,boolean,boolean)>  -> _SOURCE_
<com.android.contacts.util.MemoryUtils: long getTotalMemorySize()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$OrganizationKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry(java.lang.Long)>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getId()>  -> _SOURCE_
<com.android.contacts.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.vcard.ImportRequest doInBackground(com.android.contacts.vcard.VCardService[])> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.VIBRATE android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.contacts.list.ContactBrowseListFragment: com.android.contacts.list.ContactListFilter getFilter()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredName()>  -> _SOURCE_
<com.android.contacts.activities.NonPhoneActivity$NonPhoneDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedVerticalScrollLength()>  -> _SOURCE_
<com.android.contacts.activities.PeopleActivity: com.android.contacts.util.DialogManager getDialogManager()>  -> _SOURCE_
<com.android.vcard.VCardEntry$OrganizationData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: java.util.List getStatusMessages(android.database.Cursor)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQueryString()>  -> _SOURCE_
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$PhoneActionAltInflater: int getTypeLabelResource(java.lang.Integer)>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: android.widget.ImageView getPhotoView()>  -> _SOURCE_
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.contacts.list.ContactTileView: android.widget.QuickContactBadge getQuickContact()>  -> _SOURCE_
<com.android.contacts.editor.RawContactEditorView: long getRawContactId()>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountType()>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.util.ArrayList getSortedDataKinds()>  -> _SOURCE_
<com.android.contacts.quickcontact.DataAction: int getPresence()>  -> _SOURCE_
<com.android.contacts.list.JoinContactListAdapter: int getItemViewType(int,int)>  -> _SOURCE_
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServiceClassName()>  -> _SOURCE_
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache create(int)>  -> _SOURCE_
<com.android.vcard.VCardProperty: java.util.Map getParameterMap()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: int getItemViewType(int,int)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: int getEntryCount(boolean)>  -> _SOURCE_
<com.android.providers.contacts.AbstractContactsProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()>  -> _SOURCE_
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: java.lang.String getText()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingLeft()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailDisplayUtils$DefaultImageGetter: android.graphics.drawable.Drawable getDrawable(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedRawContactIds()>  -> _SOURCE_
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getCompany()>  -> _SOURCE_
<com.android.contacts.test.InjectedServices: java.lang.Object getSystemService(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,long)>  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: int getViewGroupLabelResId()>  -> _SOURCE_
<com.android.contacts.widget.IndexerListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$SuggestionEditConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.model.dataitem.WebsiteDataItem: java.lang.String getUrl()>  -> _SOURCE_
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get()>  -> _SOURCE_
<com.android.contacts.quickcontact.ResolveCache: android.content.pm.ResolveInfo getBestResolve(android.content.Intent,java.util.List)>  -> _SOURCE_
<com.android.vcard.VCardEntry$AndroidCustomData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.group.GroupDetailFragment: long getGroupId()>  -> _SOURCE_
<com.android.contacts.list.ContactListFilter: java.lang.String getId()>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexContactIds()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getId()>  -> _SOURCE_
<com.android.contacts.detail.ActionsViewContainer: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>  -> _SOURCE_
<com.android.mms.data.ContactList: java.lang.String[] getNumbers(boolean)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: int getViewType()>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallLogMessageId()>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticGivenName()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getDataMimeType(long)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: android.content.CursorLoader createCursorLoader()>  -> _SOURCE_
<com.android.providers.contacts.ReorderingCursorWrapper: long getLong(int)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCurrentCountryIso()>  -> _SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: com.android.contacts.group.GroupEditorFragment$Member getItem(int)>  -> _SOURCE_
<com.android.contacts.group.GroupListItem: java.lang.String getTitle()>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: long getTimestamp()>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getAltDisplayName()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: int getAggregationMode(long)>  -> _SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getPhoneticName()>  -> _SOURCE_
<com.android.contacts.list.PostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.CharSequence getDisplayName(android.content.Context,com.android.contacts.model.Contact)>  -> _SOURCE_
<com.android.providers.contacts.CountryMonitor: java.lang.String getCountryIso()>  -> _SOURCE_
<com.android.contacts.group.GroupBrowseListAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.mms.data.Contact: android.net.Uri getUri()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getPriority()>  -> _SOURCE_
<com.android.contacts.editor.EventFieldEditorView: com.android.contacts.model.account.AccountType$EditType getType()>  -> _SOURCE_
<com.android.contacts.util.AccountsListAdapter: com.android.contacts.model.account.AccountWithDataSet getItem(int)>  -> _SOURCE_
<com.android.contacts.widget.IndexerListAdapter: int getIndexedPartition()>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getDirectoryDisplayName()>  -> _SOURCE_
<com.android.contacts.calllog.ContactInfoHelper: com.android.contacts.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.list.JoinContactListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccountTypes(boolean)>  -> _SOURCE_
<com.android.contacts.list.ContactsRequest: int getActionCode()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)>  -> _SOURCE_
<com.android.contacts.list.ContactTileView: android.view.View$OnClickListener createClickListener()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getMimeEntries(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.SearchIndexManager: java.util.List splitIntoFtsTokens(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String[] getColumnNames()>  -> _SOURCE_
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getDisplayName()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: android.graphics.drawable.Drawable getDisplayIcon(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: android.database.sqlite.SQLiteDatabase getDatabase(boolean)>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: java.lang.String getResPackage()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: java.lang.String getTitle()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix: java.lang.String getTitle()>  -> _SOURCE_
<com.android.providers.contacts.ContactDirectoryManager: int scanAllPackages()>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getCustomRingtone()>  -> _SOURCE_
<com.android.providers.contacts.PhotoProcessor: int getMaxThumbnailPhotoDim()>  -> _SOURCE_
<com.android.vcard.VCardProperty: java.lang.String getRawValue()>  -> _SOURCE_
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: android.view.View getDivider()>  -> _SOURCE_
<com.android.contacts.model.dataitem.DataItem: java.lang.String getKindString()>  -> _SOURCE_
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment: int getFirstListItemOffset()>  -> _SOURCE_
<com.android.contacts.ContactPhotoManagerImpl$Request: int getRequestedExtent()>  -> _SOURCE_
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountName()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneLabel()>  -> _SOURCE_
<com.android.contacts.group.GroupDetailFragment: android.net.Uri getGroupUri()>  -> _SOURCE_
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getCompressingCollator()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailPhotoSetter: android.view.View$OnClickListener setupContactPhotoForClick(android.content.Context,com.android.contacts.model.Contact,android.widget.ImageView,boolean)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$SipAddressKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.editor.KindSectionView: int getEditorCount()>  -> _SOURCE_
<com.android.contacts.calllog.ExtendedCursor: int getCount()>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: android.content.Context getDataSourceContext()>  -> _SOURCE_
<com.android.providers.contacts.ContactsTransaction: android.database.sqlite.SQLiteDatabase getDbForTag(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: int getMimeEntriesCount(java.lang.String,boolean)>  -> _SOURCE_
<com.android.contacts.calllog.ExtendedCursor: short getShort(int)>  -> _SOURCE_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getExtraInfo()>  -> _SOURCE_
<com.android.vcard.VCardEntry$NameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.providers.contacts.ReorderingCursorWrapper: int getType(int)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCountryIso()>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V21: java.util.Set getAvailableEncodingSet()>  -> _SOURCE_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getGroupMetaData()>  -> _SOURCE_
<com.android.providers.contacts.ReorderingCursorWrapper: float getFloat(int)>  -> _SOURCE_
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.RawContact getRawContact()>  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: java.util.List getExtensionPackageNames()>  -> _SOURCE_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: java.lang.Object[] getRow()>  -> _SOURCE_
<com.android.contacts.group.GroupBrowseListAdapter: com.android.contacts.group.GroupListItem getItem(int)>  -> _SOURCE_
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getCompleteValues()>  -> _SOURCE_
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorUtils: java.util.List getSavedAccounts()>  -> _SOURCE_
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingTop()>  -> _SOURCE_
<com.android.contacts.model.Contact: long getId()>  -> _SOURCE_
<com.android.vcard.VCardEntry$NoteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getGivenNames()>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServiceClassName()>  -> _SOURCE_
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)>  -> _SOURCE_
<com.android.contacts.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForOrganization()>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: android.widget.TextView getSnippetView()>  -> _SOURCE_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getSuffix()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)>  -> _SOURCE_
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getWhereClause()>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.editor.EventFieldEditorView: int getDefaultHourForBirthday()>  -> _SOURCE_
<com.android.providers.contacts.aggregation.util.NameDistance: float getDistance(byte[],byte[])>  -> _SOURCE_
<com.android.contacts.util.StreamItemEntry: java.lang.String getAccountType()>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: android.graphics.drawable.Drawable getIcon()>  -> _SOURCE_
<com.android.providers.contacts.HanziToPinyin: com.android.providers.contacts.HanziToPinyin getInstance()>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: int getDesiredClipPosition()>  -> _SOURCE_
<com.android.contacts.detail.PhotoSelectionHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()>  -> _SOURCE_
<com.android.contacts.editor.AggregationSuggestionEngine: int getSuggestedContactCount()>  -> _SOURCE_
<com.android.contacts.calllog.ExtendedCursor: double getDouble(int)>  -> _SOURCE_
<com.android.contacts.list.ContactListAdapter: java.lang.String getSelectedContactLookupKey()>  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getInviteContactActivityClassName()>  -> _SOURCE_
<com.android.providers.contacts.ContactLocaleUtils: java.lang.String getSortKey(java.lang.String,int)>  -> _SOURCE_
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)>  -> _SOURCE_
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>  -> _SOURCE_
<com.android.contacts.quickcontact.DataAction: android.content.Intent getAlternateIntent()>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$Member: long getRawContactId()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)>  -> _SOURCE_
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>  -> _SOURCE_
<gov.nist.javax.sip.header.Contact: int getExpires()>  -> _SOURCE_
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: long getWritableEntityId()> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS  -> _SOURCE_
<com.android.contacts.list.AccountFilterActivity: java.util.List access$100(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.HanziToPinyin: java.util.ArrayList get(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemPhotoActivity()>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getGroupCount()>  -> _SOURCE_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getMiddleName()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$GroupMembershipKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.providers.contacts.DataRowHandlerForEmail: int getTypeRank(int)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getInstance(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.ContactDirectoryManager: java.util.Set getDirectoryProviderPackages(android.content.pm.PackageManager)>  -> _SOURCE_
<com.android.vcard.VCardEntry$AnniversaryData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.model.dataitem.ImDataItem: int getChatCapability()>  -> _SOURCE_
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.lang.String getSortKey(java.lang.String)>  -> _SOURCE_
<com.android.contacts.detail.StreamItemAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)>  -> _SOURCE_
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getPhoneticNameEditor()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQuantityText(int,int,int)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.calllog.IntentProvider$1: android.content.Intent getIntent(android.content.Context)>  -> _SOURCE_
<com.android.contacts.calllog.IntentProvider$2: android.content.Intent getIntent(android.content.Context)>  -> _SOURCE_
<com.android.contacts.calllog.IntentProvider$3: android.content.Intent getIntent(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$EventKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: int getViewGroupLabelResId()>  -> _SOURCE_
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)>  -> _SOURCE_
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createThreadPoolExecutor()>  -> _SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getContent()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getAfter()>  -> _SOURCE_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> android.permission.READ_CONTACTS android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: boolean getDisplayPhotos()>  -> _SOURCE_
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry()>  -> _SOURCE_
<com.android.contacts.model.dataitem.SipAddressDataItem: java.lang.String getSipAddress()>  -> _SOURCE_
<com.android.providers.contacts.TransactionContext: java.util.Set getInsertedRawContactIds()>  -> _SOURCE_
<com.android.contacts.calllog.ExtendedCursor: int getInt(int)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence inflateUsing(android.content.Context,android.content.ContentValues)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.String getInviteContactActivityClassName()>  -> _SOURCE_
<com.android.contacts.calllog.CallDetailHistoryAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.editor.LabeledEditorView: android.app.Dialog createDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getPositionForSection(int)>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: java.lang.CharSequence getLabel()>  -> _SOURCE_
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getChildrenCount(int)>  -> _SOURCE_
<com.android.providers.contacts.DataRowHandler: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)>  -> _SOURCE_
<com.android.contacts.group.GroupListItem: java.lang.String getAccountType()>  -> _SOURCE_
<com.android.contacts.group.GroupListItem: java.lang.String getDataSet()>  -> _SOURCE_
<com.android.contacts.list.ContactTilePhoneFrequentView: int getApproximateImageSize()>  -> _SOURCE_
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> com.android.voicemail.permission.ADD_VOICEMAIL android.permission.READ_CALL_LOG  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getContactId(long)>  -> _SOURCE_
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getReturnCallIntentProvider(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getFirstWritableRawContact(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$PhoneActionInflater: int getTypeLabelResource(java.lang.Integer)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  -> _SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindGroupMembership(android.content.Context)>  -> _SOURCE_
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get(long,java.util.concurrent.TimeUnit)>  -> _SOURCE_
<com.android.contacts.util.StreamItemPhotoEntry: java.lang.String getPhotoUri()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getAttribution(android.content.Context,com.android.contacts.model.Contact)>  -> _SOURCE_
<com.android.vcard.VCardProperty: java.util.List getValueList()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewContactNotifyServiceClassName()>  -> _SOURCE_
<com.android.vcard.VCardEntry$PhotoData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.editor.AggregationSuggestionEngine: android.os.Handler getHandler()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String,java.lang.Integer)>  -> _SOURCE_
<com.android.contacts.test.InjectedServices: android.content.ContentResolver getContentResolver()>  -> _SOURCE_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getContactId()>  -> _SOURCE_
<com.android.contacts.preference.ContactsPreferences: int getDefaultSortOrder()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: int getCount()>  -> _SOURCE_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getRawContactId()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: android.content.Context getContext()>  -> _SOURCE_
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache getInstance(android.content.Context)>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: int getPinnedHeaderCount()>  -> _SOURCE_
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)>  -> _SOURCE_
<com.android.contacts.datepicker.DatePicker$SavedState: int getYear()>  -> _SOURCE_
<com.android.contacts.quickcontact.DataAction: android.graphics.drawable.Drawable getAlternateIcon()>  -> _SOURCE_
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(android.content.Context,int,boolean)>  -> _SOURCE_
<com.android.contacts.list.ContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.vcard.CancelActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>  -> _SOURCE_
<android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)>  -> _SOURCE_
<com.android.providers.contacts.ContactLocaleUtils: com.android.providers.contacts.ContactLocaleUtils getIntance()>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.group.SuggestedMemberListAdapter: android.widget.Filter getFilter()>  -> _SOURCE_
<com.android.contacts.vcard.ImportProcessor: int getType()>  -> _SOURCE_
<com.android.contacts.ContactsActivity: java.lang.Object getSystemService(java.lang.String)>  -> _SOURCE_
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.String getAsString(java.lang.String)>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: int getItemViewType(int)>  -> _SOURCE_
<com.android.contacts.list.ContactListItemView: int getDefaultPhotoViewSize()>  -> _SOURCE_
<com.android.contacts.widget.IndexerListAdapter: java.lang.Object[] getSections()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredPostal()>  -> _SOURCE_
<com.android.contacts.group.GroupBrowseListAdapter: int getCount()>  -> _SOURCE_
<gov.nist.javax.sip.header.Contact: java.lang.String getSipInstanceParam()>  -> _SOURCE_
<com.android.contacts.widget.IndexerListAdapter: android.widget.SectionIndexer getIndexer()>  -> _SOURCE_
<com.android.contacts.ContactPhotoManagerImpl$Request: java.lang.Object getKey()>  -> _SOURCE_
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListView: int getPositionAt(int)>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: com.android.contacts.list.ContactListFilter getItem(int)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getEmailType()>  -> _SOURCE_
<com.android.contacts.list.DirectoryPartition: java.lang.String getDisplayName()>  -> _SOURCE_
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager createContactPhotoManager(android.content.Context)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: long getId()>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getPhotoUri()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getTypeColumn()>  -> _SOURCE_
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getName()>  -> _SOURCE_
<com.android.contacts.ContactPhotoManagerImpl$Request: android.net.Uri getUri()>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailContentProvider$UriData createUriData(android.net.Uri)>  -> _SOURCE_
<com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask$2: int getMaximumScrollableHeaderOffset()>  -> _SOURCE_
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V40: int getVersion()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: java.lang.String[] getDefaultProjection(android.net.Uri)>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V30: int getVersion()>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: int getNumFrequents()>  -> _SOURCE_
<com.android.vcard.VCardProperty: java.util.Collection getParameters(java.lang.String)>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V21: int getVersion()>  -> _SOURCE_
<com.android.contacts.calllog.ExtendedCursor: java.lang.String[] getColumnNames()>  -> _SOURCE_
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V21: java.lang.String getLine()>  -> _SOURCE_
<com.android.contacts.preference.ContactsPreferences: int getDisplayOrder()>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V30: java.lang.String getLine()>  -> _SOURCE_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: int getInt(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.dataitem.GroupMembershipDataItem: long getGroupRowId()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNormalizedNumber()>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>  -> _SOURCE_
<com.android.contacts.list.ContactsRequest: java.lang.String getQueryString()>  -> _SOURCE_
<com.android.contacts.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.editor.AggregationSuggestionEngine: java.util.List getSuggestions()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: java.lang.String getQueryString()>  -> _SOURCE_
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getItemViewType(int)>  -> _SOURCE_
<com.android.contacts.group.GroupEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.vcard.VCardService$MyBinder: com.android.contacts.vcard.VCardService getService()>  -> _SOURCE_
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getCollectionName()>  -> _SOURCE_
<com.android.contacts.socialwidget.SocialWidgetSettings: com.android.contacts.socialwidget.SocialWidgetSettings getInstance()>  -> _SOURCE_
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.contacts.list.DirectoryPartition: int getStatus()>  -> _SOURCE_
<com.android.contacts.util.ExpirableCache: java.lang.Object getPossiblyExpired(java.lang.Object)>  -> _SOURCE_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getBestValidType(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,boolean,int)>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getDefaultAccount()>  -> _SOURCE_
<com.android.providers.contacts.NameSplitter: int getAdjustedNameStyleBasedOnPhoneticNameStyle(int,int)>  -> _SOURCE_
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getDataSet()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getFormattedPhoneNumber()>  -> _SOURCE_
<com.android.contacts.model.RawContact: java.lang.String getAccountTypeString()>  -> _SOURCE_
<com.android.contacts.editor.SplitContactConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)>  -> _SOURCE_
<com.android.contacts.ContactsActivity: android.app.Fragment getFragment(int)>  -> _SOURCE_
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.String,boolean,boolean)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.mms.data.Contact: java.lang.String getNameAndNumber()>  -> _SOURCE_
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getComplexityCollator()>  -> _SOURCE_
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$ImKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getCallingPackage()> com.android.voicemail.permission.ADD_VOICEMAIL  -> _SOURCE_
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getNameEditor()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingRight()>  -> _SOURCE_
<com.android.contacts.list.DirectoryPartition: long getDirectoryId()>  -> _SOURCE_
<com.android.contacts.group.GroupListItem: int getMemberCount()>  -> _SOURCE_
<com.android.mms.data.Contact: android.graphics.drawable.Drawable getAvatar(android.content.Context,android.graphics.drawable.Drawable)>  -> _SOURCE_
<com.android.contacts.interactions.ImportExportDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: int getCount()>  -> _SOURCE_
<com.android.vcard.VCardComposer: int getCount()>  -> _SOURCE_
<com.android.contacts.model.RawContact: com.android.contacts.model.AccountTypeManager getAccountTypeManager()>  -> _SOURCE_
<com.android.vcard.VCardEntry$BirthdayData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getPrimaryEntry(java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)>  -> _SOURCE_
<com.android.mms.data.Contact: long getRecipientId()>  -> _SOURCE_
<com.android.vcard.VCardProperty: java.lang.String getName()>  -> _SOURCE_
<com.android.mms.data.Contact: java.lang.String getNumber()>  -> _SOURCE_
<com.android.contacts.util.StreamItemPhotoEntry: long getId()>  -> _SOURCE_
<com.android.contacts.list.JoinContactListAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$EventActionInflater: int getTypeLabelResource(java.lang.Integer)>  -> _SOURCE_
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticMiddleName()>  -> _SOURCE_
<com.android.contacts.util.DataStatus: int getPresence()>  -> _SOURCE_
<com.android.contacts.model.RawContact: java.lang.String getDataSet()>  -> _SOURCE_
<com.android.contacts.voicemail.VoicemailPlaybackPresenter$FetchResultHandler: java.lang.Runnable getTimeoutRunnable()>  -> _SOURCE_
<com.android.contacts.list.ProfileAndContactsLoader$1: android.os.Bundle getExtras()>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.util.List getExtensionPackageNames()>  -> _SOURCE_
<com.android.contacts.activities.DialtactsActivity: java.lang.String getCallOrigin()>  -> _SOURCE_
<com.android.vcard.VCardEntry$SipData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.providers.contacts.DataRowHandler: long getMimeTypeId()>  -> _SOURCE_
<com.android.contacts.list.ContactsSectionIndexer: int getPositionForSection(int)>  -> _SOURCE_
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getCustomProtocol()>  -> _SOURCE_
<com.android.contacts.list.ContactTileView: android.net.Uri getLookupUri()>  -> _SOURCE_
<com.android.vcard.VCardEntryCommitter: java.util.ArrayList getCreatedUris()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$SimpleInflater: java.lang.String getColumnNameForTest()>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownValueSet()>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailUpdatesFragment: int getFirstListItemOffset()>  -> _SOURCE_
<com.android.contacts.model.dataitem.DataItem: int getKindTypeColumn()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()>  -> _SOURCE_
<com.android.providers.contacts.AccountWithDataSet: com.android.providers.contacts.AccountWithDataSet get(java.lang.String,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getLabelColumn()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment: com.android.contacts.editor.BaseRawContactEditorView getRawContactEditorView(long)>  -> _SOURCE_
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()>  -> _SOURCE_
<com.android.contacts.model.dataitem.DataItem: long getId()>  -> _SOURCE_
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getCreateContactActivityClassName()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)>  -> _SOURCE_
<com.android.contacts.util.ThemeUtils: int getAttribute(android.content.res.Resources$Theme,int)>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: int getCount()>  -> _SOURCE_
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getMe(boolean)>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: java.util.Locale getLocale()>  -> _SOURCE_
<com.android.contacts.model.account.BaseAccountType$NoteKindBuilder: java.lang.String getTagName()>  -> _SOURCE_
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>  -> _SOURCE_
<com.android.contacts.util.ImageViewDrawableSetter: android.widget.ImageView getTarget()>  -> _SOURCE_
<com.android.contacts.TypePrecedence: int getTypePrecedence(java.lang.String,int)>  -> _SOURCE_
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownTypeSet()>  -> _SOURCE_
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactsDatabaseHelper getThreadActiveDatabaseHelperForTest()>  -> _SOURCE_
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getDisplayName()>  -> _SOURCE_
<com.android.contacts.detail.StreamItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getDisplayPhoto()>  -> _SOURCE_
<com.android.providers.contacts.DefaultCallLogInsertionHelper: com.android.providers.contacts.DefaultCallLogInsertionHelper getInstance(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.dataitem.DataKind getDataKind()>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getTokens()>  -> _SOURCE_
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: int getMaxThumbnailDim()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForPhone()>  -> _SOURCE_
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getProfilePhotoStore()>  -> _SOURCE_
<com.android.contacts.list.DirectoryListLoader: android.database.Cursor loadInBackground()>  -> _SOURCE_
<com.android.contacts.vcard.ExportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getCurrentType(com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.dataitem.DataKind)>  -> _SOURCE_
<com.android.contacts.group.GroupBrowseListFragment: android.database.Cursor access$302(com.android.contacts.group.GroupBrowseListFragment,android.database.Cursor)>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForIm()>  -> _SOURCE_
<com.android.contacts.calllog.DefaultVoicemailNotifier: com.android.contacts.calllog.DefaultVoicemailNotifier getInstance(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableMap getStatuses()>  -> _SOURCE_
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getSubtitle()>  -> _SOURCE_
<com.android.vcard.VCardEntryCounter: int getCount()>  -> _SOURCE_
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.list.ContactTileAdapter: int getFrequentHeaderPosition()>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailData()>  -> _SOURCE_
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> android.permission.READ_PROFILE  -> _SOURCE_
<com.android.contacts.detail.PhotoSelectionHandler: long getWritableEntityId()> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS  -> _SOURCE_
<com.android.contacts.util.AccountsListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getInviteContactActionLabel(android.content.Context)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemActivity()>  -> _SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> android.permission.READ_CONTACTS android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedHorizontalScrollLength()>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: int getSortOrder()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: java.util.Set getAllAccountsWithDataSets()>  -> _SOURCE_
<com.android.contacts.model.dataitem.DataItem: android.content.ContentValues getContentValues()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getPhotoStore()>  -> _SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub: com.android.internal.telephony.IIccPhoneBook asInterface(android.os.IBinder)>  -> _SOURCE_
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getDisplayName()>  -> _SOURCE_
<com.android.contacts.model.Contact: java.lang.String getDisplayName()>  -> _SOURCE_
<com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder: com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder getDigitsQueryBuilder(java.lang.String)>  -> _SOURCE_
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: android.graphics.drawable.Drawable getIcon()>  -> _SOURCE_
<com.android.vcard.VCardEntry$PhoneData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>  -> _SOURCE_
<com.android.contacts.list.ContactListAdapter: long getSelectedContactDirectoryId()>  -> _SOURCE_
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>  -> _SOURCE_
<com.android.contacts.model.RawContact: java.lang.Long getId()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: int getDisplayNameSourceForMimeTypeId(int)>  -> _SOURCE_
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.account.AccountType getAccountType()>  -> _SOURCE_
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.Iterable,boolean)>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)>  -> _SOURCE_
<com.android.providers.contacts.MemoryCursor: java.lang.String[] getColumnNames()>  -> _SOURCE_
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandler(java.lang.String)>  -> _SOURCE_
<com.android.vcard.VCardComposer: java.lang.String createOneEntry()>  -> _SOURCE_
<com.android.providers.contacts.ContactsDatabaseHelper: long getPackageId(java.lang.String)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListFragment: int getSortOrder()>  -> _SOURCE_
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: java.lang.String getCurrentPhotoFile()>  -> _SOURCE_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getPrefix()>  -> _SOURCE_
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getItemViewType(int)>  -> _SOURCE_
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getContactsCount()>  -> _SOURCE_
<com.android.contacts.datepicker.DatePicker: int getYear()>  -> _SOURCE_
<com.android.mms.data.Contact: boolean getSendToVoicemail()>  -> _SOURCE_
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SOURCE_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> android.permission.READ_CONTACTS android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.contacts.activities.ContactEditorActivity: com.android.contacts.util.DialogManager getDialogManager()>  -> _SOURCE_
<com.android.contacts.preference.DisplayOrderPreference: java.lang.CharSequence getSummary()>  -> _SOURCE_
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getNormalizedBitmap(android.graphics.Bitmap,int,boolean)>  -> _SOURCE_
<com.android.providers.contacts.ContactDirectoryManager: java.lang.String providerDescription(android.content.pm.ProviderInfo)>  -> _SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)>  -> _SOURCE_
<com.android.contacts.datepicker.DatePicker$SavedState: int getDay()>  -> _SOURCE_
<com.android.contacts.util.DialogManager: android.app.Dialog onCreateDialog(int,android.os.Bundle)>  -> _SOURCE_
<com.android.contacts.model.RawContact: java.lang.String getAccountName()>  -> _SOURCE_
<com.android.providers.contacts.VoicemailContentTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.contacts.util.StructuredPostalUtils: android.content.Intent getViewPostalAddressIntent(java.lang.String)>  -> _SOURCE_
<com.android.contacts.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)>  -> _SOURCE_
<com.android.contacts.detail.StreamItemAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.contacts.ContactSaveService: java.lang.Object getSystemService(java.lang.String)>  -> _SOURCE_
<com.android.contacts.model.account.AccountType: java.lang.String getCreateContactActivityClassName()>  -> _SOURCE_
<com.android.contacts.model.dataitem.EmailDataItem: java.lang.String getData()>  -> _SOURCE_
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.contacts.quickcontact.ResolveCache: android.graphics.drawable.Drawable getIcon(com.android.contacts.quickcontact.Action)>  -> _SOURCE_
<com.android.contacts.model.ContactLoader: android.net.Uri getLookupUri()>  -> _SOURCE_
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getFamilyName()>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)> android.permission.READ_CALENDAR  -> _SOURCE_
<com.android.calendar.EventRecurrenceFormatter: java.lang.String getRepeatString(android.content.res.Resources,com.android.calendarcommon2.EventRecurrence)>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getViewAt(int)>  -> _SOURCE_
<com.android.calendar.month.SimpleWeekView: int getFirstJulianDay()>  -> _SOURCE_
<com.android.calendar.Utils: long getTardis()>  -> _SOURCE_
<java.util.Calendar: int getActualMinimum(int)>  -> _SOURCE_
<com.android.calendar.month.SimpleWeeksAdapter: android.text.format.Time getSelectedDay()>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2002(com.android.calendar.EventInfoFragment,android.database.Cursor)>  -> _SOURCE_
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)>  -> _SOURCE_
<android.widget.CalendarView: int getDateTextAppearance()>  -> _SOURCE_
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> android.permission.READ_CALENDAR  -> _SOURCE_
<com.android.calendar.TimezoneAdapter: int getRowById(java.lang.String)>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String[] getSharedPreference(android.content.Context,java.lang.String,java.lang.String[])>  -> _SOURCE_
<com.android.calendar.Event: java.lang.String getTitleAndLocation()>  -> _SOURCE_
<com.android.calendar.alerts.AlertUtils: android.content.SharedPreferences getFiredAlertsTable(android.content.Context)>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: long getStartMillis()>  -> _SOURCE_
<com.android.calendar.Utils: int getDeclinedColorFromColor(int)>  -> _SOURCE_
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.calendar.event.EditEventView$TitleAdapter: int getCount()>  -> _SOURCE_
<android.widget.CalendarView$WeekView: java.util.Calendar getFirstDay()>  -> _SOURCE_
<com.android.calendar.alerts.AlertReceiver: android.content.Intent createEmailIntent(android.content.Context,long,java.lang.String)>  -> _SOURCE_
<java.util.Calendar: java.util.Calendar getInstance()>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String[] getQuickResponses(android.content.Context)>  -> _SOURCE_
<com.android.providers.calendar.CalendarProvider2: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderPositionFromItemPosition(int)>  -> _SOURCE_
<com.android.providers.calendar.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$900(com.android.calendar.EventInfoFragment)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: long getItemId(int)>  -> _SOURCE_
<java.util.GregorianCalendar: int getLeastMaximum(int)>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getViewTypeCount()>  -> _SOURCE_
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.providers.calendar.CalendarDatabaseHelper getInstance(android.content.Context)>  -> _SOURCE_
<android.widget.CalendarView: int getWeekDayTextAppearance()>  -> _SOURCE_
<com.android.calendar.event.EditEventHelper: long constructDefaultStartTime(long)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>  -> _SOURCE_
<com.android.calendar.month.MonthByWeekAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<android.widget.CalendarView$WeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.calendar.AsyncQueryService: int getNextToken()>  -> _SOURCE_
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.calendar.DayView$ScrollInterpolator: float getInterpolation(float)>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.String access$500(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo getAdapterInfoByPosition(int)>  -> _SOURCE_
<com.android.calendarcommon2.Duration: long getMillis()>  -> _SOURCE_
<com.android.calendar.Utils: int getWeeksSinceEpochFromJulianDay(int,int)>  -> _SOURCE_
<com.android.calendar.Utils: int getSharedPreference(android.content.Context,java.lang.String,int)>  -> _SOURCE_
<com.android.calendar.DayFragment: long getSelectedTimeInMillis()>  -> _SOURCE_
<com.android.providers.calendar.MetaData: com.android.providers.calendar.MetaData$Fields getFieldsLocked()>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: com.android.exchange.utility.CalendarUtilities$TimeZoneDate getTimeZoneDateFromSystemTime(byte[],int)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaListView: long getFirstVisibleTime(com.android.calendar.agenda.AgendaWindowAdapter$EventInfo)>  -> _SOURCE_
<com.android.calendar.DayFragment: long getSupportedEventTypes()>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account)>  -> _SOURCE_
<com.android.calendar.DayOfMonthDrawable: int getOpacity()>  -> _SOURCE_
<com.android.calendar.Utils: int getWeekNumberFromTime(long,android.content.Context)>  -> _SOURCE_
<com.android.calendar.month.MonthByWeekFragment: long getSupportedEventTypes()>  -> _SOURCE_
<com.android.calendar.Utils: boolean getSharedPreference(android.content.Context,java.lang.String,boolean)>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$600(com.android.calendar.EventInfoFragment)>  -> _SOURCE_
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)>  -> _SOURCE_
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>  -> _SOURCE_
<com.android.calendar.month.SimpleWeeksAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.providers.calendar.QueryParameterUtils: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.util.HashMap getChanges()>  -> _SOURCE_
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>  -> _SOURCE_
<com.android.calendar.SearchActivity: long getSupportedEventTypes()>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getLoadingView()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: long getSelectedInstanceId()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: int getCount()>  -> _SOURCE_
<com.android.calendar.CalendarViewAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: android.content.DialogInterface$OnDismissListener access$3400(com.android.calendar.EventInfoFragment)>  -> _SOURCE_
<com.android.calendar.AbstractCalendarActivity: com.android.calendar.AsyncQueryService getAsyncQueryService()>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getDisplayedTimezone(long,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.calendar.CalendarController: long getEventId()>  -> _SOURCE_
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> android.permission.READ_CALENDAR  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionHour(java.util.GregorianCalendar)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)> android.permission.READ_CALENDAR  -> _SOURCE_
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>  -> _SOURCE_
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<java.util.Calendar: int getActualMaximum(int)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: int getCount()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: int getItemViewType(int)>  -> _SOURCE_
<com.android.providers.calendar.CalendarProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)>  -> _SOURCE_
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> android.permission.READ_CALENDAR  -> _SOURCE_
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: java.lang.String getString(byte[],int,int)>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(android.content.Context,android.content.Entity,int,java.lang.String,com.android.emailcommon.provider.Account)>  -> _SOURCE_
<android.widget.CalendarView: int getUnfocusedMonthDateColor()>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: int getWord(byte[],int)>  -> _SOURCE_
<java.util.Calendar: java.lang.String toString()>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: long getItemId(int)>  -> _SOURCE_
<com.android.calendar.TimezoneAdapter: java.lang.CharSequence[][] getAllTimezones()>  -> _SOURCE_
<com.android.calendar.event.EditEventFragment: long getSupportedEventTypes()>  -> _SOURCE_
<com.android.calendar.CalendarController: long getDateFlags()>  -> _SOURCE_
<java.util.Calendar: int getMinimalDaysInFirstWeek()>  -> _SOURCE_
<com.android.calendar.Utils: int getDaysPerWeek(android.content.Context)>  -> _SOURCE_
<android.widget.CalendarView: int getFocusedMonthDateColor()>  -> _SOURCE_
<com.android.calendar.DayView: long getSelectedTimeInMillis()>  -> _SOURCE_
<com.android.calendar.Utils: long getNextMidnight(android.text.format.Time,long,java.lang.String)>  -> _SOURCE_
<com.android.calendar.Event: long getEndMillis()>  -> _SOURCE_
<android.widget.CalendarView: long getMaxDate()>  -> _SOURCE_
<com.android.calendar.CalendarController: int getPreviousViewType()>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getLaunchPendingIntentTemplate(android.content.Context)>  -> _SOURCE_
<com.android.calendar.month.SimpleWeeksAdapter: int getCount()>  -> _SOURCE_
<com.android.calendar.CalendarViewAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.calendar.DayView: int getFirstVisibleHour()>  -> _SOURCE_
<com.android.calendar.month.MonthWeekEventsView: int getDayIndexFromLocation(float)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: long getItemId(int)>  -> _SOURCE_
<android.widget.CalendarView: android.graphics.drawable.Drawable getSelectedDateVerticalBar()>  -> _SOURCE_
<com.android.providers.calendar.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SOURCE_
<com.android.calendar.Event: int getColumn()>  -> _SOURCE_
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getCollectionName()>  -> _SOURCE_
<com.android.calendar.Event: int getMaxColumns()>  -> _SOURCE_
<android.widget.CalendarView: int getFirstDayOfWeek()>  -> _SOURCE_
<com.android.calendar.CalendarController: long getTime()>  -> _SOURCE_
<com.android.calendar.Utils: int getDisplayColorFromColor(int)>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: long getUtcAllDayCalendarTime(long,java.util.TimeZone)>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getSharedPreference(android.content.Context,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: int getCount()>  -> _SOURCE_
<java.util.GregorianCalendar: int getGreatestMinimum(int)>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: long getEventId()>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>  -> _SOURCE_
<com.android.calendar.month.SimpleWeekView: int getFirstMonth()>  -> _SOURCE_
<android.widget.CalendarView: long getDate()>  -> _SOURCE_
<android.widget.CalendarView$WeeksAdapter: int getCount()>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: long getSupportedEventTypes()>  -> _SOURCE_
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)>  -> _SOURCE_
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> android.permission.READ_CALENDAR  -> _SOURCE_
<com.android.calendar.EventInfoFragment: long getEndMillis()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()>  -> _SOURCE_
<com.android.calendar.event.EditEventHelper: android.content.ContentValues getContentValuesFromModel(com.android.calendar.CalendarEventModel)>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getCount()>  -> _SOURCE_
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarAlarmManager getOrCreateCalendarAlarmManager()>  -> _SOURCE_
<com.android.calendar.AsyncQueryServiceHelper$OperationInfo: long getDelay(java.util.concurrent.TimeUnit)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int)>  -> _SOURCE_
<com.android.calendar.CalendarEventModel: java.lang.String getAttendeesString()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getFirstVisibleEvent()>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getSearchAuthority(android.content.Context)>  -> _SOURCE_
<com.android.calendar.CalendarController: com.android.calendar.CalendarController getInstance(android.content.Context)>  -> _SOURCE_
<java.util.GregorianCalendar: java.util.Date getGregorianChange()>  -> _SOURCE_
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<android.widget.CalendarView: int getWeekNumberColor()>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionMinute(java.util.GregorianCalendar)>  -> _SOURCE_
<com.android.providers.calendar.SQLiteContentProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderItemsNumber(int)>  -> _SOURCE_
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMinutes()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: int getStickyHeaderHeight()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<java.util.Calendar: java.util.Locale[] getAvailableLocales()>  -> _SOURCE_
<com.android.calendar.month.MonthWeekEventsView: android.text.format.Time getDayFromLocation(float)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getVisible(int)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> android.permission.READ_CALENDAR  -> _SOURCE_
<com.android.calendar.event.EditEventHelper: java.util.LinkedHashSet getAddressesFromList(java.lang.String,com.android.common.Rfc822Validator)>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getWidgetScheduledUpdateAction(android.content.Context)>  -> _SOURCE_
<java.util.Calendar: long getTimeInMillis()>  -> _SOURCE_
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>  -> _SOURCE_
<com.android.calendar.DayView: android.text.format.Time getSelectedTime()>  -> _SOURCE_
<java.util.Calendar: java.util.Date getTime()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: long getLocalAllDayCalendarTime(long,java.util.TimeZone)>  -> _SOURCE_
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMethod()>  -> _SOURCE_
<com.android.calendar.extensions.AllInOneMenuExtensions: java.lang.Integer getExtensionMenuResource(android.view.Menu)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.providers.calendar.CalendarProvider2: java.lang.String getTimezoneDatabaseVersion()>  -> _SOURCE_
<com.android.providers.calendar.CalendarCache: java.lang.String readDataLocked(android.database.sqlite.SQLiteDatabase,java.lang.String)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: long getInstanceId(int)>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: java.lang.String getUidFromGlobalObjId(java.lang.String)>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: boolean getDSTCalendars(java.util.TimeZone,java.util.GregorianCalendar[],java.util.GregorianCalendar[])>  -> _SOURCE_
<com.android.calendar.GeneralPreferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)>  -> _SOURCE_
<com.android.calendar.month.SimpleWeeksAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<android.widget.CalendarView$WeekView: int getMonthOfLastWeekDay()>  -> _SOURCE_
<java.util.GregorianCalendar: int getMaximum(int)>  -> _SOURCE_
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar getSelectedDay()>  -> _SOURCE_
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int,boolean)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderPosition(int)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: long getStartTime(int)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: long getSupportedEventTypes()>  -> _SOURCE_
<java.util.Calendar: java.util.TimeZone getTimeZone()>  -> _SOURCE_
<java.util.GregorianCalendar: int getActualMinimum(int)>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)>  -> _SOURCE_
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarProvider2 getInstance()>  -> _SOURCE_
<com.android.providers.calendar.CalendarAlarmManager: android.os.PowerManager$WakeLock getScheduleNextAlarmWakeLock()>  -> _SOURCE_
<com.android.calendar.CalendarController$EventInfo: int getResponse()>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: java.lang.CharSequence getLabelForType(java.lang.String)>  -> _SOURCE_
<com.android.calendar.Event: long getStartMillis()>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.Intent getLaunchFillInIntent(android.content.Context,long,long,long,boolean)>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2000(com.android.calendar.EventInfoFragment)>  -> _SOURCE_
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>  -> _SOURCE_
<com.android.calendar.CalendarViewAdapter: int getViewTypeCount()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()>  -> _SOURCE_
<com.android.calendar.DayView: int getEventsAlpha()>  -> _SOURCE_
<com.android.calendar.alerts.AlertActivity: android.database.Cursor access$002(com.android.calendar.alerts.AlertActivity,android.database.Cursor)>  -> _SOURCE_
<com.android.providers.calendar.CalendarDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>  -> _SOURCE_
<java.util.Calendar: java.lang.Object clone()>  -> _SOURCE_
<com.android.calendar.CalendarController: int getViewType()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: int getCursorPosition(int)>  -> _SOURCE_
<com.android.calendar.AllInOneActivity: long getSupportedEventTypes()>  -> _SOURCE_
<android.widget.CalendarView$WeekView: int getMonthOfFirstWeekDay()>  -> _SOURCE_
<com.android.calendar.month.SimpleWeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<java.util.Calendar: int getFirstDayOfWeek()>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$1802(com.android.calendar.EventInfoFragment,android.database.Cursor)>  -> _SOURCE_
<com.android.calendar.EditResponseHelper: int getWhichEvents()>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter$TabletCalendarItemBackgrounds: int[] getBackgrounds()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaListView: long getSelectedInstanceId()>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.Runnable access$800(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory,java.lang.String,android.content.BroadcastReceiver$PendingResult,int)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaFragment: long getSupportedEventTypes()>  -> _SOURCE_
<android.widget.CalendarView: int getWeekSeparatorLineColor()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaListView: android.view.View getFirstVisibleView()>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: android.database.Cursor access$102(com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment,android.database.Cursor)>  -> _SOURCE_
<android.widget.CalendarView: long getMinDate()>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getWidgetUpdateAction(android.content.Context)>  -> _SOURCE_
<java.util.GregorianCalendar: int getActualMaximum(int)>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getCount()>  -> _SOURCE_
<com.android.calendar.CalendarViewAdapter: int getCount()>  -> _SOURCE_
<com.android.calendar.CalendarViewAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)>  -> _SOURCE_
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$602(com.android.calendar.EventInfoFragment,android.database.Cursor)>  -> _SOURCE_
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaWindowAdapter: int getViewTypeCount()>  -> _SOURCE_
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>  -> _SOURCE_
<com.android.calendar.Utils: java.lang.String getVersionCode(android.content.Context)>  -> _SOURCE_
<com.android.calendar.month.SimpleWeekView: android.text.format.Time getDayFromLocation(float)>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)>  -> _SOURCE_
<com.android.calendar.EventInfoFragment: android.database.Cursor access$902(com.android.calendar.EventInfoFragment,android.database.Cursor)>  -> _SOURCE_
<com.android.calendar.DayView: android.text.format.Time getSelectedTimeForAccessibility()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaFragment: long getLastShowEventId()>  -> _SOURCE_
<com.android.calendar.alerts.AlertActivity: android.database.Cursor getItemForView(android.view.View)>  -> _SOURCE_
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getUpdateIntent(android.content.Context)>  -> _SOURCE_
<com.android.providers.calendar.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>  -> _SOURCE_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.graphics.drawable.Drawable getBackground(int,boolean)>  -> _SOURCE_
<java.util.Calendar: int get(int)>  -> _SOURCE_
<com.android.calendar.Utils: int getJulianMondayFromWeeksSinceEpoch(int)>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: int getItemViewType(int)>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: int getLong(byte[],int)>  -> _SOURCE_
<com.android.calendar.CalendarUtils: android.content.SharedPreferences getSharedPreferences(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.calendar.ExpandableTextView: java.lang.CharSequence getText()>  -> _SOURCE_
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderItemsCount(int)>  -> _SOURCE_
<com.android.exchange.utility.CalendarUtilities: long getMillisAtTimeZoneDateTransition(java.util.TimeZone,com.android.exchange.utility.CalendarUtilities$TimeZoneDate)>  -> _SOURCE_
<android.widget.CalendarView: int getShownWeekCount()>  -> _SOURCE_
<com.android.calendar.Utils: int getFirstDayOfWeek(android.content.Context)>  -> _SOURCE_
<java.util.GregorianCalendar: int getMinimum(int)>  -> _SOURCE_
<com.android.calendar.month.SimpleWeekView: int getLastMonth()>  -> _SOURCE_
<android.widget.CalendarView: boolean getShowWeekNumber()>  -> _SOURCE_
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>  -> _SOURCE_
<com.android.calendar.CalendarViewAdapter: int getItemViewType(int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()>  -> _SOURCE_
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserPassword()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesReceived(int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiMulticastTime(long,int)>  -> _SOURCE_
<gov.nist.javax.sip.address.UserInfo: java.lang.String getPassword()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getTimeAtCpuSpeedStep(int,int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getNeighboringCids(android.os.Message)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtime(long)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<android.webkit.WebSettingsClassic: boolean getDomStorageEnabled()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String,int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()> android.permission.BLUETOOTH  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getPackageStats()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean getMute()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getDevPersistBytes(long)>  -> _SOURCE_
<com.android.server.net.NetworkStatsCollection: long getTotalBytes()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: boolean getIccRecordsLoaded()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.util.List getAllCellInfo()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getWifiOnTime(long,int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: android.telephony.SignalStrength getSignalStrength()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: int getUid()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getInputEventCount(int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(int,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconMode()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getLowDischargeAmountSinceCharge()>  -> _SOURCE_
<android.webkit.WebSettings: boolean getSavePassword()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>  -> _SOURCE_
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccCard getIccCard()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)>  -> _SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCGI3GPP()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOnSinceCharge()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: boolean getDataOnRoamingEnabled()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  -> _SOURCE_
<com.android.internal.telephony.IccCardProxy: boolean getIccFdnEnabled()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String[] getIsimImpu()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.server.net.NetworkStatsCollection: long getFirstAtomicBucketMillis()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Timer: long getTotalTimeLocked(long,int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getRequestedMinimumPasswordLength()>  -> _SOURCE_
<com.android.server.net.NetworkStatsCollection: long getStartMillis()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTimeToNowLocked(long)>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()>  -> _SOURCE_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimeBattery()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getCallWaiting(android.os.Message)>  -> _SOURCE_
<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidPersistBytes(long)>  -> _SOURCE_
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)>  -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean getBoolean(java.lang.String,boolean,int)>  -> _SOURCE_
<com.android.server.net.NetworkStatsCollection: long getEndMillis()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.util.List getPendingMmiCodes()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(int,java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getLaunches(int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getGlobalWifiRunningTime(long,int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.util.List getPendingMmiCodes()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiScanTime(long,int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtimeLocked(long)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: int getHandle()>  -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: boolean getIccLockEnabled()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl getBatteryStats()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getStarts(int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLetters()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()>  -> _SOURCE_
<android.webkit.WebSettings: boolean getDatabaseEnabled()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getPidStats()>  -> _SOURCE_
<com.android.server.am.BatteryStatsService: com.android.internal.os.BatteryStatsImpl getActiveStatistics()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getPollInterval()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: boolean getMute()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalStrengthTime(int,long,int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: android.os.Handler getHandler()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getXtConfig()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledProtocols()>  -> _SOURCE_
<com.android.server.pm.Settings: int getComponentEnabledSettingLPr(android.content.ComponentName,int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCardApplicationStatus$AppType getCurrentUiccAppType()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getMessageWaitingIndicator()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getWakeTimerLocked(java.lang.String,int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: int getPhoneType()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>  -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesSent(int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledCipherSuites()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconMode()>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNumeric()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.webkit.WebSettingsClassic: boolean getJavaScriptEnabled()>  -> _SOURCE_
<android.webkit.WebSettingsClassic: boolean getPluginsEnabled()>  -> _SOURCE_
<com.android.internal.widget.LockSettingsService: long getLong(java.lang.String,long,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: boolean getMessageWaitingIndicator()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getScreenOnTime(long,int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getBluetoothOnTime(long,int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getSensorStats()>  -> _SOURCE_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$State getState()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: android.net.LinkProperties getLinkProperties(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call getCall()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOffSinceCharge()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: boolean getDataRoamingEnabled()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: int getUserActivityCount(int,int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getPhoneOnTime(long,int)>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumSymbols()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getPhoneDataConnectionCount(int,int)>  -> _SOURCE_
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int,long,long)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.util.Map getKernelWakelockStats()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)>  -> _SOURCE_
<com.android.server.pm.Settings: int getApplicationEnabledSettingLPr(java.lang.String,int)>  -> _SOURCE_
<android.webkit.WebSettingsClassic: boolean getSavePassword()>  -> _SOURCE_
<android.webkit.WebSettingsClassic: boolean getDatabaseEnabled()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getBackgroundCall()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getStarts(int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getAudioTurnedOnTime(long,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getHistoryBaseTime()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getXtPersistBytes(long)>  -> _SOURCE_
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: byte[] readFully(java.io.FileInputStream)>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()>  -> _SOURCE_
<android.webkit.WebSettings: boolean getLightTouchEnabled()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$State getState()>  -> _SOURCE_
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getPassword()>  -> _SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.Object getExtensionAccessInfo()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: android.net.LinkProperties getLinkProperties(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getCellBroadcastSmsConfig(android.os.Message)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: int getUpdateVersion()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: boolean getCallForwardingIndicator()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: int getPhoneType()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getStartCount()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumUpperCase()>  -> _SOURCE_
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledCipherSuites()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevel()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getForegroundCall()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getPhoneDataConnectionTime(int,long,int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccCard getIccCard()>  -> _SOURCE_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()>  -> _SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getAccessType()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getCurrentDataConnectionList()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLowerCase()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>  -> _SOURCE_
<com.android.internal.telephony.UiccCardApplication: boolean getIccFdnEnabled()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getWakelockStats()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: java.util.Map getServiceStats()>  -> _SOURCE_
<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>  -> _SOURCE_
<com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getDevConfig()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getScreenBrightnessTime(int,long,int)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()>  -> _SOURCE_
<android.webkit.WebSettingsClassic: boolean getAutoFillEnabled()>  -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: int getWakeups(int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.util.SparseArray getUidStats()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getDataRoamingEnabled()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorTime()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getCallForwardingOption(int,android.os.Message)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getPhoneSignalStrengthCount(int,int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$State getState()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidConfig()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Counter: int getCountLocked(int)>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordQuality()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CallTracker getCallTracker()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: int getNumberPresentation()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptime(long)>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getTimeCacheMaxAge()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptime()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getGlobalAlertBytes(long)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getForegroundTime(int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimePlugged()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesSent(int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: com.android.internal.os.BatteryStatsImpl getBatteryStats()>  -> _SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevelLocked()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOff()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()>  -> _SOURCE_
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone getActivePhone()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: java.util.List getAllCellInfo()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()>  -> _SOURCE_
<com.android.internal.telephony.DataConnectionTracker: boolean getAnyDataEnabled()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getLaunchTimeToNowLocked(long)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String[] getActiveApnTypes()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(int,java.lang.String)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: android.telephony.SignalStrength getSignalStrength()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconIndex()>  -> _SOURCE_
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long)>  -> _SOURCE_
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int)>  -> _SOURCE_
<android.webkit.WebSettings: boolean getPluginsEnabled()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State getState()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getAvailableNetworks(android.os.Message)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getUserTime(int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesReceived(int)>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidTagPersistBytes(long)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getHighDischargeAmountSinceCharge()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.rtp.AudioGroup getAudioGroup()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptimeMs()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTime(long,int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getDataRoamingEnabled()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()>  -> _SOURCE_
<android.webkit.WebSettingsClassic: boolean getHardwareAccelSkiaEnabled()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State getState()>  -> _SOURCE_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getVideoTurnedOnTime(long,int)>  -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalScanningTime(long,int)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getDefaultPhone()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOn()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getFullWifiLockTime(long,int)>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNonLetter()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  -> _SOURCE_
<android.webkit.WebSettings: boolean getDomStorageEnabled()>  -> _SOURCE_
<gov.nist.javax.sip.address.Authority: java.lang.String getPassword()>  -> _SOURCE_
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)>  -> _SOURCE_
<android.webkit.WebSettingsClassic: boolean getLightTouchEnabled()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevel()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledProtocols()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()>  -> _SOURCE_
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesReceived(int)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  -> _SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledProtocols()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getProcessStats()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getUnitTestMode()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: com.android.internal.os.BatteryStatsImpl getBatteryStats()>  -> _SOURCE_
<com.android.server.am.BatteryStatsService: byte[] getStatistics()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getDataCallList(android.os.Message)>  -> _SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getDSLLocation()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getMute()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getAllCellInfo()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: android.os.BatteryStats$Timer getWakeTime(int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiRunningTime(long,int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesSent(int)>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()>  -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()>  -> _SOURCE_
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: com.android.internal.os.BatteryStatsImpl getBatteryStats()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()>  -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$State getState()>  -> _SOURCE_
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidTagConfig()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getCpuSpeedSteps()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getOutgoingCallerIdDisplay(android.os.Message)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: android.os.BatteryStats$Uid$Proc$ExcessivePower getExcessivePower(int)>  -> _SOURCE_
<com.android.internal.telephony.IccCardProxy: boolean getIccLockEnabled()>  -> _SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCI3GPP2()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()>  -> _SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getSensorTimerLocked(int,boolean)>  -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: boolean getIsOnBattery()>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconIndex()>  -> _SOURCE_
<com.android.internal.telephony.PhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Timer: int getCountLocked(int)>  -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: java.util.List getAllCellInfo()>  -> _SOURCE_
<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.util.List getCurrentDataConnectionList()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked(long)>  -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: long getLong(java.lang.String,long,int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevelLocked()>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getSystemTime(int)>  -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getProcessWakeTime(int,int,long)>  -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<com.android.gallery3d.data.UriImage: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.ui.GLView: int getVisibility()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BytesBufferPool getBytesBufferPool()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: long getUnsignedLong(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getViewTypeCount()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasastore.PicasaStoreFacade getPicasaStoreFacade()>  -> _SOURCE_
<com.android.gallery3d.data.FilterEmptyPromptSet: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifData: int getStripCount()>  -> _SOURCE_
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getExpectedUsedBytes()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifData: byte[] getCompressedThumbnail()>  -> _SOURCE_
<com.android.gallery3d.data.FilterDeleteSet: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum: android.database.Cursor internalQuery(int,int)>  -> _SOURCE_
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap(int,int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.Face[] getFaces()>  -> _SOURCE_
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureWidth()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float,com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getGeometryOnlyImage()>  -> _SOURCE_
<com.android.gallery3d.ui.TiledScreenNail: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long)>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbum: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getCount()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.app.GalleryApp getApplication()>  -> _SOURCE_
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.cache.ImageLoader getImageLoader()>  -> _SOURCE_
<com.android.gallery3d.data.Face: android.graphics.Rect getPosition()>  -> _SOURCE_
<com.android.gallery3d.data.MtpClient: android.mtp.MtpObjectInfo getObjectInfo(java.lang.String,int)>  -> _SOURCE_
<com.android.gallery3d.ui.CropView: int getImageWidth()>  -> _SOURCE_
<com.android.gallery3d.provider.GalleryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbumSet: int getSubMediaSetCount()>  -> _SOURCE_
<com.android.gallery3d.util.ThreadPool$Worker: java.lang.Object get()>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbumSet: int getSubMediaSetCount()>  -> _SOURCE_
<com.android.gallery3d.app.ActivityState: float[] getBackgroundColor()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: int getOffset()>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int get()>  -> _SOURCE_
<com.android.gallery3d.util.LightCycleHelper: com.android.gallery3d.util.LightCycleHelper$PanoramaMetadata getPanoramaMetadata(android.content.Context,android.net.Uri)>  -> _SOURCE_
<com.android.gallery3d.exif.Rational: long getNominator()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMaxParameter()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getOriginalToScreen(boolean,float,float,float,float)>  -> _SOURCE_
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag getTag(short)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF unrotatedCropBounds()>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: int getCacheFlag()>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ZoomCache: android.graphics.Bitmap getImage(com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()>  -> _SOURCE_
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getLoadingState(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.PanelController getPanelController()>  -> _SOURCE_
<com.android.gallery3d.ui.ResourceTexture: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.ui.PhotoView: boolean getFilmMode()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: long getDateTaken(com.android.gallery3d.data.MediaObject)>  -> _SOURCE_
<com.android.gallery3d.ui.Paper: float[] getTransform(android.graphics.Rect,float)>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapLoader: android.graphics.Bitmap getBitmap()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: long getTotalTargetCacheSize()>  -> _SOURCE_
<com.android.gallery3d.ui.PreparePageFadeoutTexture: com.android.gallery3d.ui.RawTexture get()>  -> _SOURCE_
<com.android.gallery3d.app.TimeBar: int getPreferredHeight()>  -> _SOURCE_
<com.android.gallery3d.filtershow.HistoryAdapter: com.android.gallery3d.filtershow.presets.ImagePreset getLast()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageRotate: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.ui.PositionController: android.graphics.Rect getPosition(int)>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTileProvider: com.android.gallery3d.ui.ScreenNail getScreenNail()>  -> _SOURCE_
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaSet getMediaSet(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.net.Uri getUri()>  -> _SOURCE_
<com.android.gallery3d.app.AlbumSetPage: int getBackgroundColorId()>  -> _SOURCE_
<com.android.gallery3d.data.LocalImage: int getRotation()>  -> _SOURCE_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.data.DataManager getDataManager()>  -> _SOURCE_
<com.android.gallery3d.data.LocalVideo: int getMediaType()>  -> _SOURCE_
<com.android.gallery3d.filtershow.PanelController$Panel: int getPosition()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getCropBounds(android.graphics.Bitmap)>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbum: android.database.Cursor getItemCursor(android.content.ContentResolver,android.net.Uri,java.lang.String[],int)>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: int getMediaType()>  -> _SOURCE_
<com.android.gallery3d.data.SecureAlbum: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.ui.BasicTexture: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.data.LocalImage$LocalLargeImageRequest: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)>  -> _SOURCE_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: long getItemId(int)>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: int getTypeFromString(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.ui.GLView: int getMeasuredHeight()>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getOriginalBitmapLarge()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: int getImageRotation(int)>  -> _SOURCE_
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaItem getCoverItem(int)>  -> _SOURCE_
<com.android.gallery3d.data.LocalVideo: java.lang.String getFilePath()>  -> _SOURCE_
<com.android.gallery3d.data.UriImage: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object)>  -> _SOURCE_
<com.android.gallery3d.data.BytesBufferPool: com.android.gallery3d.data.BytesBufferPool$BytesBuffer get()>  -> _SOURCE_
<com.android.gallery3d.app.ManageCachePage: int getBackgroundColorId()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getScaleFactor()>  -> _SOURCE_
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: long getSize()>  -> _SOURCE_
<com.android.gallery3d.data.MediaDetails: java.lang.Object getDetail(int)>  -> _SOURCE_
<com.android.gallery3d.exif.ExifParser: com.android.gallery3d.exif.ExifTag getTag()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPhotoBounds()>  -> _SOURCE_
<com.android.gallery3d.common.OverScroller: float getCurrVelocity()>  -> _SOURCE_
<com.android.gallery3d.ui.GLView: int getMeasuredWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.gallery3d.ui.PositionController: int getImageAtEdges()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: int getDataSize()>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>  -> _SOURCE_
<com.android.gallery3d.data.MediaSource: long getTotalUsedCacheSize()>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem[] getMediaItemById(com.android.gallery3d.app.GalleryApp,boolean,java.util.ArrayList)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: int getDefaultBackgroundColor()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2600(android.net.Uri)>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,boolean)>  -> _SOURCE_
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.EntrySchema$ColumnInfo getColumn(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.ComboAlbumSet: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.ui.RawTexture: int getTextureWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.GLRootView: android.graphics.Matrix getCompensationMatrix()>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItems()>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTexture: android.graphics.Bitmap getBitmap()>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: long getTotalUsedCacheSize()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getParameter()>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.ui.CropView: int getImageHeight()>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView: int getVisibleStart()>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object get()>  -> _SOURCE_
<com.android.gallery3d.data.TagClustering: java.lang.String getClusterName(int)>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: int getLevelCount()>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbum: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: int getCount()>  -> _SOURCE_
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getUsedBytes()>  -> _SOURCE_
<com.android.gallery3d.data.ActionImage: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getPlayUri()>  -> _SOURCE_
<com.android.gallery3d.ui.AnimationTime: long get()>  -> _SOURCE_
<com.android.gallery3d.data.Face: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureHeight()>  -> _SOURCE_
<com.android.gallery3d.ui.ExtTexture: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.imageshow.ImageShow getMaster()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: int getElementSize(short)>  -> _SOURCE_
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2700(com.android.gallery3d.data.MediaObject)>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getUntranslatedStraightenCropBounds(android.graphics.RectF,float)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalUsedCacheSize(android.content.Context)>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapScreenNail: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbum: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoPage: int getBackgroundColorId()>  -> _SOURCE_
<com.android.gallery3d.ui.CropView: android.graphics.RectF getCropRectangle()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasasync.PicasaFacade getPicasaFacade()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getContentType(com.android.gallery3d.data.MediaObject)>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar: int getClusterTypeAction()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: byte[] getImageData()>  -> _SOURCE_
<com.android.gallery3d.anim.FloatAnimation: float get()>  -> _SOURCE_
<com.android.gallery3d.data.LocalImage: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getAuthority(android.content.Context)>  -> _SOURCE_
<com.android.gallery3d.ui.ResourceTexture: int getTextureHeight()>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.ExtTexture: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.app.TimeBar: int getBarHeight()>  -> _SOURCE_
<com.android.gallery3d.exif.CountedDataInputStream: int getReadByteCount()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum: long getCacheSize()>  -> _SOURCE_
<com.android.gallery3d.ui.GLView: int getComponentCount()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbumSet: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.ui.FlingScroller: int getFinalY()>  -> _SOURCE_
<com.android.gallery3d.ui.FlingScroller: int getFinalX()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getLocalGeoFlipMatrix(float,float)>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: short getTagId()>  -> _SOURCE_
<com.android.gallery3d.util.HelpUtils: android.content.Intent getHelpIntent(android.content.Context,int)>  -> _SOURCE_
<com.android.gallery3d.exif.IfdData: int getOffsetToNextIfd()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: java.lang.String getFilePath()>  -> _SOURCE_
<com.android.gallery3d.ui.NinePatchTexture: com.android.gallery3d.ui.NinePatchChunk getNinePatchChunk()>  -> _SOURCE_
<com.android.gallery3d.ui.FadeTexture: float getRatio()>  -> _SOURCE_
<com.android.gallery3d.ui.PhotoView$FullPicture: com.android.gallery3d.ui.PhotoView$Size getSize()>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Rect getOriginalBounds()>  -> _SOURCE_
<com.android.gallery3d.ui.ExtTexture: int getId()>  -> _SOURCE_
<com.android.gallery3d.data.SnailItem: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: com.adobe.xmp.XMPMeta getXmpObject()>  -> _SOURCE_
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifParser: int getStripSize()>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()>  -> _SOURCE_
<com.android.gallery3d.common.OverScroller: int getCurrX()>  -> _SOURCE_
<com.android.gallery3d.ui.ScrollerHelper: int getPosition()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMergeAlbum: int getTotalMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.ui.GLView: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.data.ComboAlbum: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getThumbPool()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: double getLatitude(com.android.gallery3d.data.MediaObject)>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbum: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: long getDateInMs()>  -> _SOURCE_
<com.android.gallery3d.data.MtpClient: java.util.List getDeviceList()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFiltersOnlyImage()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFilteredImage()>  -> _SOURCE_
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.Entry valuesToObject(android.content.ContentValues,com.android.gallery3d.common.Entry)>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.ui.PositionController: float getFilmRatio()>  -> _SOURCE_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getParent()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: int getLocalValue()>  -> _SOURCE_
<com.android.gallery3d.picasasource.FaceImage: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: int getCacheStatus()>  -> _SOURCE_
<com.android.gallery3d.ui.BasicTexture: int getTextureWidth()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.common.EntrySchema: int getColumnIndex(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getCurrentIndex()>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: long getCacheSize()>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.gallery3d.ui.GLView: float[] getBackgroundColor()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: int getUnsignedShort(int)>  -> _SOURCE_
<com.android.gallery3d.exif.CountedDataInputStream: java.nio.ByteOrder getByteOrder()>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView: int getVisibleEnd()>  -> _SOURCE_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.GalleryActionBar getGalleryActionBar()>  -> _SOURCE_
<com.android.gallery3d.data.TagClustering: java.util.ArrayList getCluster(int)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)>  -> _SOURCE_
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getFlipType()>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.data.FilterDeleteSet: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getGeoMatrix(android.graphics.RectF,boolean)>  -> _SOURCE_
<com.android.gallery3d.app.Config$ManageCachePage: com.android.gallery3d.app.Config$ManageCachePage get(android.content.Context)>  -> _SOURCE_
<com.android.gallery3d.ui.PositionController: int getImageHeight()>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap rotateToPortrait(android.graphics.Bitmap,int)>  -> _SOURCE_
<com.android.gallery3d.data.PathMatcher$Node: com.android.gallery3d.data.PathMatcher$Node getChild(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: int getSubMediaSetCount()>  -> _SOURCE_
<com.android.gallery3d.ui.RawTexture: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getItem()>  -> _SOURCE_
<com.android.gallery3d.util.IdentityCache: java.lang.Object get(java.lang.Object)>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: int getCount()>  -> _SOURCE_
<android.widget.Gallery: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.renderscript.RenderScript getRenderScriptContext()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.ui.ScreenNail getScreenNail()>  -> _SOURCE_
<com.android.gallery3d.data.LocalVideo: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.ui.TiledTexture: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.picasasource.BasePicasaAlbum: android.database.Cursor internalQuery(int,int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilter: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.data.SingleItemAlbum: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalTargetCacheSize(com.android.gallery3d.picasasource.PicasaSource)>  -> _SOURCE_
<com.android.gallery3d.exif.IfdData: int getTagCount()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalCropBounds()>  -> _SOURCE_
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getFreeBytes()>  -> _SOURCE_
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)>  -> _SOURCE_
<com.android.gallery3d.common.EntrySchema: java.lang.String[] getProjection()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: java.lang.String getString()>  -> _SOURCE_
<com.android.gallery3d.data.FaceClustering: java.lang.String getClusterName(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: int getComponentCount()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilterCurves: com.android.gallery3d.filtershow.ui.Spline getSpline(int)>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleStart()>  -> _SOURCE_
<com.android.gallery3d.ui.AlbumLabelMaker: int getBorderSize()>  -> _SOURCE_
<com.android.gallery3d.filtershow.ui.Spline: float[] getAppliedCurve()>  -> _SOURCE_
<com.android.gallery3d.common.EntrySchema: java.lang.String getTableName()>  -> _SOURCE_
<com.android.gallery3d.filtershow.ui.Spline: com.android.gallery3d.filtershow.ui.ControlPoint getPoint(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.PanelController getPanelController()>  -> _SOURCE_
<com.android.gallery3d.app.AbstractGalleryActivity: android.content.Context getAndroidContext()>  -> _SOURCE_
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.common.BlobCache getFaceCache(android.content.Context)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.data.Path: java.lang.String getPrefix()>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.data.ActionImage: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: int getImageWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.TileImageViewAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()>  -> _SOURCE_
<com.android.gallery3d.data.MtpDevice: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.util.CacheManager: com.android.gallery3d.common.BlobCache getCache(android.content.Context,java.lang.String,int,int,int)>  -> _SOURCE_
<com.android.gallery3d.data.SingleItemAlbum: java.lang.String getName()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterY()>  -> _SOURCE_
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterX()>  -> _SOURCE_
<com.android.gallery3d.data.LocalVideo: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.picasasource.BasePicasaAlbum: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.widget.ArrayAdapter getImageStateAdapter()>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapScreenNail: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.SlideshowView$SlideshowAnimation: int getCanvasSaveFlags()>  -> _SOURCE_
<com.android.gallery3d.data.LocalImage: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: long getDataVersion()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalStraighten()>  -> _SOURCE_
<com.android.gallery3d.ui.WakeLockHoldingProgressListener: com.android.gallery3d.app.AbstractGalleryActivity getActivity()>  -> _SOURCE_
<com.android.gallery3d.data.UriImage: int getMediaType()>  -> _SOURCE_
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilterGeometry: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)>  -> _SOURCE_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.LightCycleHelper$PanoramaViewHelper getPanoramaViewHelper()>  -> _SOURCE_
<com.android.gallery3d.ui.PhotoView$ScreenNailPicture: com.android.gallery3d.ui.PhotoView$Size getSize()>  -> _SOURCE_
<com.android.gallery3d.ui.DetailsHelper: java.lang.String getDetailsName(android.content.Context,int)>  -> _SOURCE_
<com.android.gallery3d.ui.UploadedTexture: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum: com.google.android.picasasync.PhotoEntry getPhotoEntry(com.android.gallery3d.picasasource.PicasaSource,long)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Rect getDisplayedImageBounds()>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTexture: int getId()>  -> _SOURCE_
<com.android.gallery3d.ui.RawTexture: int getId()>  -> _SOURCE_
<com.android.gallery3d.data.ActionImage: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: long getDateInMs()>  -> _SOURCE_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.SnailItem: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.TiledScreenNail: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: int getLong(int)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.gallery3d.exif.ExifData: byte[] getStrip(int)>  -> _SOURCE_
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.gallery3d.data.ComboAlbum: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.data.LocationClustering: int getNumberOfClusters()>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Bitmap getFilteredImage()>  -> _SOURCE_
<com.android.gallery3d.data.LocalImage: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.PositionController: float getImageScale()>  -> _SOURCE_
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicHeight()>  -> _SOURCE_
<com.android.gallery3d.data.SnailItem: com.android.gallery3d.ui.ScreenNail getScreenNail()>  -> _SOURCE_
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLRoot getGLRoot()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.data.Cluster: java.util.ArrayList getItems()>  -> _SOURCE_
<com.android.gallery3d.picasasource.BasePicasaAlbum: long reload()>  -> _SOURCE_
<com.android.gallery3d.ui.GLCanvasImpl: javax.microedition.khronos.opengles.GL11 getGLInstance()>  -> _SOURCE_
<com.android.gallery3d.common.Fingerprint: byte[] getBytes()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbumSet: int getSubMediaSetCount()>  -> _SOURCE_
<com.android.gallery3d.ui.PositionController: int getImageWidth()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: long getTotalUsedCacheSize()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheStatus()>  -> _SOURCE_
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.gallery3d.app.ActivityState: android.view.MenuInflater getSupportMenuInflater()>  -> _SOURCE_
<com.android.gallery3d.data.UriImage: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.ui.FlingScroller: int getCurrY()>  -> _SOURCE_
<com.android.gallery3d.ui.FlingScroller: int getCurrX()>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbum: java.lang.String getLocalizedName(android.content.res.Resources,int,java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: int getTotalMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>  -> _SOURCE_
<com.android.gallery3d.data.MtpClient: java.util.List getObjectList(java.lang.String,int,int)>  -> _SOURCE_
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getTotalBytes()>  -> _SOURCE_
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap()>  -> _SOURCE_
<com.android.gallery3d.app.PackagesMonitor: int getPackagesVersion(android.content.Context)>  -> _SOURCE_
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag[] getAllTags()>  -> _SOURCE_
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.ui.AlbumSetSlidingWindow$AlbumSetEntry get(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: int getLocalValue()>  -> _SOURCE_
<com.android.gallery3d.exif.IfdData: int getId()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean getDirtyGeometryFlag()>  -> _SOURCE_
<android.widget.Gallery: int getChildDrawingOrder(int,int)>  -> _SOURCE_
<com.android.gallery3d.common.Utils: byte[] getBytes(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.MtpDevice: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.data.ComboAlbumSet: int getSubMediaSetCount()>  -> _SOURCE_
<com.android.gallery3d.ui.TileImageViewAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.gallery3d.ui.CanvasTexture: android.graphics.Bitmap onGetBitmap()>  -> _SOURCE_
<com.android.gallery3d.ui.ExtTexture: int getTextureHeight()>  -> _SOURCE_
<com.android.gallery3d.ui.NinePatchTexture$SmallCache: java.lang.Object get(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getNewFile(android.content.Context,android.net.Uri)>  -> _SOURCE_
<com.android.gallery3d.data.Path: java.lang.String getSuffix()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifParser: int getCompressedImageSize()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: int getIfd()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.HistoryAdapter getHistory()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaPostAlbum: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.util.Future requestSyncOnMultipleSets(com.android.gallery3d.data.MediaSet[],com.android.gallery3d.data.MediaSet$SyncListener)>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTexture: int getTextureHeight()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)>  -> _SOURCE_
<com.android.gallery3d.util.IntArray: int[] getInternalArray()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMergeAlbum: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLView getComponent(int)>  -> _SOURCE_
<com.android.gallery3d.ui.BasicTexture: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.StateManager getStateManager()>  -> _SOURCE_
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getImageTitle(com.android.gallery3d.data.MediaObject)>  -> _SOURCE_
<com.android.gallery3d.data.Clustering: com.android.gallery3d.data.MediaItem getClusterCover(int)>  -> _SOURCE_
<com.android.gallery3d.gadget.LocalPhotoSource: android.net.Uri getContentUri(int)>  -> _SOURCE_
<com.android.gallery3d.data.UriImage: int getRotation()>  -> _SOURCE_
<com.android.gallery3d.data.SizeClustering: long getMinSize(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.RectF getCropBoundsDisplayed()>  -> _SOURCE_
<com.android.gallery3d.data.ActionImage: int getMediaType()>  -> _SOURCE_
<com.android.gallery3d.ui.UploadedTexture: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.data.BucketHelper: java.lang.String getBucketName(android.content.ContentResolver,int)>  -> _SOURCE_
<com.android.gallery3d.data.MtpClient: java.util.List getStorageList(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.LocalImage: java.lang.String getFilePath()>  -> _SOURCE_
<com.android.gallery3d.data.LocalVideo: android.net.Uri getPlayUri()>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: java.lang.String getTopSetPath(int)>  -> _SOURCE_
<com.android.gallery3d.provider.GalleryProvider: android.net.Uri getUriFor(android.content.Context,com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: float getAngle()>  -> _SOURCE_
<com.android.gallery3d.filtershow.PanelController: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>  -> _SOURCE_
<com.android.gallery3d.app.Config$AlbumSetPage: com.android.gallery3d.app.Config$AlbumSetPage get(android.content.Context)>  -> _SOURCE_
<com.android.gallery3d.data.LocalImage: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: long getPicasaId(com.android.gallery3d.data.MediaObject)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: long getDateInMs()>  -> _SOURCE_
<com.android.gallery3d.data.PathMatcher$Node: int getKind()>  -> _SOURCE_
<com.android.gallery3d.ui.TiledTexture: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>  -> _SOURCE_
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: long getTotalTargetCacheSize()>  -> _SOURCE_
<com.android.gallery3d.app.StitchingProgressManager: java.lang.Integer getProgress(android.net.Uri)>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.TimeClustering: java.lang.String getClusterName(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.presets.ImagePreset: float getScaleFactor()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: int getLoadingState(int)>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet$1: java.lang.Integer get()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: java.lang.Integer get()>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: android.net.Uri getPlayUri()>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> android.permission.NFC android.permission.SET_WALLPAPER android.permission.INTERNET android.permission.ACCESS_FINE_LOCATION android.permission.VIBRATE android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_NETWORK_STATE  -> _SOURCE_
<com.android.gallery3d.data.MediaDetails: int getUnit(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropRotationMatrix(float,android.graphics.RectF)>  -> _SOURCE_
<com.android.gallery3d.picasasource.FaceImage: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.ui.NinePatchTexture: android.graphics.Rect getPaddings()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.HistoryAdapter getHistory()>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTileProvider: int getImageWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.ScrollerHelper: float getCurrVelocity()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMergeAlbum: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.data.SizeClustering: java.lang.String getClusterName(int)>  -> _SOURCE_
<com.android.gallery3d.ui.GLPaint: float getLineWidth()>  -> _SOURCE_
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getFinalSaveDirectory(android.content.Context,android.net.Uri)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalRotation()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMath: float[] getUnitVectorFromPoints(float[],float[])>  -> _SOURCE_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.ui.GLRoot getGLRoot()>  -> _SOURCE_
<com.android.gallery3d.data.MtpDevice: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getPrefixPath()>  -> _SOURCE_
<com.android.gallery3d.filtershow.ui.ImageButtonTitle: java.lang.String getText()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: int getRotation()>  -> _SOURCE_
<com.android.gallery3d.ui.ColorTexture: int getWidth()>  -> _SOURCE_
<android.widget.Gallery: int getLimitedMotionScrollAmount(boolean,int)>  -> _SOURCE_
<com.android.gallery3d.ui.AlbumLabelMaker$LazyLoadedBitmap: android.graphics.Bitmap get()>  -> _SOURCE_
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)>  -> _SOURCE_
<com.android.gallery3d.data.FilterDeleteSet: int getNumberOfDeletions()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.imageshow.GeometryMetadata getGeometry()>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: int getIndexOf(com.android.gallery3d.data.Path,java.util.ArrayList)>  -> _SOURCE_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.TransitionStore getTransitionStore()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilter: byte getFilterType()>  -> _SOURCE_
<com.android.gallery3d.data.MtpDeviceSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>  -> _SOURCE_
<com.android.gallery3d.util.GalleryUtils: byte[] getBytes(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.LocalMediaItem: long getDateInMs()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: java.lang.String[] getTags()>  -> _SOURCE_
<com.android.gallery3d.ui.TiledScreenNail: com.android.gallery3d.ui.TiledTexture getTexture()>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbum: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMergeAlbum: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.DirectPresetCache: android.graphics.Bitmap get(com.android.gallery3d.filtershow.presets.ImagePreset)>  -> _SOURCE_
<com.android.gallery3d.data.FilterDeleteSet: long reload()>  -> _SOURCE_
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)>  -> _SOURCE_
<com.android.gallery3d.data.FaceClustering: java.util.ArrayList getCluster(int)>  -> _SOURCE_
<com.android.gallery3d.ui.CropView$AnimationController: float getScale()>  -> _SOURCE_
<com.android.gallery3d.data.FaceClustering: com.android.gallery3d.data.MediaItem getClusterCover(int)>  -> _SOURCE_
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.ui.SelectionManager: int getSelectedCount()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifData: java.nio.ByteOrder getByteOrder()>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.app.StateManager: int getStateCount()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifParser: int getCurrentIfd()>  -> _SOURCE_
<com.android.gallery3d.app.ActivityState: int getBackgroundColorId()>  -> _SOURCE_
<com.android.gallery3d.util.RangeIntArray: int get(int)>  -> _SOURCE_
<com.android.gallery3d.data.MediaSource: java.lang.String getPrefix()>  -> _SOURCE_
<com.android.gallery3d.filtershow.FilterShowActivity: float getPixelsFromDip(float)>  -> _SOURCE_
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: com.google.android.picasasync.PhotoEntry getPhotoEntry()>  -> _SOURCE_
<com.android.gallery3d.data.EmptyAlbumImage: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.data.TimeClustering: int getNumberOfClusters()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: long getSize()>  -> _SOURCE_
<com.android.gallery3d.app.SlideshowPage: int getBackgroundColorId()>  -> _SOURCE_
<com.android.gallery3d.app.CommonControllerOverlay: android.view.View getView()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity)>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.filtershow.ui.Spline: int getNbPoints()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalScale()>  -> _SOURCE_
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getSetPath(int)>  -> _SOURCE_
<com.android.gallery3d.data.PathMatcher: java.lang.String getVar(int)>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int getTarget()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifReader: com.android.gallery3d.exif.ExifData read(java.io.InputStream)>  -> _SOURCE_
<com.android.gallery3d.data.PathMatcher: int getIntVar(int)>  -> _SOURCE_
<com.android.gallery3d.data.ActionImage: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.data.UriImage: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.gallery3d.data.UnlockImage: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: long getAlbumId()>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path findPathByUri(android.net.Uri,java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getMicroThumbPool()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getStraightenRotation()>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTexture: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: short getDataType()>  -> _SOURCE_
<com.android.gallery3d.app.ActivityState: android.os.Bundle getData()>  -> _SOURCE_
<com.android.gallery3d.common.OverScroller: int getFinalX()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: long getSize()>  -> _SOURCE_
<com.android.gallery3d.data.UriImage: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: int getCount()>  -> _SOURCE_
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.MediaObject getObject()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaPostAlbum$PostSyncFuture: java.lang.Integer get()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ColorSpaceMatrix: float[] getMatrix()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)>  -> _SOURCE_
<android.widget.Gallery: int getChildHeight(android.view.View)>  -> _SOURCE_
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: int setIndex()>  -> _SOURCE_
<com.android.gallery3d.data.SingleItemAlbum: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.ui.TileImageView$Tile: com.android.gallery3d.ui.TileImageView$Tile getParentTile()>  -> _SOURCE_
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.ui.RawTexture: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.filtershow.ImageStateAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getScaleOneImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect,boolean)>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTileProvider: int getLevelCount()>  -> _SOURCE_
<com.android.gallery3d.ui.ExtTexture: int getTextureWidth()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getHorizontalMatrix(float)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentResolver getContentResolver()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long,java.lang.Object)>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageRotate: int getLocalValue()>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbum: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.ui.UploadedTexture: int getTarget()>  -> _SOURCE_
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object,java.lang.Object)>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientation(android.content.Context,android.net.Uri)>  -> _SOURCE_
<com.android.gallery3d.data.SecureAlbum: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.data.LocalVideo: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.ui.GLRootView: int getCompensation()>  -> _SOURCE_
<com.android.gallery3d.data.LocalImage: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.app.AlbumPage: int getBackgroundColorId()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getVerticalMatrix(float)>  -> _SOURCE_
<com.android.gallery3d.data.FilterTypeSet: int getSubMediaSetCount()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getMatrixOriginalOrientation(int,float,float)>  -> _SOURCE_
<com.android.gallery3d.data.LocalMediaItem: void getLatLong(double[])>  -> _SOURCE_
<com.android.gallery3d.data.LocalMediaItem: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: int getCurrentIndex()>  -> _SOURCE_
<com.android.gallery3d.data.FaceClustering: int getNumberOfClusters()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMinParameter()>  -> _SOURCE_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(int)>  -> _SOURCE_
<com.android.gallery3d.data.MtpContext: com.android.gallery3d.data.MtpClient getMtpClient()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: int getIfdIdFromTagId(short)>  -> _SOURCE_
<com.android.gallery3d.app.Bookmarker: java.lang.Integer getBookmark(android.net.Uri)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropBoundDisplayMatrix()>  -> _SOURCE_
<com.android.gallery3d.exif.Rational: long getDenominator()>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbum: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: com.android.gallery3d.filtershow.FilterShowActivity getActivity()>  -> _SOURCE_
<com.android.gallery3d.ui.BasicTexture: int getId()>  -> _SOURCE_
<com.android.gallery3d.data.LocationClustering: java.util.ArrayList getCluster(int)>  -> _SOURCE_
<com.android.gallery3d.app.Config$AlbumPage: com.android.gallery3d.app.Config$AlbumPage get(android.content.Context)>  -> _SOURCE_
<com.android.gallery3d.data.FilterTypeSet: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.app.OrientationManager: int getDisplayRotation()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String[] getTags()>  -> _SOURCE_
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>  -> _SOURCE_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)>  -> _SOURCE_
<com.android.gallery3d.data.LocationClustering: java.lang.String getClusterName(int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: int getMediaType()>  -> _SOURCE_
<com.android.gallery3d.ui.RawTexture: int getTextureHeight()>  -> _SOURCE_
<com.android.gallery3d.filtershow.HistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.gallery3d.data.LocalVideo$LocalVideoRequest: android.graphics.Bitmap onDecodeOriginal(com.android.gallery3d.util.ThreadPool$JobContext,int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageSmallFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbum: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMergeAlbum: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.graphics.Bitmap getImage(int)>  -> _SOURCE_
<com.android.gallery3d.ui.PhotoView$ZInterpolator: float getInterpolation(float)>  -> _SOURCE_
<com.android.gallery3d.ui.BasicTexture: int getTextureHeight()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.ExifTag addTag(short)>  -> _SOURCE_
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)>  -> _SOURCE_
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(int)>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTileProvider: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)>  -> _SOURCE_
<com.android.gallery3d.exif.ExifParser: java.nio.ByteOrder getByteOrder()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.ui.GLCanvasImpl: float getAlpha()>  -> _SOURCE_
<com.android.gallery3d.data.SizeClustering: int getNumberOfClusters()>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientationFromPath(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int,com.android.gallery3d.ui.GLView)>  -> _SOURCE_
<com.android.gallery3d.app.AlbumSetDataLoader: int getTotalCount(int)>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar: android.view.Menu getMenu()>  -> _SOURCE_
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getLoadingView()>  -> _SOURCE_
<com.android.gallery3d.data.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(com.android.gallery3d.data.MtpContext,int,int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: int getFullImageRotation()>  -> _SOURCE_
<com.android.gallery3d.data.FaceClustering$FaceCluster: com.android.gallery3d.data.MediaItem getCover()>  -> _SOURCE_
<com.android.gallery3d.data.LocalVideo: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.gallery3d.ui.ResourceTexture: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.gallery3d.data.MtpDeviceSet: int getSubMediaSetCount()>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Rect getDisplayedImageBounds()>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTexture: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.ui.StringTexture: android.text.TextPaint getDefaultPaint(float,int)>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheFlag()>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()>  -> _SOURCE_
<com.android.gallery3d.filtershow.cache.ImageLoader: int getZoomOrientation()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.MediaItem getFaceItem(android.content.Context,com.android.gallery3d.data.MediaItem,int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: float getCurrentTouchAngle()>  -> _SOURCE_
<com.android.gallery3d.data.MtpDevice: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.ui.FadeTexture: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.gallery3d.ui.ColorTexture: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getUserAccount(android.content.Context,com.android.gallery3d.data.MediaObject)>  -> _SOURCE_
<com.android.gallery3d.data.UriImage: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getPreviewParameter()>  -> _SOURCE_
<com.android.gallery3d.filtershow.filters.ImageFilter: int getDefaultParameter()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageFlip: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.picasasource.FaceImage: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMediaItem: long getSize()>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.data.MtpClient: byte[] getThumbnail(java.lang.String,int)>  -> _SOURCE_
<com.android.gallery3d.ui.SurfaceTextureScreenNail: android.graphics.SurfaceTexture getSurfaceTexture()>  -> _SOURCE_
<com.android.gallery3d.data.TagClustering: int getNumberOfClusters()>  -> _SOURCE_
<com.android.gallery3d.ui.FadeTexture: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity,int)>  -> _SOURCE_
<com.android.gallery3d.exif.ExifTag: com.android.gallery3d.exif.Rational getRational(int)>  -> _SOURCE_
<com.android.gallery3d.app.OrientationManager: int getCompensation()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getContentProvider()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>  -> _SOURCE_
<com.android.gallery3d.ui.GLPaint: int getColor()>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: int getMediaType()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: int getImageHeight()>  -> _SOURCE_
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView$Layout: int getSlotIndexByPosition(float,float)>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float)>  -> _SOURCE_
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)>  -> _SOURCE_
<com.android.gallery3d.data.FilterTypeSet: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)>  -> _SOURCE_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.OrientationManager getOrientationManager()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalDisplayBounds()>  -> _SOURCE_
<com.android.gallery3d.exif.ExifParser: int getStripIndex()>  -> _SOURCE_
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageHeight()>  -> _SOURCE_
<com.android.gallery3d.ui.FlingScroller: int getDuration()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: int getTargetSize(int)>  -> _SOURCE_
<com.android.gallery3d.util.RangeArray: java.lang.Object get(int)>  -> _SOURCE_
<com.android.gallery3d.data.SizeClustering: java.util.ArrayList getCluster(int)>  -> _SOURCE_
<com.android.gallery3d.data.LocalImage: int getMediaType()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPreviewCropBounds()>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaImage: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getCurrentTouchAngle()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF straightenBounds()>  -> _SOURCE_
<com.android.gallery3d.ui.GLView: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getRotation()>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTexture: int getTextureWidth()>  -> _SOURCE_
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getItemPath(int)>  -> _SOURCE_
<com.android.gallery3d.ui.ResourceTexture: int getTextureWidth()>  -> _SOURCE_
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getImageRotation(int)>  -> _SOURCE_
<com.android.gallery3d.ui.TileImageViewAdapter: int getLevelCount()>  -> _SOURCE_
<com.android.gallery3d.data.PathMatcher: long getLongVar(int)>  -> _SOURCE_
<com.android.gallery3d.data.DownloadCache$TaskProxy: com.android.gallery3d.data.DownloadCache$Entry get(com.android.gallery3d.util.ThreadPool$JobContext)>  -> _SOURCE_
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(long)>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.Face[] getFaces()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMediaItem: int getBucketId()>  -> _SOURCE_
<com.android.gallery3d.app.StitchingProgressManager: java.util.ArrayList access$100(com.android.gallery3d.app.StitchingProgressManager)>  -> _SOURCE_
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleEnd()>  -> _SOURCE_
<com.android.gallery3d.ui.AlbumSlidingWindow: com.android.gallery3d.ui.AlbumSlidingWindow$AlbumEntry get(int)>  -> _SOURCE_
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getDeviceName(com.android.gallery3d.data.MtpContext,int)>  -> _SOURCE_
<com.android.gallery3d.data.MediaSet$MultiSetSyncFuture: java.lang.Integer get()>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView$Layout: android.graphics.Rect getSlotRect(int,android.graphics.Rect)>  -> _SOURCE_
<com.android.gallery3d.common.BlobCache: byte[] lookup(long)>  -> _SOURCE_
<com.android.gallery3d.ui.GLRootView: int getDisplayRotation()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: int getFullImageRotation()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbum: int getTotalMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.IfdData getIfdData(int)>  -> _SOURCE_
<com.android.gallery3d.common.LruCache: java.lang.Object get(java.lang.Object)>  -> _SOURCE_
<com.android.gallery3d.ui.MenuExecutor: java.lang.String getMimeType(int)>  -> _SOURCE_
<com.android.gallery3d.data.ClusterAlbumSet: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: void getLatLong(double[])>  -> _SOURCE_
<com.android.gallery3d.data.SnailItem: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.data.MediaItem: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: java.lang.String getTypeString(int)>  -> _SOURCE_
<com.android.gallery3d.ui.EdgeAnimation: float getValue()>  -> _SOURCE_
<com.android.gallery3d.data.CameraShortcutImage: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar: java.lang.String getClusterByTypeString(android.content.Context,int)>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView: int getScrollY()>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView: int getScrollX()>  -> _SOURCE_
<com.android.gallery3d.gadget.MediaSetSource: android.net.Uri getContentUri(int)>  -> _SOURCE_
<com.android.gallery3d.ui.ResourceTexture: int getId()>  -> _SOURCE_
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.net.Uri getContentUri(int)>  -> _SOURCE_
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()>  -> _SOURCE_
<com.android.gallery3d.data.FilterTypeSet: int getSupportedOperations()>  -> _SOURCE_
<com.android.gallery3d.data.MediaSource: long getTotalTargetCacheSize()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalPhotoBounds()>  -> _SOURCE_
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageWidth()>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: android.net.Uri getContentUri()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(android.graphics.Bitmap,int)>  -> _SOURCE_
<com.android.gallery3d.app.StateManager: com.android.gallery3d.app.ActivityState getTopState()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: double getLongitude(com.android.gallery3d.data.MediaObject)>  -> _SOURCE_
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>  -> _SOURCE_
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)>  -> _SOURCE_
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.Path getPath()>  -> _SOURCE_
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getLocalFlip()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaPostAlbum: android.database.Cursor internalQuery(int,int)>  -> _SOURCE_
<com.android.gallery3d.data.LocalAlbumSet: java.lang.String getName()>  -> _SOURCE_
<com.android.gallery3d.ui.BitmapTileProvider: int getImageHeight()>  -> _SOURCE_
<com.android.gallery3d.util.GalleryUtils: int getBucketId(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView$Layout: int getScrollLimit()>  -> _SOURCE_
<com.android.gallery3d.data.ActionImage: int getHeight()>  -> _SOURCE_
<com.android.gallery3d.data.MtpImage: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.gallery3d.data.MtpClient: byte[] getObject(java.lang.String,int,int)>  -> _SOURCE_
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.FilterShowActivity$LoadBitmapTask: java.lang.Boolean doInBackground(android.net.Uri[])>  -> _SOURCE_
<com.android.gallery3d.data.TimeClustering: java.util.ArrayList getCluster(int)>  -> _SOURCE_
<com.android.gallery3d.data.LocalVideo: int getWidth()>  -> _SOURCE_
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getStoreProvider()>  -> _SOURCE_
<com.android.gallery3d.ui.ExtTexture: int getTarget()>  -> _SOURCE_
<com.android.gallery3d.common.Utils: java.lang.String getUserAgent(android.content.Context)>  -> _SOURCE_
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityY()>  -> _SOURCE_
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityX()>  -> _SOURCE_
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)>  -> _SOURCE_
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.filters.ImageFilter getFilter(java.lang.String)>  -> _SOURCE_
<com.android.gallery3d.ui.RawTexture: int getTarget()>  -> _SOURCE_
<com.android.gallery3d.data.FilterEmptyPromptSet: int getMediaItemCount()>  -> _SOURCE_
<com.android.gallery3d.data.Cluster: com.android.gallery3d.data.SmallItem getLastItem()>  -> _SOURCE_
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.ThreadPool getThreadPool()>  -> _SOURCE_
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: int getCount()>  -> _SOURCE_
<com.android.browser.BrowserSettings: int getPageCacheCapacity()>  -> _SOURCE_
<com.android.browser.TabControl: com.android.browser.Tab getTab(int)>  -> _SOURCE_
<com.android.browser.TabControl: int getTabCount()>  -> _SOURCE_
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getRowObject(android.database.Cursor,com.android.browser.BrowserBookmarksAdapterItem)>  -> _SOURCE_
<com.android.browser.homepages.RequestHandler: byte[] htmlEncode(java.lang.String)>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getGroup(int)>  -> _SOURCE_
<com.android.browser.BrowserSnapshotPage$SnapshotAdapter: android.database.Cursor getItem(int)>  -> _SOURCE_
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: int getCount()>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: float getFloat(int)>  -> _SOURCE_
<com.android.browser.BrowserBookmarksAdapter: long getItemId(android.database.Cursor)>  -> _SOURCE_
<com.android.browser.Tab: java.lang.String getTitle()>  -> _SOURCE_
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getTotalSizeBytes()>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getJsEngineFlags()>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine: java.lang.String getName()>  -> _SOURCE_
<com.android.browser.PreloadedTabControl: com.android.browser.Tab getTab()>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getHomePage()>  -> _SOURCE_
<com.android.browser.Tab: android.graphics.Bitmap getFavicon()>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getDefaultTextEncoding()>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: long getItemId(int)>  -> _SOURCE_
<com.android.browser.WebStorageSizeManager$WebKitAppCacheInfo: long getAppCacheSizeBytes()>  -> _SOURCE_
<com.android.browser.TitleBar: com.android.browser.BaseUi getUi()>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getCount()>  -> _SOURCE_
<com.android.browser.util.ThreadedCursorAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String[] getColumnNames()>  -> _SOURCE_
<com.android.browser.Preloader$PreloaderSession: android.webkit.WebView getWebView()>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: float getFloat(int)>  -> _SOURCE_
<com.android.browser.util.ThreadedCursorAdapter: android.database.Cursor getItem(int)>  -> _SOURCE_
<com.android.browser.provider.SnapshotProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2: java.lang.Object[] getSelectionWithAccounts(android.net.Uri,java.lang.String,java.lang.String[])>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.browser.AutofillHandler: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()>  -> _SOURCE_
<com.android.browser.AutofillHandler$AutoFillProfileDbTask: java.lang.Object doInBackground(java.lang.Object[])>  -> _SOURCE_
<com.android.browser.BrowserBookmarksPage: android.content.Intent createShortcutIntent(android.content.Context,android.database.Cursor)>  -> _SOURCE_
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>  -> _SOURCE_
<com.android.browser.view.PieItem: float getAlpha()>  -> _SOURCE_
<com.android.browser.BrowserSettings: com.android.browser.WebStorageSizeManager getWebStorageSizeManager()>  -> _SOURCE_
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>  -> _SOURCE_
<com.android.browser.Controller: android.graphics.Bitmap getDefaultVideoPoster()>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: float getFloat(int)>  -> _SOURCE_
<com.android.browser.SnapshotTab: android.content.ContentValues createSnapshotValues()>  -> _SOURCE_
<com.android.browser.TitleBar: com.android.browser.UiController getUiController()>  -> _SOURCE_
<com.android.browser.Controller: com.android.browser.Tab getCurrentTab()>  -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> com.android.browser.permission.READ_HISTORY_BOOKMARKS  -> _SOURCE_
<com.android.browser.TabScrollView: int getChildIndex(android.view.View)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String[] getColumnNames()>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getDefaultLinkPrefetchSetting()>  -> _SOURCE_
<com.android.browser.Controller: android.view.View getVideoLoadingProgressView()>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getDefaultPreloadSetting()>  -> _SOURCE_
<com.android.browser.homepages.HomeProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>  -> _SOURCE_
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: int getCount()>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchEnabled()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getChild(int,int)>  -> _SOURCE_
<com.android.browser.search.SearchEngineInfo: java.lang.String getSearchUriForQuery(java.lang.String)>  -> _SOURCE_
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionTitle(com.android.browser.SuggestionsAdapter$SuggestItem)>  -> _SOURCE_
<com.android.browser.WebViewTimersControl: com.android.browser.WebViewTimersControl getInstance()>  -> _SOURCE_
<org.apache.http.impl.cookie.BrowserCompatSpec: org.apache.http.Header getVersionHeader()>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: short getShort(int)>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getInt(int)>  -> _SOURCE_
<com.android.browser.BaseUi: com.android.browser.TitleBar getTitleBar()>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionUrl(com.android.browser.SuggestionsAdapter$SuggestItem)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getCount()>  -> _SOURCE_
<com.android.browser.homepages.Template$CursorListEntityWrapper: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getInt(int)>  -> _SOURCE_
<com.android.browser.SnapshotTab: com.android.browser.Tab getParent()>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine: java.lang.CharSequence getLabel()>  -> _SOURCE_
<com.android.browser.PieControl$TabAdapter: int getCount()>  -> _SOURCE_
<com.android.browser.TabControl: com.android.browser.Tab getLeastUsedTab(com.android.browser.Tab)>  -> _SOURCE_
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BreadCrumbView getBreadCrumbs(int)>  -> _SOURCE_
<com.android.browser.TabScrollView: android.view.View getSelectedTab()>  -> _SOURCE_
<com.android.browser.DeviceAccountLogin: java.lang.String[] getAccountNames()>  -> _SOURCE_
<com.android.browser.Tab: com.android.browser.Tab$SecurityState getSecurityState()>  -> _SOURCE_
<com.android.browser.Bookmarks: android.database.Cursor queryCombinedForUrl(android.content.ContentResolver,java.lang.String,java.lang.String)> com.android.browser.permission.READ_HISTORY_BOOKMARKS  -> _SOURCE_
<com.android.browser.BrowserSnapshotPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getPreloadAlwaysPreferenceString(android.content.Context)>  -> _SOURCE_
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine getDefaultSearchEngine(android.content.Context)>  -> _SOURCE_
<com.android.browser.BrowserSettings: android.webkit.WebSettings$PluginState getPluginState()>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.view.PieItem: float getAnimationAngle()>  -> _SOURCE_
<com.android.browser.DataUri: java.lang.String getMimeType()>  -> _SOURCE_
<com.android.browser.search.SearchEngineInfo: java.lang.String getName()>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getChildrenCount(int)>  -> _SOURCE_
<com.android.browser.ErrorConsoleView: int getShowState()>  -> _SOURCE_
<com.android.browser.TabControl: android.webkit.WebView getCurrentSubWindow()>  -> _SOURCE_
<com.android.browser.Preloader: com.android.browser.Preloader getInstance()>  -> _SOURCE_
<com.android.browser.UrlInputView: int getState()>  -> _SOURCE_
<com.android.browser.view.PieItem: float getSweep()>  -> _SOURCE_
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> com.android.browser.permission.WRITE_HISTORY_BOOKMARKS android.permission.GET_ACCOUNTS com.android.browser.permission.READ_HISTORY_BOOKMARKS  -> _SOURCE_
<com.android.browser.search.SearchEngineInfo: java.lang.String getLabel()>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String[] getColumnNames()>  -> _SOURCE_
<com.android.browser.AutoFillProfileDatabase: com.android.browser.AutoFillProfileDatabase getInstance(android.content.Context)>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage: android.view.View getTargetView(android.view.ContextMenu$ContextMenuInfo)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: double getDouble(int)>  -> _SOURCE_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getViewTypeCount()>  -> _SOURCE_
<com.android.browser.NavScreen: com.android.browser.NavTabView getTabView(int)>  -> _SOURCE_
<com.android.browser.TabControl: int getCurrentPosition()>  -> _SOURCE_
<com.android.browser.XLargeUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)>  -> _SOURCE_
<com.android.browser.BaseUi: com.android.browser.Tab getActiveTab()>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String getString(int)>  -> _SOURCE_
<com.android.browser.widget.BookmarkThumbnailWidgetService: android.content.SharedPreferences getWidgetState(android.content.Context,int)>  -> _SOURCE_
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: long getGroupId(int)>  -> _SOURCE_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getViewAt(int)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.browser.PieControl$TabAdapter: com.android.browser.Tab getItem(int)>  -> _SOURCE_
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getWritableDatabase()>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: short getShort(int)>  -> _SOURCE_
<com.android.browser.homepages.RequestHandler: java.lang.String getUriResourcePath()>  -> _SOURCE_
<com.android.browser.homepages.RequestHandler$4: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)>  -> _SOURCE_
<com.android.browser.IntentHandler: com.android.browser.IntentHandler$UrlData getUrlDataFromIntent(android.content.Intent)>  -> _SOURCE_
<com.android.browser.XLargeUi: int getContentWidth()>  -> _SOURCE_
<com.android.browser.BrowserSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedGroupId(long)>  -> _SOURCE_
<com.android.browser.NavScreen$TabAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getCount()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedChildId(long,long)>  -> _SOURCE_
<com.android.browser.BrowserSettings: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()>  -> _SOURCE_
<com.android.browser.view.PieItem: int getOuterRadius()>  -> _SOURCE_
<com.android.browser.Tab: android.webkit.WebView getWebView()>  -> _SOURCE_
<com.android.browser.NavScreen$TabAdapter: int getCount()>  -> _SOURCE_
<com.android.browser.BookmarkItem: java.lang.String getName()>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getGroupId(int)>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter: int getCount()>  -> _SOURCE_
<com.android.browser.SnapshotTab: byte[] compressBitmap(android.graphics.Bitmap)>  -> _SOURCE_
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestionResults buildSuggestionResults()>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: long getChildId(int,int)>  -> _SOURCE_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureCount()>  -> _SOURCE_
<com.android.browser.provider.SnapshotProvider: java.io.File getOldDatabasePath(android.content.Context)>  -> _SOURCE_
<com.android.browser.BrowserSettings: int getRawTextZoom(int)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2: int getUrlCount(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<com.android.browser.TabControl: com.android.browser.Tab getTabFromView(android.webkit.WebView)>  -> _SOURCE_
<com.android.browser.BrowserBookmarksAdapter: java.lang.CharSequence getTitle(android.database.Cursor)>  -> _SOURCE_
<com.android.browser.BookmarkUtils: android.content.Intent createAddToHomeIntent(android.content.Context,java.lang.String,java.lang.String,android.graphics.Bitmap,android.graphics.Bitmap)>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getChild(int,int)>  -> _SOURCE_
<com.android.browser.DataUri: byte[] getData()>  -> _SOURCE_
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: long getItemId(int)>  -> _SOURCE_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureByIndex(int)>  -> _SOURCE_
<com.android.browser.BaseUi: boolean isTitleBarShowing()>  -> _SOURCE_
<com.android.browser.BrowserSettings: int getAdjustedTextZoom(int)>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestItem getItem(int)>  -> _SOURCE_
<com.android.browser.Controller: android.app.Activity getActivity()>  -> _SOURCE_
<com.android.browser.BrowserSettings: com.android.browser.BrowserSettings getInstance()>  -> _SOURCE_
<com.android.browser.homepages.Template: com.android.browser.homepages.Template getCachedTemplate(android.content.Context,int)>  -> _SOURCE_
<com.android.browser.Controller: com.android.browser.BrowserSettings getSettings()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getGroup(int)>  -> _SOURCE_
<com.android.browser.Controller: com.android.browser.WebViewFactory getWebViewFactory()>  -> _SOURCE_
<com.android.browser.Controller: int getDesiredThumbnailHeight(android.content.Context)>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getFactoryResetHomeUrl(android.content.Context)>  -> _SOURCE_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyOrigin()>  -> _SOURCE_
<com.android.browser.NavScreen$TabAdapter: com.android.browser.Tab getItem(int)>  -> _SOURCE_
<com.android.browser.PieControl: com.android.browser.view.PieItem makeItem(int,int)>  -> _SOURCE_
<com.android.browser.BrowserSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: int getCount()>  -> _SOURCE_
<com.android.browser.TabControl: long getNextId()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: android.content.Context getContext()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.view.PieItem: float getStartAngle()>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getGroupCount()>  -> _SOURCE_
<com.android.browser.Tab$3: android.view.View getVideoLoadingProgressView()>  -> _SOURCE_
<com.android.browser.BreadCrumbView: com.android.browser.BreadCrumbView$Crumb getTopCrumb()>  -> _SOURCE_
<com.android.browser.Tab: com.android.browser.ErrorConsoleView getErrorConsole(boolean)>  -> _SOURCE_
<com.android.browser.widget.BookmarkThumbnailWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)>  -> _SOURCE_
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getLoadingObject()>  -> _SOURCE_
<com.android.browser.TitleBar: int getEmbeddedHeight()>  -> _SOURCE_
<com.android.browser.IntentHandler$UrlData: com.android.browser.PreloadedTabControl getPreloadedTab()>  -> _SOURCE_
<com.android.browser.IntentHandler$UrlData: java.lang.String getSearchBoxQueryToSubmit()>  -> _SOURCE_
<com.android.browser.Tab: com.android.browser.DeviceAccountLogin getDeviceAccountLogin()>  -> _SOURCE_
<com.android.browser.PreloadController: com.android.browser.TabControl getTabControl()>  -> _SOURCE_
<com.android.browser.BrowserSettings: com.android.browser.search.SearchEngine getSearchEngine()>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: long getChildId(int,int)>  -> _SOURCE_
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getSearchEngineName()>  -> _SOURCE_
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.homepages.Template$CursorListEntityWrapper: android.database.Cursor getCursor()>  -> _SOURCE_
<com.android.browser.search.SearchEngines: java.util.List getSearchEngineInfos(android.content.Context)>  -> _SOURCE_
<android.webkit.BrowserFrame: android.webkit.CallbackProxy getCallbackProxy()>  -> _SOURCE_
<com.android.browser.BookmarkUtils: android.graphics.drawable.Drawable createListFaviconBackground(android.content.Context)>  -> _SOURCE_
<com.android.browser.Controller: com.android.browser.TabControl getTabControl()>  -> _SOURCE_
<com.android.browser.BrowserSettings: int getUserAgent()>  -> _SOURCE_
<com.android.browser.Tab: android.webkit.WebView getTopWindow()>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: com.android.browser.BreadCrumbView getBreadCrumbView(int)>  -> _SOURCE_
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngineInfo getSearchEngineInfo(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.browser.BookmarkUtils: android.graphics.Bitmap createIcon(android.content.Context,android.graphics.Bitmap,android.graphics.Bitmap,com.android.browser.BookmarkUtils$BookmarkIconType)>  -> _SOURCE_
<com.android.browser.BrowserBookmarksPage: java.lang.String getUrl(android.database.Cursor)>  -> _SOURCE_
<com.android.browser.Tab: com.android.browser.Tab getParent()>  -> _SOURCE_
<com.android.browser.BrowserSettings: android.content.SharedPreferences getPreferences()>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: long getLong(int)>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: short getShort(int)>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: int getCount()>  -> _SOURCE_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getOrigin()>  -> _SOURCE_
<com.android.browser.Controller: android.content.Context getContext()>  -> _SOURCE_
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.BrowserSnapshotPage: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>  -> _SOURCE_
<com.android.browser.NavTabScroller: com.android.browser.NavTabView getTabView(int)>  -> _SOURCE_
<com.android.browser.TabControl: int getTabPosition(com.android.browser.Tab)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: long getLong(int)>  -> _SOURCE_
<com.android.browser.homepages.Template: com.android.browser.homepages.Template copy()>  -> _SOURCE_
<com.android.browser.BackgroundHandler: android.os.Looper getLooper()>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.database.Cursor getCursor(int)>  -> _SOURCE_
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int,android.graphics.Bitmap)>  -> _SOURCE_
<com.android.browser.BreadCrumbView: java.lang.Object getTopData()>  -> _SOURCE_
<com.android.browser.BaseUi: android.webkit.WebView getWebView()>  -> _SOURCE_
<com.android.browser.PreloadController: android.content.Context getContext()>  -> _SOURCE_
<com.android.browser.provider.SnapshotProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)>  -> _SOURCE_
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getReadableDatabase()>  -> _SOURCE_
<com.android.browser.NavTabScroller: int getGap()>  -> _SOURCE_
<com.android.browser.view.PieItem: java.util.List getItems()>  -> _SOURCE_
<com.android.browser.Tab: android.webkit.WebViewClassic getWebViewClassic()>  -> _SOURCE_
<com.android.browser.search.DefaultSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.browser.view.ScrollerView: int getMaxScrollAmount()>  -> _SOURCE_
<com.android.browser.BaseUi: android.view.View getVideoLoadingProgressView()>  -> _SOURCE_
<com.android.browser.BrowserSettings: int getTextZoom()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: int getChildrenCount(int)>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchOnWifiOnlyPreferenceString(android.content.Context)>  -> _SOURCE_
<com.android.browser.util.ThreadedCursorAdapter: int getCount()>  -> _SOURCE_
<com.android.browser.Controller: android.webkit.WebView getCurrentWebView()>  -> _SOURCE_
<com.android.browser.provider.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SOURCE_
<com.android.browser.search.SearchEngineInfo: java.lang.String getSuggestUriForQuery(java.lang.String)>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: long getItemId(int)>  -> _SOURCE_
<com.android.browser.Controller: android.webkit.WebView getCurrentTopWebView()>  -> _SOURCE_
<com.android.browser.Controller: int getDesiredThumbnailWidth(android.content.Context)>  -> _SOURCE_
<com.android.browser.BaseUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)>  -> _SOURCE_
<com.android.browser.PreloadController: android.view.View getVideoLoadingProgressView()>  -> _SOURCE_
<com.android.browser.UrlInputView: android.widget.ListAdapter getAdapter()>  -> _SOURCE_
<com.android.browser.TabControl: com.android.browser.Tab getTabFromAppId(java.lang.String)>  -> _SOURCE_
<com.android.browser.Controller: int getMaxTabs()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.SnapshotTab$LoadData: android.database.Cursor doInBackground(java.lang.Void[])> com.android.browser.permission.READ_HISTORY_BOOKMARKS  -> _SOURCE_
<com.android.browser.Tab: java.lang.String getUrl()>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getPreloadOnWifiOnlyPreferenceString(android.content.Context)>  -> _SOURCE_
<com.android.browser.TabControl: android.webkit.WebView getCurrentTopWebView()>  -> _SOURCE_
<com.android.browser.BrowserSettings: float getInvertedContrast()>  -> _SOURCE_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: long getItemId(int)>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter$CombinedCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()>  -> _SOURCE_
<com.android.browser.Tab: com.android.browser.GeolocationPermissionsPrompt getGeolocationPermissionsPrompt()>  -> _SOURCE_
<com.android.browser.Tab: android.view.View getSubViewContainer()>  -> _SOURCE_
<com.android.browser.ComboViewActivity$TabsAdapter: int getCount()>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.browser.PieControl$TabAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.browser.SnapshotTab: android.graphics.Bitmap getScreenshot()>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.Controller: android.content.Intent createBookmarkCurrentPageIntent(boolean)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getInt(int)>  -> _SOURCE_
<com.android.browser.Tab$3: android.graphics.Bitmap getDefaultVideoPoster()>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getChildId(int,int)>  -> _SOURCE_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyTitle()>  -> _SOURCE_
<com.android.browser.BrowserSettings: long getLastRecovered()>  -> _SOURCE_
<com.android.browser.view.ScrollerView: float getTopFadingEdgeStrength()>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter: android.widget.Filter getFilter()>  -> _SOURCE_
<com.android.browser.util.ThreadedCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.Controller: com.android.browser.UI getUi()>  -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>  -> _SOURCE_
<android.webkit.BrowserFrame: java.lang.String getRawResFilename(int,android.content.Context)>  -> _SOURCE_
<com.android.browser.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)>  -> _SOURCE_
<com.android.browser.PreloadController: android.app.Activity getActivity()>  -> _SOURCE_
<com.android.browser.view.PieItem: android.view.View getView()>  -> _SOURCE_
<org.apache.http.impl.cookie.BrowserCompatSpec: int getVersion()>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getPreloadEnabled()>  -> _SOURCE_
<com.android.browser.ComboViewActivity$TabsAdapter: android.app.Fragment getItem(int)>  -> _SOURCE_
<com.android.browser.WebStorageSizeManager: long getAppCacheMaxSize()>  -> _SOURCE_
<com.android.browser.TabScrollView$TabLayout: int getChildDrawingOrder(int,int)>  -> _SOURCE_
<com.android.browser.Controller: android.graphics.Bitmap createScreenshot(android.webkit.WebView,int,int)>  -> _SOURCE_
<android.webkit.BrowserFrame: boolean getShouldStartScrolledRight()>  -> _SOURCE_
<com.android.browser.AutoFillProfileDatabase: android.database.Cursor getProfile(int)>  -> _SOURCE_
<com.android.browser.SnapshotTab: long getDateCreated()>  -> _SOURCE_
<com.android.browser.TitleBar: com.android.browser.PageProgressView getProgressView()>  -> _SOURCE_
<com.android.browser.view.ScrollerView: float getBottomFadingEdgeStrength()>  -> _SOURCE_
<com.android.browser.addbookmark.FolderSpinnerAdapter: long getItemId(int)>  -> _SOURCE_
<com.android.browser.NavTabScroller: int getScrollValue()>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider: java.lang.String getClientId(android.content.ContentResolver)>  -> _SOURCE_
<com.android.browser.TitleBar: com.android.browser.NavigationBarBase getNavigationBar()>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.TabControl: com.android.browser.TabControl$OnThumbnailUpdatedListener getOnThumbnailUpdatedListener()>  -> _SOURCE_
<com.android.browser.TitleBar: android.webkit.WebView getCurrentWebView()>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: long getLong(int)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: double getDouble(int)>  -> _SOURCE_
<com.android.browser.DeviceAccountLogin: int getState()>  -> _SOURCE_
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getFreeSpaceSizeBytes()>  -> _SOURCE_
<com.android.browser.provider.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>  -> _SOURCE_
<com.android.browser.Preloader: com.android.browser.PreloadedTabControl getPreloadedTab(java.lang.String)>  -> _SOURCE_
<com.android.browser.search.DefaultSearchEngine: java.lang.CharSequence getLabel()>  -> _SOURCE_
<com.android.browser.Tab: android.view.View getViewContainer()>  -> _SOURCE_
<com.android.browser.Controller: android.os.Bundle createSaveState()>  -> _SOURCE_
<com.android.browser.TabControl: com.android.browser.Tab getCurrentTab()>  -> _SOURCE_
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)>  -> _SOURCE_
<com.android.browser.provider.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>  -> _SOURCE_
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine get(android.content.Context,java.lang.String)>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter$CursorSource: int getCount()>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.Preloader$PreloaderSession: com.android.browser.PreloadedTabControl getTabControl()>  -> _SOURCE_
<com.android.browser.BaseUi: android.app.Activity getActivity()>  -> _SOURCE_
<com.android.browser.Tab: long getId()>  -> _SOURCE_
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchAlwaysPreferenceString(android.content.Context)>  -> _SOURCE_
<com.android.browser.BrowserSettings: int getAdjustedDoubleTapZoom(int)>  -> _SOURCE_
<com.android.browser.preferences.WebsiteSettingsFragment$Site: android.graphics.Bitmap getIcon()>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.browser.Tab: int getLoadProgress()>  -> _SOURCE_
<com.android.browser.Tab: java.lang.String getOriginalUrl()>  -> _SOURCE_
<com.android.browser.PieControl$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.BaseUi: android.graphics.Bitmap getDefaultVideoPoster()>  -> _SOURCE_
<com.android.browser.Tab: android.graphics.Bitmap getScreenshot()>  -> _SOURCE_
<com.android.browser.TabScrollView: int getScroll()>  -> _SOURCE_
<com.android.browser.view.PieItem: int getInnerRadius()>  -> _SOURCE_
<com.android.browser.view.PieItem: com.android.browser.view.PieMenu$PieView getPieView()>  -> _SOURCE_
<com.android.browser.BrowserBookmarksAdapter: java.lang.Object getRowObject(android.database.Cursor,java.lang.Object)>  -> _SOURCE_
<com.android.browser.search.DefaultSearchEngine: java.lang.String getName()>  -> _SOURCE_
<com.android.browser.PreloadController: android.graphics.Bitmap getDefaultVideoPoster()>  -> _SOURCE_
<com.android.browser.homepages.Template$HashMapEntityData: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)>  -> _SOURCE_
<com.android.browser.view.PieItem: float getStart()>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: double getDouble(int)>  -> _SOURCE_
<com.android.browser.BrowserHistoryPage$HistoryAdapter: int getGroupCount()>  -> _SOURCE_
<com.android.browser.BrowserSettings: int getAdjustedMinimumFontSize(int)>  -> _SOURCE_
<com.android.browser.SnapshotTab: long getId()>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getCount()>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter$SuggestionResults: int getLineCount()>  -> _SOURCE_
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)>  -> _SOURCE_
<com.android.browser.BrowserWebView: int getTitleHeight()>  -> _SOURCE_
<com.android.browser.addbookmark.FolderSpinnerAdapter: int getCount()>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String getString(int)>  -> _SOURCE_
<android.webkit.BrowserFrame: java.lang.String getUserAgentString()>  -> _SOURCE_
<com.android.browser.TabControl: android.webkit.WebView getCurrentWebView()>  -> _SOURCE_
<com.android.browser.SuggestionsAdapter$SuggestCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()>  -> _SOURCE_
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)>  -> _SOURCE_
<com.android.browser.addbookmark.FolderSpinnerAdapter: java.lang.Object getItem(int)>  -> _SOURCE_
<com.android.browser.Controller: java.util.List getTabs()>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BrowserBookmarksAdapter getChildAdapter(int)>  -> _SOURCE_
<com.android.browser.Tab: android.webkit.WebView getSubWebView()>  -> _SOURCE_
<com.android.browser.Tab: android.net.http.SslError getSslCertificateError()>  -> _SOURCE_
<com.android.browser.DateSortedExpandableListAdapter: int getGroupCount()>  -> _SOURCE_
<com.android.browser.NavScreen$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: long getLong(int)>  -> _SOURCE_
<com.android.browser.BreadCrumbView: int getBaseline()>  -> _SOURCE_
<com.android.browser.BrowserSettings: int getDoubleTapZoom()>  -> _SOURCE_
<com.android.browser.BrowserSettings: int getMinimumFontSize()>  -> _SOURCE_
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>  -> _SOURCE_
<com.android.browser.BookmarkItem: java.lang.String getUrl()>  -> _SOURCE_
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String getString(int)>  -> _SOURCE_
<com.android.browser.PreloadController: com.android.browser.WebViewFactory getWebViewFactory()>  -> _SOURCE_
<com.android.browser.view.PieItem: int getLevel()>  -> _SOURCE_
<com.android.browser.homepages.HomeProvider: java.lang.String getType(android.net.Uri)>  -> _SOURCE_
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getLoadingView()>  -> _SOURCE_
<com.android.browser.TabControl: java.util.List getTabs()>  -> _SOURCE_
<com.android.browser.BrowserActivity: com.android.browser.Controller getController()>  -> _SOURCE_
<com.android.browser.Tab: java.lang.String getAppId()>  -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getDriverName(java.lang.String)>  -> _SOURCE_
<com.android.nfc.NfcService$TagService: int getTimeout(int)>  -> _SOURCE_
<android.nfc.INfcTag$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int[] getTechList(int)> android.permission.NFC  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parse(android.nfc.NdefMessage)>  -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.nfc.NfcService: byte[] doTransceiveNoLock(int,byte[])>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcTag: byte[] transceive(byte[],boolean,int[])>  -> _SOURCE_
<android.nfc.NdefRecord: int getByteLength()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()>  -> _SOURCE_
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverSelectMessage(boolean)>  -> _SOURCE_
<android.nfc.INdefPushCallback$Stub$Proxy: android.net.Uri[] getUris()>  -> _SOURCE_
<android.nfc.tech.NdefFormatable: byte[] transceive(byte[],boolean)> android.permission.NFC  -> _SOURCE_
<android.nfc.tech.Ndef: byte[] transceive(byte[],boolean)> android.permission.NFC  -> _SOURCE_
<com.android.nfc.P2pLinkManager: java.lang.String getMessageType(android.nfc.NdefMessage)>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothOobDataRecord()> android.permission.BLUETOOTH  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverRequestMessage()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] getGeneralBytes()>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseBtOob(java.nio.ByteBuffer)>  -> _SOURCE_
<android.nfc.tech.NfcBarcode: android.nfc.Tag getTag()> android.permission.STOP_APP_SWITCHES  -> _SOURCE_
<android.nfc.Tag: java.lang.String[] getTechList()>  -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: int getState()>  -> _SOURCE_
<android.nfc.Tag: byte[] getId()>  -> _SOURCE_
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[],boolean)> android.permission.NFC  -> _SOURCE_
<android.nfc.tech.NfcF: byte[] transceive(byte[],boolean)> android.permission.NFC  -> _SOURCE_
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)> android.permission.NFC  -> _SOURCE_
<com.android.nfc.handover.BluetoothOppHandover: java.lang.String getMimeTypeForUri(android.content.Context,android.net.Uri)>  -> _SOURCE_
<android.nfc.tech.NfcV: byte[] transceive(byte[],boolean)> android.permission.NFC  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: int getTimeout(int)>  -> _SOURCE_
<com.android.nfc.NfcService$NfcAdapterService: int getState()>  -> _SOURCE_
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseHandoverSelect(android.nfc.NdefMessage)>  -> _SOURCE_
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: byte getVersion()>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseNokia(java.nio.ByteBuffer)>  -> _SOURCE_
<android.nfc.NdefRecord: byte[] getPayload()>  -> _SOURCE_
<android.nfc.tech.NfcB: byte[] getProtocolInfo()>  -> _SOURCE_
<android.nfc.tech.NfcBarcode: byte[] getBarcode()>  -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] transceive(byte[],boolean)> android.permission.NFC  -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.NdefMessage ndefRead(int)>  -> _SOURCE_
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()>  -> _SOURCE_
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getSap()>  -> _SOURCE_
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getHandle()>  -> _SOURCE_
<android.nfc.NfcAdapter: android.content.Context getContext()>  -> _SOURCE_
<android.nfc.tech.MifareClassic: int getSize()>  -> _SOURCE_
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)>  -> _SOURCE_
<com.android.nfc.NfcService$NfcAdapterExtrasService: java.lang.String getDriverName(java.lang.String)>  -> _SOURCE_
<android.nfc.TransceiveResult: byte[] getResponseOrThrow()>  -> _SOURCE_
<com.android.nfc.NfcDispatcher: android.content.Intent getAppSearchIntent(java.lang.String)>  -> _SOURCE_
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()>  -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.TransceiveResult transceive(int,byte[],boolean)>  -> _SOURCE_
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcTag getNfcTagInterface()>  -> _SOURCE_
<android.nfc.tech.NfcV: byte getDsfId()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] transceive(byte[])>  -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)> android.permission.NFC  -> _SOURCE_
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] receive()>  -> _SOURCE_
<android.nfc.tech.MifareClassic: int getBlockCount()>  -> _SOURCE_
<android.nfc.tech.Ndef: android.nfc.Tag getTag()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionlessSocket(int,java.lang.String)>  -> _SOURCE_
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)>  -> _SOURCE_
<android.nfc.tech.NfcV: byte getResponseFlags()>  -> _SOURCE_
<android.nfc.tech.NfcV: byte[] transceive(byte[])>  -> _SOURCE_
<android.nfc.tech.NfcF: byte[] transceive(byte[])>  -> _SOURCE_
<android.nfc.tech.NfcA: byte[] transceive(byte[])>  -> _SOURCE_
<android.nfc.tech.NfcB: byte[] transceive(byte[])>  -> _SOURCE_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findResumedActivityState()>  -> _SOURCE_
<android.nfc.tech.MifareUltralight: android.nfc.tech.MifareUltralight get(android.nfc.Tag)>  -> _SOURCE_
<android.nfc.NfcAdapter: int getSdkVersion()>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerInTransferLocked(android.bluetooth.BluetoothDevice)>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getGetRequest(int,android.nfc.NdefMessage)>  -> _SOURCE_
<android.nfc.tech.NfcA: int getTimeout()>  -> _SOURCE_
<com.android.nfc.handover.HandoverTransfer: int getTransferId()>  -> _SOURCE_
<android.nfc.tech.NfcF: int getTimeout()> android.permission.NFC  -> _SOURCE_
<com.android.nfc.RegisteredComponentCache: java.util.ArrayList getComponents()>  -> _SOURCE_
<android.nfc.tech.NfcA: int getMaxTransceiveLength()>  -> _SOURCE_
<android.nfc.tech.NfcF: int getMaxTransceiveLength()>  -> _SOURCE_
<android.nfc.tech.NfcB: int getMaxTransceiveLength()>  -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)>  -> _SOURCE_
<android.nfc.tech.NfcV: int getMaxTransceiveLength()>  -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle transceive(java.lang.String,byte[])>  -> _SOURCE_
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)>  -> _SOURCE_
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()>  -> _SOURCE_
<android.nfc.NdefRecord: byte[] toByteArray()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteRw()>  -> _SOURCE_
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)>  -> _SOURCE_
<android.nfc.tech.NfcB: android.nfc.Tag getTag()>  -> _SOURCE_
<android.nfc.tech.NfcA: android.nfc.Tag getTag()>  -> _SOURCE_
<android.nfc.tech.NfcF: android.nfc.Tag getTag()>  -> _SOURCE_
<android.nfc.tech.NfcV: android.nfc.Tag getTag()>  -> _SOURCE_
<android.nfc.tech.Ndef: java.lang.String getType()>  -> _SOURCE_
<android.nfc.INdefPushCallback$Stub$Proxy: android.nfc.NdefMessage createMessage()>  -> _SOURCE_
<android.nfc.tech.NfcA: short getSak()>  -> _SOURCE_
<android.nfc.tech.NfcA: byte[] getAtqa()>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: byte[] addressToReverseBytes(java.lang.String)>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcTag: int[] getTechList()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: byte[][] getWipeApdus()>  -> _SOURCE_
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()>  -> _SOURCE_
<android.nfc.tech.NfcV: android.nfc.tech.NfcV get(android.nfc.Tag)>  -> _SOURCE_
<android.nfc.NdefMessage: int getByteArrayLength()>  -> _SOURCE_
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTagIntent()>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverSelectRecord(boolean)>  -> _SOURCE_
<android.nfc.tech.NfcF: byte[] getSystemCode()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalMiu()>  -> _SOURCE_
<com.android.nfc.SendUi: float getDegreesForRotation(int)>  -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()>  -> _SOURCE_
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)>  -> _SOURCE_
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()>  -> _SOURCE_
<com.android.nfc.NfcService: com.android.nfc.NfcService getInstance()>  -> _SOURCE_
<android.nfc.NfcActivityManager: android.net.Uri[] getUris()>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage tryHandoverRequest(android.nfc.NdefMessage)>  -> _SOURCE_
<android.nfc.TechListParcel: java.lang.String[][] getTechLists()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteMiu()>  -> _SOURCE_
<android.nfc.NdefMessage: byte[] toByteArray()>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: byte getField()>  -> _SOURCE_
<android.nfc.tech.NfcBarcode: int getType()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcTag: int getHandle()>  -> _SOURCE_
<android.nfc.Tag: android.nfc.INfcTag getTagService()>  -> _SOURCE_
<android.nfc.tech.NfcF: android.nfc.tech.NfcF get(android.nfc.Tag)>  -> _SOURCE_
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)>  -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.nfc.tech.NfcA: android.nfc.tech.NfcA get(android.nfc.Tag)>  -> _SOURCE_
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: android.nfc.NdefMessage getNdefMessage()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getLinkMiu()>  -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()>  -> _SOURCE_
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getSuccessResponse(android.nfc.NdefMessage)>  -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)>  -> _SOURCE_
<com.android.nfc.P2pLinkManager: int getMessageAarPresent(android.nfc.NdefMessage)>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String dump()>  -> _SOURCE_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findActivityState(android.app.Activity)>  -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcAdapter getService()>  -> _SOURCE_
<android.nfc.tech.MifareClassic: byte[] readBlock(int)>  -> _SOURCE_
<android.nfc.tech.MifareClassic: int getTimeout()>  -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()>  -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] transceive(byte[])> android.permission.NFC  -> _SOURCE_
<com.android.nfc.P2pLinkManager: android.nfc.NdefMessage createDefaultNdef(java.lang.String)>  -> _SOURCE_
<android.nfc.INfcAdapter$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.nfc.tech.IsoDep: int getTimeout()>  -> _SOURCE_
<android.nfc.tech.MifareClassic: byte[] transceive(byte[],boolean)> android.permission.NFC  -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: boolean isPresent(int)>  -> _SOURCE_
<com.android.nfc.LlcpPacket: byte[] getDataBuffer()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcTag: byte[] getUid()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalSap()>  -> _SOURCE_
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)>  -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcTag getNfcTagInterface()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcTag: byte[] readNdef()>  -> _SOURCE_
<com.android.nfc.snep.SnepClient: com.android.nfc.snep.SnepMessage get(android.nfc.NdefMessage)>  -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.nfc.INdefPushCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeP2pDevice: int getMode()>  -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter()>  -> _SOURCE_
<android.nfc.tech.NfcF: byte[] getManufacturer()>  -> _SOURCE_
<com.android.nfc.SendUi: android.graphics.Bitmap createScreenshot()>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverRequestRecord()>  -> _SOURCE_
<android.nfc.tech.BasicTagTechnology: int getMaxTransceiveLengthInternal()>  -> _SOURCE_
<com.android.nfc.ndefpush.NdefPushProtocol: byte[] toByteArray()>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createCollisionRecord()>  -> _SOURCE_
<com.android.nfc.snep.SnepMessenger: com.android.nfc.snep.SnepMessage getMessage()>  -> _SOURCE_
<android.nfc.tech.MifareUltralight: int getType()>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: byte[] toByteArray()>  -> _SOURCE_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState getActivityState(android.app.Activity)>  -> _SOURCE_
<com.android.nfc.P2pLinkManager: int getMessageTnf(android.nfc.NdefMessage)>  -> _SOURCE_
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>  -> _SOURCE_
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcTag: int getConnectedTechnology()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeP2pDevice: int getHandle()>  -> _SOURCE_
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()>  -> _SOURCE_
<android.nfc.tech.NfcB: byte[] getApplicationData()>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getMessage(byte)>  -> _SOURCE_
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTechIntent()>  -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle close(java.lang.String,android.os.IBinder)>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: int getLength()>  -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.Tag rediscover(int)>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpRwSize()>  -> _SOURCE_
<com.android.nfc.NfcService$TagService: int getMaxTransceiveLength(int)>  -> _SOURCE_
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()>  -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int getMaxTransceiveLength(int)>  -> _SOURCE_
<android.nfc.tech.MifareClassic: int getType()>  -> _SOURCE_
<com.android.nfc.handover.BluetoothHeadsetHandover: boolean getProfileProxys()>  -> _SOURCE_
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionLessSocket(int,java.lang.String)>  -> _SOURCE_
<android.nfc.Tag: int getServiceHandle()>  -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcTag getTagService()>  -> _SOURCE_
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)> android.permission.NFC  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: boolean getExtendedLengthApdusSupported()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalRw()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: int getMaxTransceiveLength(int)>  -> _SOURCE_
<android.nfc.tech.NfcBarcode: android.nfc.tech.NfcBarcode get(android.nfc.Tag)>  -> _SOURCE_
<com.android.nfc.ndefpush.NdefPushProtocol: android.nfc.NdefMessage getImmediate()>  -> _SOURCE_
<android.nfc.NdefRecord: byte[] getType()>  -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int getTimeout(int)>  -> _SOURCE_
<android.nfc.INdefPushCallback$Stub: android.os.IBinder asBinder()>  -> _SOURCE_
<android.nfc.Tag: int getConnectedTechnology()>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothAlternateCarrierRecord(boolean)>  -> _SOURCE_
<android.nfc.NdefRecord: byte[] getId()>  -> _SOURCE_
<com.android.nfc.NfcService: byte[] doTransceive(int,byte[])>  -> _SOURCE_
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerOutTransferLocked(com.android.nfc.handover.HandoverManager$BluetoothHandoverData,android.net.Uri[])>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcTag: android.os.Bundle[] getTechExtras()>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: int getAcceptableLength()>  -> _SOURCE_
<android.nfc.tech.MifareUltralight: int getTimeout()>  -> _SOURCE_
<android.nfc.tech.Ndef: int getMaxSize()>  -> _SOURCE_
<android.nfc.tech.MifareUltralight: byte[] readPages(int)>  -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> android.permission.NFC  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String getName()>  -> _SOURCE_
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpMiu()>  -> _SOURCE_
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getPutRequest(android.nfc.NdefMessage)>  -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: boolean isNdef(int)>  -> _SOURCE_
<android.nfc.tech.MifareClassic: int getSectorCount()>  -> _SOURCE_
<android.nfc.NfcAdapter: int getAdapterState()>  -> _SOURCE_
<com.android.nfc.LlcpPacket: int getRemoteSap()>  -> _SOURCE_
<android.nfc.NdefRecord: short getTnf()>  -> _SOURCE_
<android.nfc.Tag: android.os.Bundle getTechExtras(int)>  -> _SOURCE_
<com.android.nfc.NfcService$NfcAdapterExtrasService: int getCardEmulationRoute(java.lang.String)> android.permission.NFC  -> _SOURCE_
<com.android.nfc.NfcService$TagService: int[] getTechList(int)>  -> _SOURCE_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcApplicationState findAppState(android.app.Application)>  -> _SOURCE_
<com.android.nfc.P2pLinkManager: int getMessageSize(android.nfc.NdefMessage)>  -> _SOURCE_
<android.nfc.NfcActivityManager: android.nfc.NdefMessage createMessage()>  -> _SOURCE_
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()>  -> _SOURCE_

<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)>  -> _SINK_
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_LOCATION_EXTRA_COMMANDS android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_MOCK_LOCATION  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)>  -> _SINK_
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>  -> _SINK_
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>  -> _SINK_
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>  -> _SINK_
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>  -> _SINK_
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> android.permission.ACCESS_LOCATION_EXTRA_COMMANDS android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>  -> _SINK_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)>  -> _SINK_
<android.location.LocationManager: boolean sendNiResponse(int,int)>  -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)>  -> _SINK_
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_LOCATION_EXTRA_COMMANDS android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_MOCK_LOCATION  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void addApnContextSync(com.android.internal.telephony.ApnContext)>  -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void notifyTetheredOfNewUpstreamIface(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.CallManager: boolean sendDtmf(char)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void sendUssdResponse(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void notify(int)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendDtmf(char)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult updateLinkPropertiesDataCallStateSync(com.android.internal.telephony.DataCallState)>  -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> android.permission.READ_PHONE_STATE android.permission.BLUETOOTH android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_NETWORK_STATE android.permission.BLUETOOTH_ADMIN android.permission.ACCESS_NETWORK_STATE  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void setReconnectIntentSync(android.app.PendingIntent)>  -> _SINK_
<com.android.internal.telephony.CallManager: boolean sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetReconnectIntent(android.app.PendingIntent)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void sendUssdResponse(java.lang.String)>  -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> android.permission.READ_PHONE_STATE android.permission.BLUETOOTH android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_NETWORK_STATE android.permission.BLUETOOTH_ADMIN android.permission.ACCESS_NETWORK_STATE  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void sendDtmf(char)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> android.permission.READ_PHONE_STATE android.permission.BLUETOOTH android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_NETWORK_STATE android.permission.BLUETOOTH_ADMIN android.permission.ACCESS_NETWORK_STATE  -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  -> _SINK_
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)>  -> _SINK_
<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)>  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void setLinkPropertiesHttpProxySync(android.net.ProxyProperties)>  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void removeApnContextSync(com.android.internal.telephony.ApnContext)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void startDtmf(char)>  -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> android.permission.USE_SIP  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.Connection dial(java.lang.String)> android.permission.WAKE_LOCK  -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEnded(android.net.sip.ISipSession)>  -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void setListener(android.net.sip.ISipSessionListener)>  -> _SINK_
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)>  -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>  -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> android.permission.USE_SIP android.permission.WAKE_LOCK  -> _SINK_
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)>  -> _SINK_
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistering(android.net.sip.ISipSession)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationTimeout(android.net.sip.ISipSession)>  -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRingingBack(android.net.sip.ISipSession)>  -> _SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onError(android.net.sip.ISipSession,int,java.lang.String)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationDone(android.net.sip.ISipSession,int)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)> android.permission.WAKE_LOCK  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallBusy(android.net.sip.ISipSession)>  -> _SINK_
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)>  -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void access$200(android.net.sip.SimpleSessionDescription$Fields,java.lang.StringBuilder)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> android.permission.USE_SIP  -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)>  -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)>  -> _SINK_
<com.android.phone.sip.SipProfileDb: void saveProfile(android.net.sip.SipProfile)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)>  -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCalling(android.net.sip.ISipSession)>  -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDisconnect(com.android.internal.telephony.Connection)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataConnectionStateChanged(int,int)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY  -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY  -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)>  -> _SINK_
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY  -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ApnContext: void setDataConnection(com.android.internal.telephony.DataConnection)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccRefresh(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY  -> _SINK_
<com.android.internal.telephony.IccCardProxy: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>  -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyDataConnection(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDisconnectP(com.android.internal.telephony.Connection)>  -> _SINK_
<com.android.internal.telephony.ApnContext: void setDataConnectionAc(com.android.internal.telephony.DataConnectionAc)>  -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>  -> _SINK_
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.IccCardProxy: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY  -> _SINK_
<com.android.emailcommon.internet.MimeHeader: void setHeader(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(long)>  -> _SINK_
<com.android.email.service.EmailServiceUtils$NullEmailService: void setLogging(int)>  -> _SINK_
<com.android.email.activity.setup.DebugFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)>  -> _SINK_
<com.android.email.mail.transport.EOLConvertingOutputStream: void write(int)>  -> _SINK_
<com.android.email.NotificationController: void showPasswordExpiredNotification(long)>  -> _SINK_
<com.android.email.Controller$LegacyListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)>  -> _SINK_
<com.android.email.activity.MessageViewFragment: com.android.email.activity.MessageViewFragment newInstance(long)>  -> _SINK_
<com.android.email.RefreshManager: boolean refreshMailboxList(long)>  -> _SINK_
<com.android.email.provider.ContentCache$CounterMap: void add(java.lang.Object)>  -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.email.Controller: boolean isMessagingController(long)>  -> _SINK_
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment newInstance(android.content.Context,com.android.emailcommon.provider.Account,java.lang.Integer)>  -> _SINK_
<com.android.email.MessagingController: void checkMail(long,long,com.android.email.MessagingListener)>  -> _SINK_
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.app.Activity,int,int)>  -> _SINK_
<com.android.email.RefreshManager$ControllerResult: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)>  -> _SINK_
<com.android.email.Controller$LegacyListener: void sendPendingMessagesStarted(long,long)>  -> _SINK_
<com.android.email.activity.setup.AccountSettings: void onEditQuickResponses(com.android.emailcommon.provider.Account)>  -> _SINK_
<com.android.email.activity.setup.AccountSettingsUtils: void commitSettings(android.content.Context,com.android.emailcommon.provider.Account)>  -> _SINK_
<com.android.email.RefreshManager$ControllerResult: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)>  -> _SINK_
<com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,long,boolean)>  -> _SINK_
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)>  -> _SINK_
<com.android.email.service.AttachmentDownloadService$ServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)>  -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void notifyLoginFailed(long)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean deleteFolder(long,java.lang.String)>  -> _SINK_
<com.android.email.Controller: void sendMessage(com.android.emailcommon.provider.EmailContent$Message)>  -> _SINK_
<com.android.email.activity.MailboxListItem: void setDropTargetBackground(boolean,long)>  -> _SINK_
<com.android.email.mail.store.ImapConnection: java.lang.String sendComplexCommand(java.util.List,boolean)>  -> _SINK_
<com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment: com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment newInstance(java.lang.String)>  -> _SINK_
<com.android.email.Controller$LegacyListener: void listFoldersFailed(long,java.lang.String)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)>  -> _SINK_
<com.android.emailcommon.provider.EmailContent$Message: android.net.Uri save(android.content.Context)>  -> _SINK_
<com.android.email.activity.setup.AccountSettings: android.content.Intent createAccountSettingsIntent(android.content.Context,long,java.lang.String)>  -> _SINK_
<com.android.emailcommon.service.AccountServiceProxy: void notifyLoginSucceeded(long)>  -> _SINK_
<com.android.email.activity.MessageListItem: void setTimestamp(long)>  -> _SINK_
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountPolicy(android.content.Context,long,com.android.emailcommon.provider.Policy,java.lang.String)>  -> _SINK_
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean renameFolder(long,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.email.activity.MessageListFragment: void setLayout(com.android.email.activity.ThreePaneLayout)>  -> _SINK_
<com.android.email.activity.setup.MailboxSettings: void start(android.app.Activity,long)>  -> _SINK_
<com.android.email.activity.UIControllerTwoPane: void openInternal(com.android.email.MessageListContext,long)>  -> _SINK_
<com.android.email.activity.setup.AccountSettings$LoginWarningDialog: com.android.email.activity.setup.AccountSettings$LoginWarningDialog newInstance(java.lang.String)>  -> _SINK_
<com.android.email.activity.EmailActivity$ControllerResult: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)>  -> _SINK_
<com.android.email.MessagingController$8: void onMessageUidChange(com.android.emailcommon.mail.Message,java.lang.String)>  -> _SINK_
<com.android.email.MessagingController$9: void onMessageUidChange(com.android.emailcommon.mail.Message,java.lang.String)>  -> _SINK_
<com.android.email.activity.MessageCompose: boolean actionCompose(android.content.Context,java.lang.String,long)>  -> _SINK_
<com.android.email.Preferences: void setEnableStrictMode(boolean)>  -> _SINK_
<com.android.email.Preferences: void setLastUsedAccountId(long)>  -> _SINK_
<com.android.email.MessagingController: void listFolders(long,com.android.email.MessagingListener)>  -> _SINK_
<com.android.email.Controller: int searchMessages(long,com.android.emailcommon.service.SearchParams)>  -> _SINK_
<com.android.email.activity.ActivityHelper: boolean openUrlInMessage(android.app.Activity,java.lang.String,long)>  -> _SINK_
<com.android.email.service.EmailBroadcastProcessorService: void processDevicePolicyMessage(android.content.Context,int)>  -> _SINK_
<com.android.email.service.AttachmentDownloadService: boolean canPrefetchForAccount(com.android.emailcommon.provider.Account,java.io.File)>  -> _SINK_
<com.android.email.Preferences: void setTextZoom(int)>  -> _SINK_
<com.android.email.service.EmailServiceUtils$NullEmailService: void sendMeetingResponse(long,int)>  -> _SINK_
<com.android.emailcommon.service.AccountServiceProxy: void notifyLoginFailed(long)>  -> _SINK_
<com.android.email.activity.setup.MailboxSettings: void setupLookbackPreferenceOptions(android.content.Context,android.preference.ListPreference,com.android.emailcommon.provider.Account)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void setCallback(com.android.emailcommon.service.IEmailServiceCallback)>  -> _SINK_
<com.android.email.activity.MessageCompose: void setFocusShifter(int,int)>  -> _SINK_
<com.android.emailcommon.service.EmailServiceProxy: void sendMeetingResponse(long,int)>  -> _SINK_
<com.android.emailcommon.service.EmailServiceProxy: void setLogging(int)>  -> _SINK_
<com.android.emailcommon.service.EmailServiceProxy: void sendMail(long)>  -> _SINK_
<com.android.email.service.PolicyService$1: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)>  -> _SINK_
<com.android.email.activity.DeleteMessageConfirmationDialog: com.android.email.activity.DeleteMessageConfirmationDialog newInstance(int,android.app.Fragment)>  -> _SINK_
<com.android.email.Preferences: void setAutoAdvanceDirection(int)>  -> _SINK_
<com.android.email.Controller$ServiceCallback: void syncMailboxStatus(long,int,int)>  -> _SINK_
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)>  -> _SINK_
<com.android.email.activity.setup.AccountSetupActivity: void onSaveInstanceState(android.os.Bundle)>  -> _SINK_
<com.android.email.activity.MessageListFragment: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>  -> _SINK_
<com.android.email.view.CertificateSelector$SavedState: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.email.Email: boolean setServicesEnabledSync(android.content.Context)>  -> _SINK_
<com.android.email.mail.store.ImapFolder: void fetchInternal(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.FetchProfile,com.android.emailcommon.mail.Folder$MessageRetrievalListener)>  -> _SINK_
<com.android.email.mail.store.imap.ImapList: boolean is(int,java.lang.String,boolean)>  -> _SINK_
<com.android.email.service.AttachmentDownloadService$DownloadSet: void endDownload(long,int)>  -> _SINK_
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.view.View,int,int)>  -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadMessageStatus(long,int,int)>  -> _SINK_
<com.android.email.Controller$LegacyListener: void sendPendingMessagesCompleted(long)>  -> _SINK_
<com.android.email.MessagingListener: void sendPendingMessagesStarted(long,long)>  -> _SINK_
<com.android.emailcommon.provider.Account: void refresh(android.content.Context)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean createFolder(long,java.lang.String)>  -> _SINK_
<com.android.email.activity.MessageViewFragment: void onMessageShown(long,com.android.emailcommon.provider.Mailbox)>  -> _SINK_
<com.android.email.activity.ThreePaneLayout: void setMessageListWidthAnim(int)>  -> _SINK_
<com.android.email.Preferences: void setEnableExchangeLogging(boolean)>  -> _SINK_
<com.android.emailcommon.internet.MimeBodyPart: void setHeader(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.email.activity.InsertQuickResponseDialog: com.android.email.activity.InsertQuickResponseDialog newInstance(android.app.Fragment,com.android.emailcommon.provider.Account)>  -> _SINK_
<com.android.email.activity.MessageViewFragmentBase: void onCreate(android.os.Bundle)>  -> _SINK_
<com.android.email.GroupMessagingListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)>  -> _SINK_
<com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog newInstance(java.lang.String)>  -> _SINK_
<com.android.email.mail.store.ImapStore$ImapMessage: void setFlagInternal(com.android.emailcommon.mail.Flag,boolean)>  -> _SINK_
<com.android.email.service.EmailBroadcastProcessorService: void processBroadcastIntent(android.content.Context,android.content.Intent)>  -> _SINK_
<com.android.email.activity.Welcome: void startActivity(android.content.Intent)>  -> _SINK_
<com.android.email.mail.store.ImapFolder: void copyMessages(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Folder,com.android.emailcommon.mail.Folder$MessageUpdateCallbacks)>  -> _SINK_
<com.android.email.LegacyConversions: void saveAttachmentBody(android.content.Context,com.android.emailcommon.mail.Part,com.android.emailcommon.provider.EmailContent$Attachment,long)>  -> _SINK_
<com.android.emailcommon.mail.PackedString$Builder: void put(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>  -> _SINK_
<com.android.emailcommon.internet.Rfc822Output: void writeTo(android.content.Context,long,java.io.OutputStream,boolean,boolean)>  -> _SINK_
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)>  -> _SINK_
<com.android.email.activity.MoveMessageToDialog: com.android.email.activity.MoveMessageToDialog newInstance(long[],android.app.Fragment)>  -> _SINK_
<com.android.email.GroupMessagingListener: void addListener(com.android.email.MessagingListener)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void stopSync(long)>  -> _SINK_
<com.android.emailcommon.mail.Message: boolean isMimeType(java.lang.String)>  -> _SINK_
<com.android.email.MessagingListener: void sendPendingMessagesCompleted(long)>  -> _SINK_
<com.android.email.activity.UIControllerBase: void onSearchSubmit(java.lang.String)>  -> _SINK_
<com.android.email.Preferences: void setEnableDebugLogging(boolean)>  -> _SINK_
<com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)>  -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxListStatus(long,int,int)>  -> _SINK_
<com.android.email.NotificationController: void setupSoundAndVibration(android.app.Notification$Builder,com.android.emailcommon.provider.Account)>  -> _SINK_
<com.android.email.activity.setup.AccountSecurity: android.content.Intent actionDevicePasswordExpirationIntent(android.content.Context,long,boolean)>  -> _SINK_
<com.android.email.activity.MailboxListItem: void setBackgroundDrawable(android.graphics.drawable.Drawable)>  -> _SINK_
<com.android.email.activity.setup.AccountSettingsFragment: android.os.Bundle buildArguments(long,java.lang.String)>  -> _SINK_
<com.android.email.ControllerResultUiThreadWrapper: void setRegistered(boolean)>  -> _SINK_
<com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog: com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog newInstance(java.lang.String,boolean)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void startSync(long,boolean)>  -> _SINK_
<com.android.email.activity.setup.DuplicateAccountDialogFragment: com.android.email.activity.setup.DuplicateAccountDialogFragment newInstance(java.lang.String)>  -> _SINK_
<com.android.email.LegacyConversions: int inferMailboxTypeFromName(android.content.Context,java.lang.String)>  -> _SINK_
<com.android.email.Preferences: void setSenderAsTrusted(java.lang.String)>  -> _SINK_
<com.android.email.activity.setup.AccountSettings$UnsavedChangesDialogFragment: com.android.email.activity.setup.AccountSettings$UnsavedChangesDialogFragment newInstanceForHeader(int)>  -> _SINK_
<com.android.emailcommon.provider.Mailbox: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.email.MessagingController: void loadAttachment(long,long,long,long,com.android.email.MessagingListener,boolean)>  -> _SINK_
<com.android.email.service.MailService: void setupSyncReportsLocked(long,android.content.Context)>  -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void notifyLoginSucceeded(long)>  -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Message: void setSize(int)>  -> _SINK_
<com.android.email.Preferences: void setEnableExchangeFileLogging(boolean)>  -> _SINK_
<com.android.email.activity.setup.AccountSetupExchangeFragment: boolean setHostAuthFromAutodiscover(com.android.emailcommon.provider.HostAuth)>  -> _SINK_
<com.android.email.Controller: void sendMeetingResponse(long,int)>  -> _SINK_
<com.android.email.Preferences: void setForceOneMinuteRefresh(boolean)>  -> _SINK_
<com.android.email.mail.store.ImapStore$ImapMessage: void setSize(int)>  -> _SINK_
<com.android.email.provider.EmailProvider: void restoreIfNeeded(android.content.Context,android.database.sqlite.SQLiteDatabase)>  -> _SINK_
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountHoldFlag(long,boolean)>  -> _SINK_
<com.android.email.activity.MessageListItemCoordinates: com.android.email.activity.MessageListItemCoordinates forWidth(android.content.Context,int,boolean)>  -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)>  -> _SINK_
<com.android.email.activity.setup.AccountSettings$AccountServerSettingsFragmentCallback: void onProceedNext(int,com.android.email.activity.setup.AccountServerBaseFragment)>  -> _SINK_
<com.android.email.MessageListContext: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.email.activity.ThreePaneLayout$SavedState: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>  -> _SINK_
<com.android.email.mail.store.ImapStore$ImapMessage: void setFlag(com.android.emailcommon.mail.Flag,boolean)>  -> _SINK_
<com.android.email.Controller: void setMessageFavoriteSync(long,boolean)>  -> _SINK_
<com.android.email.ControllerResultUiThreadWrapper: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)>  -> _SINK_
<com.android.email.activity.UIControllerOnePane: boolean onUrlInMessageClicked(java.lang.String)>  -> _SINK_
<com.android.email.activity.MessageListFragment: com.android.email.activity.MessageListFragment newInstance(com.android.email.MessageListContext)>  -> _SINK_
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void setAccountHoldFlag(long,boolean)>  -> _SINK_
<com.android.email.activity.MessagesAdapter: void toggleSelected(com.android.email.activity.MessageListItem)>  -> _SINK_
<com.android.emailcommon.provider.Account: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.email.mail.transport.MailTransport: void writeLine(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.view.View,int)>  -> _SINK_
<com.android.emailcommon.provider.Policy: void setAttachmentFlagsForNewPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy)>  -> _SINK_
<com.android.email.MessagingController: void sendPendingMessages(com.android.emailcommon.provider.Account,long,com.android.email.MessagingListener)>  -> _SINK_
<com.android.email.activity.setup.AccountSettings: android.content.Intent onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,int,int)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMail(long)>  -> _SINK_
<com.android.email.Preferences: void setOneTimeInitializationProgress(int)>  -> _SINK_
<com.android.email.SecurityPolicy: void setAccountPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy,java.lang.String)>  -> _SINK_
<com.android.email.service.EmailServiceUtils: void startService(android.content.Context,java.lang.String)>  -> _SINK_
<com.android.email.activity.AttachmentInfoDialog: com.android.email.activity.AttachmentInfoDialog newInstance(android.content.Context,int)>  -> _SINK_
<com.android.email.activity.setup.AccountSecurity: android.content.Intent actionUpdateSecurityIntent(android.content.Context,long,boolean)>  -> _SINK_
<com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment: com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment newInstance(com.android.emailcommon.provider.Account,android.app.Fragment)>  -> _SINK_
<com.android.email.MessagingController: void processPendingActions(long)>  -> _SINK_
<com.android.emailcommon.mail.Address: void setAddress(java.lang.String)>  -> _SINK_
<com.android.email.mail.store.ImapConnection: java.lang.String sendCommand(java.lang.String,boolean)>  -> _SINK_
<com.android.email.GroupMessagingListener: void sendPendingMessagesCompleted(long)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.email.RefreshManager$ControllerResult: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)>  -> _SINK_
<com.android.email.activity.UIControllerOnePane: void onSaveInstanceState(android.os.Bundle)>  -> _SINK_
<com.android.email.Preferences: void setHasShownRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account,boolean)>  -> _SINK_
<com.android.email.Controller: void sendPendingMessages(long)>  -> _SINK_
<com.android.email.activity.MessageListFragment: void onActivityCreated(android.os.Bundle)>  -> _SINK_
<com.android.email.Controller: com.android.emailcommon.utility.EmailAsyncTask setMessageFavorite(long,boolean)>  -> _SINK_
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)>  -> _SINK_
<com.android.email.NotificationController: void showPasswordExpiringNotification(long)>  -> _SINK_
<com.android.email.MessagingController: void loadMessageForView(long,com.android.email.MessagingListener)>  -> _SINK_
<com.android.email.service.MailService: void actionSendPendingMail(android.content.Context,long)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)>  -> _SINK_
<com.android.email.activity.MessageViewFragment: com.android.emailcommon.provider.EmailContent$Message openMessageSync(android.app.Activity)>  -> _SINK_
<com.android.email.activity.EmailActivity: android.content.Intent createSearchIntent(android.app.Activity,long,long,java.lang.String)>  -> _SINK_
<com.android.email.activity.MailboxFragmentAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>  -> _SINK_
<com.android.email.service.PolicyService$1: void setAccountHoldFlag(long,boolean)>  -> _SINK_
<com.android.email.Preferences: void setInhibitGraphicsAcceleration(boolean)>  -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxStatus(long,int,int)>  -> _SINK_
<com.android.email.VendorPolicyLoader: com.android.email.activity.setup.AccountSettingsUtils$Provider findProviderForDomain(java.lang.String)>  -> _SINK_
<com.android.email.Controller: void loadAttachment(long,long,long)>  -> _SINK_
<com.android.email.RecipientAdapter: void setAccount(android.accounts.Account)>  -> _SINK_
<com.android.email.mail.store.ImapFolder: void save(android.content.Context)>  -> _SINK_
<com.android.email.Controller: void updateMailbox(long,long,boolean)>  -> _SINK_
<com.android.email.MessagingController: void sendPendingMessagesSynchronous(com.android.emailcommon.provider.Account,long)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(long,boolean)>  -> _SINK_
<com.android.email.SecurityPolicy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)>  -> _SINK_
<com.android.email.activity.setup.EditQuickResponseDialog: com.android.email.activity.setup.EditQuickResponseDialog newInstance(com.android.emailcommon.provider.QuickResponse,long)>  -> _SINK_
<com.android.email.Controller$ServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)>  -> _SINK_
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.email.SecurityPolicy: void policiesRequired(long)>  -> _SINK_
<com.android.emailcommon.internet.MimeMessage: void setHeader(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.email.mail.transport.MailTransport: void setSoTimeout(int)>  -> _SINK_
<com.android.email.activity.setup.AccountSetupActivity: void onCreate(android.os.Bundle)>  -> _SINK_
<com.android.email.activity.UIControllerTwoPane: boolean onUrlInMessageClicked(java.lang.String)>  -> _SINK_
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void sendMessageStatus(long,java.lang.String,int,int)>  -> _SINK_
<com.android.email.GroupMessagingListener: void sendPendingMessagesStarted(long,long)>  -> _SINK_
<com.android.emailcommon.provider.EmailContent: int update(android.content.Context,android.content.ContentValues)>  -> _SINK_
<com.android.email.mail.store.ImapFolder: void setFlags(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Flag[],boolean)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void hostChanged(long)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void setLogging(int)>  -> _SINK_
<com.android.email.Email: void enableStrictMode(boolean)>  -> _SINK_
<com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog: com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog newInstance(android.content.Context,com.android.email.activity.setup.AccountCheckSettingsFragment,com.android.emailcommon.mail.MessagingException)>  -> _SINK_
<com.android.email.RefreshManager: boolean sendPendingMessages(long)>  -> _SINK_
<com.android.email.MessagingController$4: void messageRetrieved(com.android.emailcommon.mail.Message)>  -> _SINK_
<com.android.email.activity.MessageCompose: void setMessageContentSelection(java.lang.String)>  -> _SINK_
<com.android.email.service.EmailBroadcastProcessorService: void setImapDeletePolicy(android.content.Context)>  -> _SINK_
<com.android.email.activity.MessageListFragment$1: void setField(long,boolean)>  -> _SINK_
<com.android.email.activity.MessageListFragment$2: void setField(long,boolean)>  -> _SINK_
<com.android.email.Controller: void setMessageReadSync(long,boolean)>  -> _SINK_
<com.android.email.activity.MailboxListFragment: com.android.email.activity.MailboxListFragment newInstance(long,long,boolean)>  -> _SINK_
<com.android.email.Controller: com.android.emailcommon.utility.EmailAsyncTask setMessageRead(long,boolean)>  -> _SINK_
<com.android.email.service.AttachmentDownloadService: void addServiceIntentForTest(long,android.content.Intent)>  -> _SINK_
<com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog: com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog newInstance(com.android.email.activity.setup.AccountCheckSettingsFragment,java.lang.String)>  -> _SINK_
<com.android.email.Controller$ServiceCallback: void syncMailboxListStatus(long,int,int)>  -> _SINK_
<com.android.email.MessagingListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)>  -> _SINK_
<com.android.email.service.EmailServiceUtils$NullEmailService: void sendMail(long)>  -> _SINK_
<com.android.email.Controller$LegacyListener: void synchronizeMailboxStarted(long,long)> android.permission.READ_SYNC_SETTINGS  -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Message: void setFlag(com.android.emailcommon.mail.Flag,boolean)>  -> _SINK_
<com.android.email.service.MailService$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)> android.permission.READ_SYNC_SETTINGS  -> _SINK_
<com.android.email.mail.store.Pop3Store$Pop3Folder: void setFlags(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Flag[],boolean)>  -> _SINK_
<com.android.email.MessagingController: void copyOneMessageToProvider(com.android.emailcommon.mail.Message,com.android.emailcommon.provider.EmailContent$Message,int,android.content.Context)>  -> _SINK_
<com.android.email.NotificationController: void showDownloadForwardFailedNotification(com.android.emailcommon.provider.EmailContent$Attachment)>  -> _SINK_
<com.android.email.activity.MailboxListFragment: void onCreate(android.os.Bundle)>  -> _SINK_
<com.android.email.activity.MessageCompose: void setIntent(android.content.Intent)>  -> _SINK_
<com.android.email.Controller: void setMessageAnsweredOrForwarded(long,int)>  -> _SINK_
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadMore(long)>  -> _SINK_
<com.android.email.NotificationController: void showLoginFailedNotification(long)>  -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: boolean connect(android.bluetooth.BluetoothDevice)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterState$OffState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setScanMode(int,int)>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void unregisterCallback(android.bluetooth.IBluetoothCallback)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])>  -> _SINK_
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setDiscoverableTimeout(int)>  -> _SINK_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean sendDtmf(int)>  -> _SINK_
<com.android.bluetooth.Utils: byte[] uuidsToByteArray(android.os.ParcelUuid[])>  -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>  -> _SINK_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setTeardownRequested(boolean)>  -> _SINK_
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setScanMode(int,int)>  -> _SINK_
<com.android.bluetooth.Utils: void copyStream(java.io.InputStream,java.io.OutputStream,int)>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])>  -> _SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])>  -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: boolean setRadio(boolean)>  -> _SINK_
<com.android.bluetooth.opp.BluetoothOppManager: void saveSendingFileInfo(java.lang.String,java.lang.String,boolean)>  -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.opp.BluetoothOppManager: void saveSendingFileInfo(java.lang.String,java.util.ArrayList,boolean)>  -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.hdp.HealthService: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)>  -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)>  -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.BLUETOOTH android.permission.WRITE_SETTINGS android.permission.BLUETOOTH_ADMIN android.permission.WAKE_LOCK android.permission.MODIFY_AUDIO_SETTINGS  -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>  -> _SINK_
<com.android.bluetooth.opp.BluetoothOppUtility: void openReceivedFile(android.content.Context,java.lang.String,java.lang.String,java.lang.Long,android.net.Uri)>  -> _SINK_
<com.android.bluetooth.opp.Constants: void updateShareStatus(android.content.Context,int,int)>  -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: boolean processMessage(android.os.Message)>  -> _SINK_
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setDependencyMet(boolean)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: boolean setDiscoverableTimeout(int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterState$OnState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.bluetooth.btservice.ProfileService: void notifyProfileServiceStateChanged(int)>  -> _SINK_
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: void onProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)>  -> _SINK_
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])>  -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: boolean setName(java.lang.String)>  -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: void setProfileAutoConnectionPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void pinRequestCallback(byte[],byte[],int)>  -> _SINK_
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)>  -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.bluetooth.a2dp.A2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.btservice.BondStateMachine$StableState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.bluetooth.hid.HidService: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)>  -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>  -> _SINK_
<com.android.bluetooth.hid.HidService: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)>  -> _SINK_
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void devicePropertyChangedCallback(byte[],int[],byte[][])>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)>  -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)>  -> _SINK_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>  -> _SINK_
<com.android.bluetooth.Utils: byte[] uuidToByteArray(android.os.ParcelUuid)>  -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setDeviceOutOfBandData(byte[],byte[])>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])>  -> _SINK_
<com.android.bluetooth.hid.HidService: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)>  -> _SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setName(java.lang.String)>  -> _SINK_
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: boolean setUuids(android.os.ParcelUuid[])>  -> _SINK_
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)>  -> _SINK_
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)>  -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)>  -> _SINK_
<com.android.bluetooth.opp.BluetoothOppPreference: void setChannel(android.bluetooth.BluetoothDevice,int,int)>  -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setName(java.lang.String)>  -> _SINK_
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)>  -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)>  -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>  -> _SINK_
<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: void onBluetoothServiceUp(android.bluetooth.IBluetooth)>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)>  -> _SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)>  -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setUserDataEnable(boolean)>  -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void phoneStateChanged(int,int,int,java.lang.String,int)>  -> _SINK_
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void deviceFoundCallback(byte[])>  -> _SINK_
<com.android.bluetooth.hid.HidService: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapReceiver: void onReceive(android.content.Context,android.content.Intent)>  -> _SINK_
<com.android.bluetooth.Utils: byte[] intToByteArray(int)>  -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])>  -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)>  -> _SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)>  -> _SINK_
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.bluetooth.opp.BluetoothOppService$2: void handleMessage(android.os.Message)>  -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setPolicyDataEnable(boolean)>  -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapVcardManager$HandlerForStringBuffer: boolean onEntryCreated(java.lang.String)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>  -> _SINK_
<android.bluetooth.BluetoothServerSocket: void setServiceName(java.lang.String)>  -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)>  -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>  -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: com.android.bluetooth.btservice.RemoteDevices$DeviceProperties addDeviceProperties(byte[])>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)>  -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)>  -> _SINK_
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> android.permission.READ_PHONE_STATE com.android.voicemail.permission.ADD_VOICEMAIL android.permission.BLUETOOTH android.permission.READ_SOCIAL_STREAM android.permission.READ_CALL_LOG android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.BLUETOOTH_ADMIN android.permission.WAKE_LOCK  -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>  -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: boolean enable(boolean)>  -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: void setAlias(java.lang.String)>  -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.bluetooth.hfp.HeadsetService: boolean connect(android.bluetooth.BluetoothDevice)>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void registerCallback(android.bluetooth.IBluetoothCallback)>  -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)>  -> _SINK_
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.btservice.ProfileService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)>  -> _SINK_
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>  -> _SINK_
<android.bluetooth.IBluetoothCallback$Stub$Proxy: void onBluetoothStateChange(int,int)>  -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void clccResponse(int,int,int,int,boolean,java.lang.String,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])>  -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>  -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void aclStateChangeCallback(int,byte[],int)>  -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>  -> _SINK_
<com.android.bluetooth.opp.TestTcpServer: int onPut(javax.obex.Operation)>  -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)>  -> _SINK_
<com.android.bluetooth.opp.BluetoothOppUtility: void retryTransfer(android.content.Context,com.android.bluetooth.opp.BluetoothOppTransferInfo)>  -> _SINK_
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>  -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)>  -> _SINK_
<com.android.bluetooth.opp.BluetoothOppReceiver: void onReceive(android.content.Context,android.content.Intent)>  -> _SINK_
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)>  -> _SINK_
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)>  -> _SINK_
<com.android.bluetooth.btservice.RemoteDevices: void sspRequestCallback(byte[],byte[],int,int,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setDiscoverableTimeout(int)>  -> _SINK_
<com.android.bluetooth.opp.BluetoothOppPreference: void setName(android.bluetooth.BluetoothDevice,java.lang.String)>  -> _SINK_
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterService: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>  -> _SINK_
<com.android.bluetooth.btservice.AdapterProperties: boolean setScanMode(int)>  -> _SINK_
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)>  -> _SINK_
<android.accounts.AccountManagerService: boolean access$1100(android.accounts.AccountManagerService,android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.accounts.IAccountAuthenticator$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.accounts.AccountManagerService: void installNotification(int,android.app.Notification,android.os.UserHandle)>  -> _SINK_
<android.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> android.permission.USE_CREDENTIALS  -> _SINK_
<android.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void sendResult()>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>  -> _SINK_
<android.test.IsolatedContext$MockAccountManager: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS  -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> android.permission.SET_WALLPAPER android.permission.MANAGE_APP_TOKENS  -> _SINK_
<android.accounts.AccountManagerService: java.util.HashMap readAuthTokensForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>  -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void setRequestedOrientation(int)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS android.permission.UPDATE_DEVICE_STATS android.permission.DEVICE_POWER android.permission.WAKE_LOCK  -> _SINK_
<android.accounts.AccountManagerService: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS  -> _SINK_
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SINK_
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> android.permission.MANAGE_ACCOUNTS  -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>  -> _SINK_
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)>  -> _SINK_
<android.accounts.AccountAuthenticatorCache$MySerializer: void writeAsXml(java.lang.Object,org.xmlpull.v1.XmlSerializer)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>  -> _SINK_
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>  -> _SINK_
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: void onError(int,java.lang.String)>  -> _SINK_
<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS  -> _SINK_
<android.accounts.AbstractAccountAuthenticator$Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.accounts.AccountManager: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> android.permission.GET_ACCOUNTS  -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>  -> _SINK_
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>  -> _SINK_
<android.accounts.AccountManagerService: void writeUserDataIntoCacheLocked(android.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS  -> _SINK_
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> android.permission.SET_WALLPAPER  -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>  -> _SINK_
<android.accounts.AccountManager$AmsTask: void set(android.os.Bundle)>  -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS  -> _SINK_
<android.accounts.AccountManagerService$TestFeaturesSession: void onResult(android.os.Bundle)>  -> _SINK_
<android.accounts.AccountManagerService: java.util.HashMap readUserDataForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>  -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>  -> _SINK_
<android.accounts.AccountManagerService: java.lang.String readAuthTokenInternal(android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>  -> _SINK_
<android.accounts.AccountManagerService: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>  -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void sendBroadcast(android.content.Intent,java.lang.String)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS  -> _SINK_
<android.accounts.AccountManagerService: void writeAuthTokenIntoCacheLocked(android.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.AccountManager$AmsTask: void set(java.lang.Object)>  -> _SINK_
<android.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>  -> _SINK_
<android.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>  -> _SINK_
<android.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>  -> _SINK_
<android.accounts.AccountManagerService: java.lang.String readUserDataInternal(android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>  -> _SINK_
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.accounts.AccountAuthenticatorActivity: android.content.ComponentName startService(android.content.Intent)> android.permission.MANAGE_APP_TOKENS  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>  -> _SINK_
<android.accounts.AccountManagerService$RemoveAccountSession: void onResult(android.os.Bundle)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)>  -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>  -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> android.permission.MANAGE_ACCOUNTS  -> _SINK_
<android.accounts.AccountManagerService: android.os.IBinder onBind(android.content.Intent)>  -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>  -> _SINK_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.accounts.AccountManagerService$3: void onResult(android.os.Bundle)>  -> _SINK_
<android.accounts.AccountManagerService$4: void onResult(android.os.Bundle)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)>  -> _SINK_
<android.media.AudioManager: void setRingerMode(int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpOn(boolean)>  -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int[],int[])>  -> _SINK_
<android.media.AudioService$AudioHandler: void handleMessage(android.os.Message)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)>  -> _SINK_
<android.media.AudioManager: void setMasterVolume(int,int)>  -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int,short)>  -> _SINK_
<android.media.AudioService: void setRemoteStreamVolume(int)>  -> _SINK_
<android.media.AudioTrack: int setPositionNotificationPeriod(int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamMute(int,boolean,android.os.IBinder)>  -> _SINK_
<android.media.audiofx.AudioEffect: byte[] intToByteArray(int)>  -> _SINK_
<android.media.AudioService: void setStreamVolume(int,int,int)>  -> _SINK_
<android.media.AudioService: void setRingerMode(int)>  -> _SINK_
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>  -> _SINK_
<android.media.AudioManager: void setRouting(int,int,int)>  -> _SINK_
<android.media.AudioService: void setMasterMute(boolean,int,android.os.IBinder)>  -> _SINK_
<android.media.IAudioFocusDispatcher$Stub$Proxy: void dispatchAudioFocusChange(int,java.lang.String)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>  -> _SINK_
<android.media.AudioService: void setVibrateSetting(int,int)>  -> _SINK_
<android.media.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String)>  -> _SINK_
<android.media.AudioService$VolumeStreamState: boolean setIndex(int,int,boolean)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int)>  -> _SINK_
<android.media.AudioManager: void setMode(int)>  -> _SINK_
<android.media.AudioService: void setSpeakerphoneOn(boolean)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>  -> _SINK_
<android.media.AudioService: void registerRemoteVolumeObserverForRcc(int,android.media.IRemoteVolumeObserver)>  -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int[],byte[])>  -> _SINK_
<android.media.AudioManager: void setStreamMute(int,boolean)>  -> _SINK_
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)>  -> _SINK_
<android.media.AudioService: void setPlaybackInfoForRcc(int,int,int)>  -> _SINK_
<android.media.AudioService: void setStreamMute(int,boolean,android.os.IBinder)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)>  -> _SINK_
<android.media.AudioTrack: int setPlaybackRate(int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)>  -> _SINK_
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.BLUETOOTH android.permission.WRITE_SETTINGS android.permission.BROADCAST_STICKY android.permission.BLUETOOTH_ADMIN android.permission.WAKE_LOCK android.permission.MODIFY_AUDIO_SETTINGS  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)>  -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int[],short[])>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setRemoteSubmixOn(boolean,int)>  -> _SINK_
<android.media.AudioManager: void setVibrateSetting(int,int)>  -> _SINK_
<android.media.audiofx.Virtualizer: void setProperties(android.media.audiofx.Virtualizer$Settings)>  -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(byte[],byte[])>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setRingerMode(int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setWiredDeviceConnectionState(int,int,java.lang.String)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<android.media.audiofx.Virtualizer: void setStrength(short)>  -> _SINK_
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.BLUETOOTH android.permission.WRITE_SETTINGS android.permission.BROADCAST_STICKY android.permission.BLUETOOTH_ADMIN android.permission.WAKE_LOCK android.permission.MODIFY_AUDIO_SETTINGS  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamSolo(int,boolean,android.os.IBinder)>  -> _SINK_
<android.media.audiofx.Equalizer: void setProperties(android.media.audiofx.Equalizer$Settings)>  -> _SINK_
<android.media.audiofx.AudioEffect: int setEnabled(boolean)>  -> _SINK_
<android.media.AudioManager: void setRemoteSubmixOn(boolean,int)>  -> _SINK_
<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String)>  -> _SINK_
<android.media.audiofx.Equalizer: void setBandLevel(short,short)>  -> _SINK_
<android.media.AudioTrack: int setStereoVolume(float,float)>  -> _SINK_
<android.media.AudioService: void adjustStreamVolume(int,int,int)>  -> _SINK_
<android.media.audiofx.BassBoost: void setStrength(short)>  -> _SINK_
<android.media.AudioService$VolumeStreamState: void setLastAudibleIndex(int,int)>  -> _SINK_
<android.media.AudioManager: void setParameters(java.lang.String)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)>  -> _SINK_
<android.media.audiofx.BassBoost: void setProperties(android.media.audiofx.BassBoost$Settings)>  -> _SINK_
<android.media.audiofx.PresetReverb: void setProperties(android.media.audiofx.PresetReverb$Settings)>  -> _SINK_
<android.media.AudioService: void setBluetoothScoOn(boolean)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)>  -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int,int)>  -> _SINK_
<android.media.AudioTrack: int setNotificationMarkerPosition(int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustLocalOrRemoteStreamVolume(int,int)>  -> _SINK_
<android.media.AudioManager: void setMasterMute(boolean,int)>  -> _SINK_
<android.media.AudioManager: void setMasterMute(boolean)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int)>  -> _SINK_
<android.media.AudioTrack: int setAuxEffectSendLevel(float)>  -> _SINK_
<android.media.AudioRoutesInfo: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.media.AudioService: void playSoundEffect(int)>  -> _SINK_
<android.media.AudioRecord: int setNotificationMarkerPosition(int)>  -> _SINK_
<android.media.AudioService: void setMasterVolume(int,int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustMasterVolume(int,int)>  -> _SINK_
<android.media.AudioService: void setRemoteSubmixOn(boolean,int)>  -> _SINK_
<android.media.AudioService: void setMode(int,android.os.IBinder)> android.permission.BLUETOOTH android.permission.BROADCAST_STICKY android.permission.BLUETOOTH_ADMIN android.permission.MODIFY_AUDIO_SETTINGS  -> _SINK_
<android.media.audiofx.AudioEffect: byte[] shortToByteArray(short)>  -> _SINK_
<android.media.AudioManager: void setBluetoothScoOn(boolean)>  -> _SINK_
<android.media.AudioManager: void setMicrophoneMute(boolean)>  -> _SINK_
<android.media.AudioService: void setStreamSolo(int,boolean,android.os.IBinder)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int)>  -> _SINK_
<android.media.AudioManager: void setStreamSolo(int,boolean)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setPlaybackInfoForRcc(int,int,int)>  -> _SINK_
<android.media.AudioManager: void setStreamVolume(int,int,int)>  -> _SINK_
<android.media.audiofx.AudioEffect: int setParameter(int,byte[])>  -> _SINK_
<android.media.AudioTrack: int setLoopPoints(int,int,int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setRemoteStreamVolume(int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setMasterVolume(int,int)>  -> _SINK_
<android.media.AudioRecord: int setPositionNotificationPeriod(int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: int registerRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient,java.lang.String)>  -> _SINK_
<android.media.AudioManager: void setWiredHeadsetOn(boolean)>  -> _SINK_
<android.media.AudioService: void playSoundEffectVolume(int,float)>  -> _SINK_
<android.media.AudioTrack: int setPlaybackHeadPosition(int)>  -> _SINK_
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteVolumeObserverForRcc(int,android.media.IRemoteVolumeObserver)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>  -> _SINK_
<android.media.audiofx.PresetReverb: void setPreset(short)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,android.os.IBinder)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)>  -> _SINK_
<android.media.AudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)>  -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)> android.permission.MODIFY_AUDIO_SETTINGS  -> _SINK_
<android.media.AudioService$VolumeStreamState: void setAllIndexes(android.media.AudioService$VolumeStreamState,boolean)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.content.SyncStorageEngine: void addPeriodicSync(android.accounts.Account,int,java.lang.String,android.os.Bundle,long)>  -> _SINK_
<com.android.server.display.DisplayManagerService$CallbackRecord: void notifyDisplayEventAsync(int,int)>  -> _SINK_
<com.google.android.picasasync.SyncState: boolean onSyncRequested(android.database.sqlite.SQLiteDatabase,java.lang.String)>  -> _SINK_
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)> android.permission.WRITE_SYNC_SETTINGS  -> _SINK_
<android.content.SyncManager: void dumpSyncState(java.io.PrintWriter)>  -> _SINK_
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> android.permission.WRITE_SYNC_SETTINGS  -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int)>  -> _SINK_
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>  -> _SINK_
<android.app.Instrumentation: void sendCharacterSync(int)>  -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int,java.lang.Object)>  -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri requestImmediateSyncOnAlbum(long)>  -> _SINK_
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>  -> _SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)>  -> _SINK_
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>  -> _SINK_
<android.content.SyncStatusInfo: void setPeriodicSyncTime(int,long)>  -> _SINK_
<com.android.exchange.adapter.ContactsSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)>  -> _SINK_
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String)>  -> _SINK_
<com.android.exchange.adapter.EmailSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)>  -> _SINK_
<com.android.camera.MosaicPreviewRenderer$EGLHandler: void sendMessageSync(int)>  -> _SINK_
<android.content.SyncManager$ActiveSyncContext: boolean bindToSyncAdapter(android.content.pm.RegisteredServicesCache$ServiceInfo,int)>  -> _SINK_
<android.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)>  -> _SINK_
<com.android.exchange.adapter.AccountSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)>  -> _SINK_
<com.google.android.picasasync.MetadataSync$MetadataSyncTask: void performSync(android.content.SyncResult)>  -> _SINK_
<android.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)>  -> _SINK_
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> android.permission.WRITE_SYNC_SETTINGS  -> _SINK_
<com.google.android.picasasync.PhotoPrefetch$PrefetchFullImage: void performSync(android.content.SyncResult)>  -> _SINK_
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)>  -> _SINK_
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>  -> _SINK_
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>  -> _SINK_
<android.content.SyncManager: void dumpSyncHistory(java.io.PrintWriter)>  -> _SINK_
<android.content.ISyncAdapter$Stub$Proxy: void cancelSync(android.content.ISyncContext)>  -> _SINK_
<android.app.Instrumentation: void sendKeyDownUpSync(int)>  -> _SINK_
<com.android.camera.CameraManager$CameraProxy: void setParametersAsync(android.hardware.Camera$Parameters)>  -> _SINK_
<android.app.Instrumentation: void sendStringSync(java.lang.String)>  -> _SINK_
<com.android.providers.contacts.TransactionContext: void syncStateUpdated(long,java.lang.Object)>  -> _SINK_
<android.os.CommonTimeConfig: int setClientSyncInterval(int)>  -> _SINK_
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)>  -> _SINK_
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)>  -> _SINK_
<com.android.exchange.ExchangeService: void startManualSync(long,int,com.android.exchange.Request)> android.permission.READ_SYNC_SETTINGS android.permission.VIBRATE android.permission.WAKE_LOCK  -> _SINK_
<android.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)>  -> _SINK_
<com.google.android.picasasync.PhotoPrefetch$PrefetchAlbumCover: void performSync(android.content.SyncResult)>  -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)>  -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(android.os.Message)>  -> _SINK_
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>  -> _SINK_
<android.os.Message: void setAsynchronous(boolean)>  -> _SINK_
<com.google.android.picasasync.PicasaSyncManager: void performSync(com.google.android.picasasync.PicasaSyncManager$SyncSession)>  -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)>  -> _SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> android.permission.WRITE_SYNC_SETTINGS android.permission.READ_SYNC_SETTINGS android.permission.VIBRATE android.permission.WAKE_LOCK android.permission.ACCESS_NETWORK_STATE  -> _SINK_
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.content.SyncStorageEngine: void removePeriodicSync(android.accounts.Account,int,java.lang.String,android.os.Bundle)>  -> _SINK_
<com.android.exchange.adapter.CalendarSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)>  -> _SINK_
<com.android.exchange.adapter.AbstractSyncAdapter: void setPimSyncOptions(java.lang.Double,java.lang.String,com.android.exchange.adapter.Serializer)>  -> _SINK_
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>  -> _SINK_
<com.android.providers.calendar.CalendarDatabaseHelper: void scheduleSync(android.accounts.Account,boolean,java.lang.String)>  -> _SINK_
<com.android.camera.CameraManager$CameraProxy: void setPreviewTextureAsync(android.graphics.SurfaceTexture)>  -> _SINK_
<android.app.ApplicationPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>  -> _SINK_
<com.google.android.picasasync.PicasaFacade: android.net.Uri requestImmediateSyncOnAlbumList(java.lang.String)>  -> _SINK_
<android.media.IRingtonePlayer$Stub$Proxy: void playAsync(android.net.Uri,android.os.UserHandle,boolean,int)>  -> _SINK_
<com.google.android.picasasync.PhotoPrefetch$PrefetchScreenNail: void performSync(android.content.SyncResult)>  -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)>  -> _SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)>  -> _SINK_
<android.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)>  -> _SINK_
<android.app.ContextImpl$ApplicationContentResolver: void setMasterSyncAutomatically(boolean)> android.permission.WRITE_SYNC_SETTINGS  -> _SINK_
<com.google.android.picasasync.UploadsManager$UploadTask: void performSync(android.content.SyncResult)>  -> _SINK_
<android.content.ContentService: void setMasterSyncAutomatically(boolean)>  -> _SINK_
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<android.net.wifi.WifiStateMachine$ScanModeState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiManager: void save(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)>  -> _SINK_
<android.net.LocalSocket: void setSoTimeout(int)>  -> _SINK_
<android.net.wifi.WifiStateTracker: void setDependencyMet(boolean)>  -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>  -> _SINK_
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>  -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceMode(int)>  -> _SINK_
<android.net.http.Headers: void setCacheControl(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromDevice(android.net.wifi.WpsInfo)>  -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>  -> _SINK_
<com.android.server.net.NetworkStatsRecorder$RemoveUidRewriter: void write(java.io.OutputStream)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)>  -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)>  -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProtocol(java.lang.String)>  -> _SINK_
<android.net.SntpClient: boolean requestTime(java.lang.String,int)>  -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>  -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStoppingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)>  -> _SINK_
<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DriverUnloadedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])>  -> _SINK_
<android.net.http.Headers: void setEtag(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiStateMachine$L2ConnectedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> android.permission.READ_PHONE_STATE android.permission.BLUETOOTH android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_NETWORK_STATE android.permission.BLUETOOTH_ADMIN android.permission.ACCESS_NETWORK_STATE  -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.ConnectivityManager: int setUsbTethering(boolean)>  -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.nsd.INsdManager$Stub$Proxy: void setEnabled(boolean)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setScanResultHandling(int)>  -> _SINK_
<android.net.nsd.DnsSdTxtRecord: void set(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setP2pSsidPostfix(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiStateMachine$ObtainingIpState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void addServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setDialogListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DialogListener)>  -> _SINK_
<android.net.InterfaceConfiguration: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.SSLCertificateSocketFactory: void setUseSessionTickets(java.net.Socket,boolean)>  -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAutoRegistration(boolean)>  -> _SINK_
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)>  -> _SINK_
<android.net.wifi.WifiSsid$1: android.net.wifi.WifiSsid createFromParcel(android.os.Parcel)>  -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallUidRule(int,boolean)>  -> _SINK_
<android.net.wifi.WifiManager: void disable(int,android.net.wifi.WifiManager$ActionListener)>  -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)>  -> _SINK_
<android.net.wifi.WifiStateMachine: void setScanOnlyMode(boolean)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiConfigStore: boolean disableNetwork(int,int)>  -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setDeviceName(java.lang.String)>  -> _SINK_
<com.android.server.ConnectivityService$NetworkStateTrackerHandler: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.server.WifiService: void setCountryCode(java.lang.String,boolean)> android.permission.WRITE_SETTINGS android.permission.CHANGE_WIFI_STATE  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> android.permission.ACCESS_NETWORK_STATE  -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>  -> _SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE  -> _SINK_
<android.net.sip.ISipSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStartingState: boolean processMessage(android.os.Message)>  -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> android.permission.INTERNET  -> _SINK_
<android.net.MobileDataStateTracker: boolean setRadio(boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSink(boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.ConnectivityManager: void setDataDependency(int,boolean)>  -> _SINK_
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.WifiApConfigStore$DefaultState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.http.Headers: void setContentType(java.lang.String)>  -> _SINK_
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)>  -> _SINK_
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)>  -> _SINK_
<android.net.SSLCertificateSocketFactory: void setSoWriteTimeout(java.net.Socket,int)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setP2pGroupIdle(java.lang.String,int)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)>  -> _SINK_
<android.net.wifi.WifiStateTracker: void setUserDataEnable(boolean)>  -> _SINK_
<android.net.http.Headers: void setLastModified(java.lang.String)>  -> _SINK_
<com.android.server.WifiService: void startScan(boolean)>  -> _SINK_
<android.net.EthernetDataTracker: void setTeardownRequested(boolean)>  -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void updateGroupCapability(java.lang.String,int)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)>  -> _SINK_
<android.net.ConnectivityManager: boolean setRadios(boolean)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)>  -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPassword(java.lang.String)>  -> _SINK_
<com.android.server.NetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[])>  -> _SINK_
<android.net.wifi.WifiStateMachine: void setDriverStart(boolean,boolean)>  -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>  -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.rtp.AudioGroup: void add(android.net.rtp.AudioStream)>  -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void advisePersistThreshold(long)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setWfdDeviceInfo(java.lang.String)>  -> _SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.WifiConfigStore: boolean selectNetwork(int)>  -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>  -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)>  -> _SINK_
<android.net.LinkCapabilities: void put(int,java.lang.String)>  -> _SINK_
<android.net.LinkCapabilities$1: android.net.LinkCapabilities createFromParcel(android.os.Parcel)>  -> _SINK_
<android.net.ConnectivityManager: void setNetworkPreference(int)>  -> _SINK_
<com.android.server.net.NetworkIdentitySet: void writeToStream(java.io.DataOutputStream)>  -> _SINK_
<android.net.BaseNetworkStateTracker: void setUserDataEnable(boolean)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)>  -> _SINK_
<com.android.server.NetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)>  -> _SINK_
<android.net.wifi.SupplicantStateTracker$CompletedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.http.Headers: void setAcceptRanges(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiManager$ServiceHandler: void handleMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void setSessionAvailable(boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DriverLoadedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: boolean setDeviceType(int)>  -> _SINK_
<android.net.DummyDataStateTracker: void setDependencyMet(boolean)>  -> _SINK_
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.server.net.NetworkStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_NETWORK_STATE  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingJoinState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiStateTracker: void setPolicyDataEnable(boolean)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)>  -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setPersistentReconnect(boolean)>  -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])>  -> _SINK_
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.server.NetworkManagementService: void startReverseTethering(java.lang.String)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.wifi.WifiStateMachine$ConnectedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)>  -> _SINK_
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>  -> _SINK_
<android.net.http.Headers: void setContentEncoding(java.lang.String)>  -> _SINK_
<com.android.server.NetworkManagementService: void setUidNetworkRules(int,boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setSerialNumber(java.lang.String)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.wifi.SupplicantStateTracker$DefaultState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.EthernetDataTracker: void setDependencyMet(boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DisconnectedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.INetworkStatsSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setBandwidth(java.lang.String,int)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$BssidStatistics: void updateLoss(int,double,int)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)>  -> _SINK_
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<android.net.DummyDataStateTracker: void setPolicyDataEnable(boolean)>  -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> android.permission.CHANGE_WIFI_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSource(boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener)>  -> _SINK_
<android.net.SSLCertificateSocketFactory: void setNpnProtocols(byte[][])>  -> _SINK_
<com.android.server.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setDeviceName(android.net.wifi.p2p.WifiP2pManager$Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DefaultState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)>  -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)>  -> _SINK_
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)>  -> _SINK_
<android.net.LocalSocket: void setReceiveBufferSize(int)>  -> _SINK_
<android.net.nsd.NsdManager: void setEnabled(boolean)>  -> _SINK_
<android.net.wifi.WifiApConfigStore$ActiveState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncEnableNetwork(com.android.internal.util.AsyncChannel,int,boolean)>  -> _SINK_
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)>  -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void register(int)>  -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)>  -> _SINK_
<android.net.wifi.WifiStateMachine$TetheringState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>  -> _SINK_
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiEnabled(boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: void add(android.net.wifi.p2p.WifiP2pGroup)>  -> _SINK_
<android.net.CaptivePortalTracker$DefaultState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)>  -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setEncryption(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.server.net.NetworkStatsRecorder$CombiningRewriter: void write(java.io.OutputStream)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DisconnectingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.TrafficStats: void setThreadStatsUid(int)>  -> _SINK_
<android.net.http.AndroidHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>  -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])>  -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAddress(java.lang.String)>  -> _SINK_
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>  -> _SINK_
<android.net.TrafficStats: void setThreadStatsTag(int)>  -> _SINK_
<android.net.DummyDataStateTracker: void setUserDataEnable(boolean)>  -> _SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.server.WifiService: boolean setWifiEnabled(boolean)>  -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DriverUnloadingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.nsd.NsdManager: void resolveService(android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager$ResolveListener)>  -> _SINK_
<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager$RegistrationListener)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStateChanged(java.lang.String,boolean)>  -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncRemoveNetwork(com.android.internal.util.AsyncChannel,int)>  -> _SINK_
<android.net.nsd.NsdServiceInfo: void setTxtRecord(android.net.nsd.DnsSdTxtRecord)>  -> _SINK_
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setDeviceType(java.lang.String)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStoppedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)>  -> _SINK_
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.WifiStateMachine: void setFrequencyBand(int,boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStoppingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.BaseNetworkStateTracker: void setTeardownRequested(boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)>  -> _SINK_
<android.net.wifi.WifiStateMachine: void sendBluetoothAdapterStateChange(int)>  -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$FrequencyConflictState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.net.http.Headers: void setContentDisposition(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiStateMachine: void setScanType(boolean)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setNetworkVariable(int,java.lang.String,java.lang.String)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setConfigMethods(java.lang.String)>  -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void limitReached(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setModelNumber(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiConfigStore: void setIpConfiguration(int,android.net.DhcpInfoInternal)>  -> _SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.WifiManager: void startWps(android.net.wifi.WpsInfo,android.net.wifi.WifiManager$WpsListener)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)>  -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncDisableNetwork(com.android.internal.util.AsyncChannel,int)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.net.wifi.WifiManager: void connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> android.permission.CHANGE_WIFI_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  -> _SINK_
<android.net.BaseNetworkStateTracker: void setPolicyDataEnable(boolean)>  -> _SINK_
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_NETWORK_STATE  -> _SINK_
<android.net.MobileDataStateTracker: void setDependencyMet(boolean)>  -> _SINK_
<android.net.wifi.WifiConfigStore: boolean enableNetworkWithoutBroadcast(int,boolean)>  -> _SINK_
<android.net.http.Headers: void setLocation(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiNative: void setScanInterval(int)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)> android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)>  -> _SINK_
<android.net.wifi.WifiStateMachine$VerifyingLinkState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void updateStatus(java.lang.String,int)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)>  -> _SINK_
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiStateMachine: void setCountryCode(java.lang.String,boolean)> android.permission.WRITE_SETTINGS  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAttribute(java.lang.String,java.lang.String)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.SupplicantStateTracker$HandshakeState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.http.AndroidHttpClient$LoggingConfiguration: void access$600(android.net.http.AndroidHttpClient$LoggingConfiguration,java.lang.String)>  -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)>  -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>  -> _SINK_
<android.net.rtp.AudioGroup: void sendDtmf(int)>  -> _SINK_
<com.android.server.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> android.permission.CHANGE_WIFI_STATE  -> _SINK_
<android.net.wifi.WifiNative: boolean setConcurrencyPriority(java.lang.String)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.LocalSocket: void setSendBufferSize(int)>  -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStartingState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.server.net.NetworkStatsCollection: void write(java.io.DataOutputStream)>  -> _SINK_
<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiConfigStore: boolean enableNetwork(int,boolean)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>  -> _SINK_
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)>  -> _SINK_
<android.net.InterfaceConfiguration: void setFlag(java.lang.String)>  -> _SINK_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)>  -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)>  -> _SINK_
<com.android.server.NetworkManagementService: void setDnsForwarders(java.lang.String[])>  -> _SINK_
<android.net.BaseNetworkStateTracker: void setDependencyMet(boolean)>  -> _SINK_
<android.net.CaptivePortalTracker$ActiveNetworkState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)>  -> _SINK_
<android.net.http.Headers: void setExpires(java.lang.String)>  -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceRemoved(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setCountryCode(java.lang.String)>  -> _SINK_
<android.net.BaseNetworkStateTracker: boolean setRadio(boolean)>  -> _SINK_
<android.net.wifi.WifiApConfigStore$InactiveState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiStateMachine$ConnectModeState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.DhcpStateMachine$StoppedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])>  -> _SINK_
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)>  -> _SINK_
<android.net.CaptivePortalTracker$NoActiveNetworkState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.nsd.NsdManager$DiscoveryListener)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<android.net.DhcpStateMachine$WaitBeforeStartState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setModelName(java.lang.String)>  -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setSendKeepAlive(boolean)>  -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceStatusChanged(java.lang.String,boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DriverLoadingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setP2pPowerSave(java.lang.String,boolean)>  -> _SINK_
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)>  -> _SINK_
<android.net.EthernetDataTracker: boolean setRadio(boolean)>  -> _SINK_
<android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromHex(java.lang.String)>  -> _SINK_
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.nsd.NsdServiceInfo: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiManager: void forget(int,android.net.wifi.WifiManager$ActionListener)>  -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine$WpsRunningState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStartedState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)>  -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)>  -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStartingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.ConnectivityManager: boolean setRadio(int,boolean)>  -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPort(int)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setWfdEnable(boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProfileName(java.lang.String)>  -> _SINK_
<android.net.nsd.INsdManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.providers.settings.SettingsBackupAgent$WifiNetworkSettings: void write(java.io.Writer)>  -> _SINK_
<android.net.DummyDataStateTracker: boolean setRadio(boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setBand(int)>  -> _SINK_
<android.net.wifi.WifiNative: void setPowerSave(boolean)>  -> _SINK_
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,java.lang.String)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>  -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsPbc(android.net.wifi.WpsInfo)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setScanMode(boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PersistentGroupInfoListener)>  -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)>  -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)>  -> _SINK_
<android.net.wifi.WifiStateTracker: void setTeardownRequested(boolean)>  -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallEgressSourceRule(java.lang.String,boolean)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>  -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceClassDataActivityChanged(java.lang.String,boolean)>  -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromAccessPoint(android.net.wifi.WpsInfo)>  -> _SINK_
<android.net.wifi.WifiStateMachine$DriverFailedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiStateMachine: void setHighPerfModeEnabled(boolean)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setManufacturer(java.lang.String)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiManager: void connect(int,android.net.wifi.WifiManager$ActionListener)>  -> _SINK_
<com.android.server.NetworkManagementService: void setGlobalAlert(long)>  -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int)>  -> _SINK_
<com.android.server.WifiService: void setFrequencyBand(int,boolean)>  -> _SINK_
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAuthUserName(java.lang.String)>  -> _SINK_
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceScanMode(boolean)>  -> _SINK_
<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  -> _SINK_
<android.media.AudioService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.BatteryStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.ApplicationThreadProxy: void dumpDbInfo(java.io.FileDescriptor,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActiveServices: boolean dumpService(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)>  -> _SINK_
<android.service.wallpaper.WallpaperService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>  -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)>  -> _SINK_
<android.util.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.NsdService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])>  -> _SINK_
<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.usb.UsbSettingsManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>  -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<java.util.zip.Inflater: int setFileInput(java.io.FileDescriptor,long,int)>  -> _SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  -> _SINK_
<com.android.browser.BrowserBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>  -> _SINK_
<com.android.server.NotificationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.usb.UsbService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.ContextImpl: java.io.FileInputStream openFileInput(java.lang.String)>  -> _SINK_
<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)>  -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.uiautomator.core.UiDevice: void dumpWindowHierarchy(java.lang.String)>  -> _SINK_
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  -> _SINK_
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  -> _SINK_
<com.android.server.am.ProviderMap: boolean dumpProvider(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)>  -> _SINK_
<com.android.server.ThrottleService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.providers.contacts.ContactsProvider2: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>  -> _SINK_
<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)>  -> _SINK_
<com.android.server.NetworkManagementService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  -> _SINK_
<com.android.internal.telephony.RIL: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)>  -> _SINK_
<libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.pm.PackageManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>  -> _SINK_
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpGraphicsHardwareUsage(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.systemui.screenshot.SaveImageInBackgroundTask: com.android.systemui.screenshot.SaveImageInBackgroundData doInBackground(com.android.systemui.screenshot.SaveImageInBackgroundData[])> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.power.PowerManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpDbInfo(java.io.FileDescriptor,java.lang.String[])>  -> _SINK_
<com.android.systemui.media.RingtonePlayer: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)>  -> _SINK_
<com.android.systemui.statusbar.tablet.TabletStatusBar: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.AppWidgetServiceImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActiveServices: boolean dumpServicesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpDbInfo(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.dreams.DreamManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.phone.TelephonyDebugService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.NativeDaemonConnector: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActivityManagerService$CpuBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.usb.UsbDebuggingManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>  -> _SINK_
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpBroadcastsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)>  -> _SINK_
<com.android.server.BackupManagerService$PerformFullRestoreTask: boolean restoreOneFile(java.io.InputStream,byte[])>  -> _SINK_
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>  -> _SINK_
<com.android.server.location.LocationFudger: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.net.NetworkStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> android.permission.ACCESS_NETWORK_STATE  -> _SINK_
<com.android.internal.telephony.CallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  -> _SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>  -> _SINK_
<com.android.internal.telephony.ServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.display.DisplayManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpActivitiesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)>  -> _SINK_
<com.android.providers.media.MediaProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  -> _SINK_
<com.android.server.LocationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.pm.UserManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.net.LocalSocketImpl: void bind(android.net.LocalSocketAddress)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>  -> _SINK_
<android.view.WindowManagerGlobal: void dumpGfxInfo(java.io.FileDescriptor)>  -> _SINK_
<com.android.server.am.ActivityManagerService$MemBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.systemui.power.PowerUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  -> _SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>  -> _SINK_
<com.android.camera.EffectsRecorder: void setOutputFile(java.io.FileDescriptor)>  -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  -> _SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProvidersLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)>  -> _SINK_
<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)>  -> _SINK_
<com.android.server.TextServicesManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<java.io.RandomAccessFile: void setLength(long)>  -> _SINK_
<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)>  -> _SINK_
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>  -> _SINK_
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)>  -> _SINK_
<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>  -> _SINK_
<com.android.server.WifiService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  -> _SINK_
<com.android.server.usb.UsbDeviceManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>  -> _SINK_
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  -> _SINK_
<libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>  -> _SINK_
<android.content.ContentService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> android.permission.DUMP  -> _SINK_
<com.android.server.DeviceStorageMonitorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.videoeditor.service.ApiService: void onIntentProcessed(android.content.Intent,android.media.videoeditor.VideoEditor,java.lang.Object,java.lang.Object,java.lang.Exception,boolean)>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProcessesToGc(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)>  -> _SINK_
<com.android.email.widget.WidgetManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.location.PassiveProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)>  -> _SINK_
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.server.BatteryService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProcessesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)>  -> _SINK_
<android.service.wallpaper.WallpaperService$Engine: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.location.MockProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.DiskStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.MountService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.WallpaperManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.content.SyncManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>  -> _SINK_
<com.android.internal.telephony.DebugService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.AppWidgetService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>  -> _SINK_
<com.android.email.service.AttachmentDownloadService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.wm.WindowManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>  -> _SINK_
<android.content.ContentService: void dump(java.io.FileDescriptor,java.lang.String[])> android.permission.DUMP android.permission.BLUETOOTH android.permission.ACCESS_NETWORK_STATE android.permission.BACKUP  -> _SINK_
<android.media.videoeditor.OverlayFrame: void generateOverlayWithRenderingMode(android.media.videoeditor.MediaItem,android.media.videoeditor.OverlayFrame,int,int)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>  -> _SINK_
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>  -> _SINK_
<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>  -> _SINK_
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])>  -> _SINK_
<com.android.uiautomator.core.Tracer: void setOutputFilename(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.google.android.apps.lightcycle.util.MetadataUtils: void writeMetadataIntoJpegFile(java.lang.String,java.lang.String,java.lang.String,boolean)>  -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpOomLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean)>  -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)>  -> _SINK_
<com.android.server.UpdateLockService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProvider(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)>  -> _SINK_
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>  -> _SINK_
<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>  -> _SINK_
<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>  -> _SINK_
<android.content.CursorLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.internal.telephony.DataConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.email.provider.WidgetProvider$WidgetService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: void dump(java.io.FileDescriptor,java.io.PrintWriter)>  -> _SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  -> _SINK_
<android.server.search.SearchManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.inputmethod.latin.LatinIME: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.AppWidgetServiceImpl: boolean writeStateToFileLocked(java.io.FileOutputStream)>  -> _SINK_
<android.app.Activity: void dumpInner(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.BackupManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)>  -> _SINK_
<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>  -> _SINK_
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>  -> _SINK_
<com.android.server.SamplingProfilerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)>  -> _SINK_
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.ConnectivityService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.CommonTimeManagementService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.TelephonyRegistry: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.launcher2.Launcher: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.DropBoxManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)>  -> _SINK_
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>  -> _SINK_
<android.app.ApplicationThreadProxy: void dumpProvider(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  -> _SINK_
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.CountryDetectorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.AlarmManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>  -> _SINK_
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>  -> _SINK_
<com.android.systemui.SystemUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.net.wifi.p2p.WifiP2pService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpProvider(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>  -> _SINK_
<com.android.server.NativeDaemonConnector$ResponseQueue: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.net.LocalSocketImpl: void access$600(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)>  -> _SINK_
<android.content.ContentService$ObserverNode: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,int[],android.util.SparseIntArray)>  -> _SINK_
<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>  -> _SINK_
<com.android.server.am.UsageStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)>  -> _SINK_
<libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>  -> _SINK_
<android.os.SELinux: boolean restorecon(java.io.File)>  -> _SINK_
<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.server.search.Searchables: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  -> _SINK_
<com.android.providers.downloads.DownloadService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActivityManagerService$DbBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)>  -> _SINK_
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>  -> _SINK_
<com.android.server.UiModeManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)>  -> _SINK_
<com.android.server.am.ActivityManagerService$GraphicsBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.StatusBarManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  -> _SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpApplicationMemoryUsage(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],boolean,java.io.PrintWriter,java.lang.StringBuilder,java.lang.StringBuilder)>  -> _SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.usb.UsbHostManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>  -> _SINK_
<com.android.internal.util.StateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.soundrecorder.RemainingTimeCalculator: void setFileSizeLimit(java.io.File,long)>  -> _SINK_
<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)>  -> _SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.BroadcastQueue: boolean dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String,boolean)>  -> _SINK_
<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)>  -> _SINK_
<android.net.LocalSocketImpl: void access$700(android.net.LocalSocketImpl,int,java.io.FileDescriptor)>  -> _SINK_
<com.android.server.location.GpsLocationProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.systemui.statusbar.phone.NavigationBarView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)>  -> _SINK_
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>  -> _SINK_
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  -> _SINK_
<android.app.ApplicationThreadProxy: android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor,boolean,boolean,java.lang.String[])>  -> _SINK_
<com.android.server.location.LocationProviderProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)>  -> _SINK_
<com.android.contacts.interactions.TestLoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  -> _SINK_
<android.accounts.AccountManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.content.ContentService$ObserverNode$ObserverEntry: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,android.util.SparseIntArray)>  -> _SINK_
<com.android.server.InputMethodManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.systemui.statusbar.policy.NetworkController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.internal.telephony.ApnContext: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.systemui.SystemUIService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>  -> _SINK_
<android.security.SystemKeyStore: byte[] generateNewKey(int,java.lang.String,java.lang.String)>  -> _SINK_
<android.content.pm.RegisteredServicesCache: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int)>  -> _SINK_
<com.android.server.connectivity.Tethering: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.os.FileUtils: boolean copyToFile(java.io.InputStream,java.io.File)>  -> _SINK_
<com.android.server.input.InputManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpPendingIntentsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpActivity(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.net.DhcpStateMachine$WaitBeforeRenewalState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.hardware.SerialManager: android.hardware.SerialPort openSerialPort(java.lang.String,int)>  -> _SINK_
<com.android.launcher2.Launcher: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)>  -> _SINK_
<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>  -> _SINK_
<com.android.browser.search.OpenSearchSearchEngine: void startSearch(android.content.Context,java.lang.String,android.os.Bundle,java.lang.String)>  -> _SINK_
<com.android.gallery3d.filtershow.tools.SaveCopyTask: void saveBitmap(android.graphics.Bitmap,java.io.File,java.lang.Object)>  -> _SINK_
<android.net.EthernetDataTracker: void setPolicyDataEnable(boolean)>  -> _SINK_
<com.android.videoeditor.widgets.AudioTrackLinearLayout: void setWaveformExtractionComplete(java.lang.String)>  -> _SINK_
<com.android.providers.media.MediaThumbRequest: android.net.Uri updateDatabase(android.graphics.Bitmap)>  -> _SINK_
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>  -> _SINK_
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)> android.permission.CAMERA android.permission.RECORD_AUDIO  -> _SINK_
<com.android.inputmethod.latin.LatinImeLogger: void logOnManualSuggestion(java.lang.String,java.lang.String,int,com.android.inputmethod.latin.SuggestedWords)>  -> _SINK_
<android.provider.DrmStore: android.content.Intent addDrmFile(android.content.ContentResolver,java.io.FileInputStream,java.lang.String)>  -> _SINK_
<com.android.browser.PreloadedTabControl: void setQuery(java.lang.String)>  -> _SINK_
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>  -> _SINK_
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>  -> _SINK_
<com.android.providers.calendar.CalendarInstancesHelper: void performInstanceExpansion(long,long,java.lang.String,android.database.Cursor)>  -> _SINK_
<android.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  -> _SINK_
<com.android.gallery3d.filtershow.FilterShowActivity: void onActivityResult(int,int,android.content.Intent)>  -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.net.DhcpStateMachine$RunningState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>  -> _SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>  -> _SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>  -> _SINK_
<com.android.phone.OtaUtils: boolean maybeDoOtaCall(android.content.Context,android.os.Handler,int)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>  -> _SINK_
<com.android.providers.calendar.CalendarCache: void writeData(java.lang.String,java.lang.String)>  -> _SINK_
<android.app.WallpaperManager: void setResource(int)>  -> _SINK_
<android.app.WallpaperManager: void setStream(java.io.InputStream)>  -> _SINK_
<com.android.gallery3d.util.LightCycleHelper$PanoramaViewHelper: void onPanoramaInfoLoaded(com.google.android.gms.common.ConnectionResult,int,android.content.Intent)>  -> _SINK_
<android.widget.Spinner$DialogPopup: void setHorizontalOffset(int)>  -> _SINK_
<android.speech.tts.TextToSpeechService$CallbackMap: void dispatchOnError(java.lang.Object,java.lang.String)>  -> _SINK_
<android.net.DhcpStateMachine$DefaultState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int)>  -> _SINK_
<com.android.uiautomator.core.InteractionController: boolean sendKey(int,int)>  -> _SINK_
<com.android.inputmethod.latin.UserHistoryDictIOUtils: void writeDictionaryBinary(java.io.OutputStream,com.android.inputmethod.latin.UserHistoryDictIOUtils$BigramDictionaryInterface,com.android.inputmethod.latin.UserHistoryDictionaryBigramList,com.android.inputmethod.latin.makedict.FormatSpec$FormatOptions)>  -> _SINK_
<com.android.phone.CallFeaturesSetting: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>  -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>  -> _SINK_
<android.util.Slog: int println(int,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>  -> _SINK_
<android.hardware.usb.UsbManager: void setMassStorageBackingFile(java.lang.String)>  -> _SINK_
<com.android.launcher2.LauncherModel: void moveItemInDatabase(android.content.Context,com.android.launcher2.ItemInfo,long,int,int,int)>  -> _SINK_
<android.speech.tts.FileSynthesisCallback: int audioAvailable(byte[],int,int)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)>  -> _SINK_
<android.test.InstrumentationTestCase: void sendKeys(java.lang.String)>  -> _SINK_
<com.android.server.location.LocationProviderProxy: boolean sendExtraCommand(java.lang.String,android.os.Bundle)>  -> _SINK_
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)>  -> _SINK_
<android.accessibilityservice.AccessibilityService: boolean performGlobalAction(int)>  -> _SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.LogRecord)>  -> _SINK_
<android.app.UiModeManager: void setNightMode(int)>  -> _SINK_
<android.widget.Spinner$DialogPopup: void setBackgroundDrawable(android.graphics.drawable.Drawable)>  -> _SINK_
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>  -> _SINK_
<com.android.exchange.adapter.CalendarSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)>  -> _SINK_
<com.android.internal.backup.LocalTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>  -> _SINK_
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void setRequiresReload(boolean)>  -> _SINK_
<com.android.musicfx.ControlPanelEffect: void openSession(android.content.Context,java.lang.String,int)>  -> _SINK_
<com.android.browser.search.DefaultSearchEngine: void startSearch(android.content.Context,java.lang.String,android.os.Bundle,java.lang.String)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)>  -> _SINK_
<android.webkit.WebViewDatabaseClassic: void setFormData(java.lang.String,java.util.HashMap)>  -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.server.sip.SipService$AutoRegistrationProcess: void setListener(android.net.sip.ISipSessionListener)>  -> _SINK_
<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>  -> _SINK_
<com.android.providers.calendar.CalendarProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)>  -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)>  -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String)>  -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)>  -> _SINK_
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>  -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>  -> _SINK_
<android.os.UserManager: void setGuestEnabled(boolean)>  -> _SINK_
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putLong(int,long)>  -> _SINK_
<android.os.UserManager: void setUserIcon(int,android.graphics.Bitmap)>  -> _SINK_
<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>  -> _SINK_
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>  -> _SINK_
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)>  -> _SINK_
<android.filterfw.core.Filter: void addOutputPort(java.lang.String,android.filterfw.core.FrameFormat)>  -> _SINK_
<com.android.providers.calendar.CalendarCache: void writeTimezoneInstances(java.lang.String)>  -> _SINK_
<android.os.UserManager: void setUserName(int,java.lang.String)>  -> _SINK_
<com.android.phone.OtaUtils: void setupOtaspCall(android.content.Intent)>  -> _SINK_
<com.android.exchange.adapter.Serializer: com.android.exchange.adapter.Serializer text(java.lang.String)>  -> _SINK_
<com.android.exchange.provider.MailboxUtilities: void checkMailboxConsistency(android.content.Context,long)>  -> _SINK_
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>  -> _SINK_
<com.android.videoeditor.widgets.AudioTrackLinearLayout: void setWaveformExtractionProgress(java.lang.String,int)>  -> _SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)>  -> _SINK_
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(android.content.Context,android.content.Entity,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)>  -> _SINK_
<com.android.musicfx.ControlPanelEffect: void setParameterInt(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key,int,int)>  -> _SINK_
<com.android.server.location.MockProvider: void setLocation(android.location.Location)>  -> _SINK_
<android.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)>  -> _SINK_
<com.android.musicfx.ControlPanelEffect: void setParameterBoolean(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key,boolean)>  -> _SINK_
<com.android.systemui.statusbar.phone.PhoneStatusBar: void setLightsOn(boolean)>  -> _SINK_
<android.util.Log: int println(int,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<com.android.gallery3d.data.MtpContext: boolean copyFile(java.lang.String,android.mtp.MtpObjectInfo)>  -> _SINK_
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)>  -> _SINK_
<com.android.providers.calendar.CalendarInstancesHelper: void expandInstanceRangeLocked(long,long,java.lang.String)>  -> _SINK_
<com.android.browser.XLargeUi: void setActiveTab(com.android.browser.Tab)>  -> _SINK_
<android.webkit.CookieManagerClassic: void setCookie(java.lang.String,java.lang.String,boolean)>  -> _SINK_
<android.filterfw.core.Filter: void addProgramPort(java.lang.String,java.lang.String,java.lang.reflect.Field,java.lang.Class,boolean)>  -> _SINK_
<com.android.browser.PhoneUi: void setActiveTab(com.android.browser.Tab)>  -> _SINK_
<com.android.providers.downloads.DownloadProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>  -> _SINK_
<com.android.server.pm.Settings: boolean disableSystemPackageLPw(java.lang.String)>  -> _SINK_
<android.speech.tts.TextToSpeechService$CallbackMap: void dispatchOnDone(java.lang.Object,java.lang.String)>  -> _SINK_
<android.app.backup.RestoreSession: int restoreSome(long,android.app.backup.RestoreObserver,java.lang.String[])>  -> _SINK_
<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)>  -> _SINK_
<com.android.launcher2.Launcher: boolean startActivitySafely(android.view.View,android.content.Intent,java.lang.Object)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>  -> _SINK_
<com.android.providers.media.MediaProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.camera.Util: void setGpsParameters(android.hardware.Camera$Parameters,android.location.Location)>  -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setVibratePattern(int)>  -> _SINK_
<com.android.camera.Storage: boolean updateImage(android.content.ContentResolver,android.net.Uri,java.lang.String,android.location.Location,int,byte[],int,int)>  -> _SINK_
<android.filterfw.core.Filter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>  -> _SINK_
<android.app.FragmentManagerImpl: void moveToState(android.app.Fragment,int,int,int,boolean)>  -> _SINK_
<com.android.musicfx.ControlPanelEffect: void initEffectsPreferences(android.content.Context,java.lang.String,int)>  -> _SINK_
<com.android.providers.calendar.CalendarInstancesHelper: void updateInstancesLocked(android.content.ContentValues,long,boolean,android.database.sqlite.SQLiteDatabase)>  -> _SINK_
<android.media.MiniThumbFile: void saveMiniThumbToFile(byte[],long,long)>  -> _SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)>  -> _SINK_
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putString(int,java.lang.String)>  -> _SINK_
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: boolean setPanoramaDestination(java.lang.String)>  -> _SINK_
<com.android.videoeditor.widgets.MediaItemView: boolean setBitmap(android.graphics.Bitmap,int,int)>  -> _SINK_
<com.android.launcher2.Launcher: void openFolder(com.android.launcher2.FolderIcon)>  -> _SINK_
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)>  -> _SINK_
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: void apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$OnClickHandler)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)>  -> _SINK_
<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Program$BaseProgramBuilder setShader(android.content.res.Resources,int)>  -> _SINK_
<com.android.launcher2.LauncherModel: void modifyItemInDatabase(android.content.Context,com.android.launcher2.ItemInfo,long,int,int,int,int,int)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)>  -> _SINK_
<android.speech.tts.TextToSpeechService$CallbackMap: void dispatchOnStart(java.lang.Object,java.lang.String)>  -> _SINK_
<android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>  -> _SINK_
<com.android.uiautomator.core.InteractionController: boolean sendText(java.lang.String)>  -> _SINK_
<android.app.UiModeManager: void enableCarMode(int)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)>  -> _SINK_
<android.security.Credentials: void install(android.content.Context,java.security.KeyPair)>  -> _SINK_
<com.android.phone.PhoneGlobals$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>  -> _SINK_
<com.google.android.apps.lightcycle.util.FileUtil: void storeFile(java.io.InputStream,java.io.File)>  -> _SINK_
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestions(android.view.textservice.TextInfo,java.lang.String,int)>  -> _SINK_
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)>  -> _SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  -> _SINK_
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>  -> _SINK_
<android.media.RemoteControlClient: void setPlaybackInformation(int,int)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)>  -> _SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>  -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>  -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>  -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>  -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>  -> _SINK_
<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>  -> _SINK_
<android.app.Service: void setForeground(boolean)>  -> _SINK_
<com.android.videoeditor.KenBurnsActivity: void onCreate(android.os.Bundle)>  -> _SINK_
<com.android.launcher2.Launcher: boolean startActivity(android.view.View,android.content.Intent,java.lang.Object)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)>  -> _SINK_
<com.android.providers.calendar.CalendarProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues,boolean)>  -> _SINK_
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: void launchActivityWithAnimation(android.content.Intent,boolean,android.os.Bundle,android.os.Handler,java.lang.Runnable)>  -> _SINK_
<android.filterfw.core.Filter: void addFieldPort(java.lang.String,java.lang.reflect.Field,boolean,boolean)>  -> _SINK_
<com.android.uiautomator.testrunner.UiAutomatorTestRunner$2: void uncaughtException(java.lang.Thread,java.lang.Throwable)>  -> _SINK_
<android.os.StrictMode$AndroidBlockGuardPolicy: void handleViolation(android.os.StrictMode$ViolationInfo)>  -> _SINK_
<android.util.Slog: int w(java.lang.String,java.lang.Throwable)>  -> _SINK_
<android.widget.Spinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)>  -> _SINK_
<android.widget.Spinner$DialogPopup: void setVerticalOffset(int)>  -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)>  -> _SINK_
<android.util.LogPrinter: void println(java.lang.String)>  -> _SINK_
<com.android.providers.calendar.CalendarCache: void writeTimezoneInstancesPrevious(java.lang.String)>  -> _SINK_
<com.android.providers.calendar.CalendarAlarmManager: void scheduleNextAlarm(boolean)>  -> _SINK_
<com.android.camera.Storage: void writeFile(java.lang.String,byte[])>  -> _SINK_
<android.filterfw.core.Filter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)>  -> _SINK_
<android.support.v4.content.LocalBroadcastManager: boolean sendBroadcast(android.content.Intent)>  -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)>  -> _SINK_
<android.security.Credentials: void install(android.content.Context,java.lang.String,byte[])>  -> _SINK_
<com.android.providers.downloads.DownloadReceiver: void onReceive(android.content.Context,android.content.Intent)>  -> _SINK_
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)>  -> _SINK_
<android.app.SearchManager: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)>  -> _SINK_
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)>  -> _SINK_
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>  -> _SINK_
<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>  -> _SINK_
<android.net.EthernetDataTracker: void setUserDataEnable(boolean)>  -> _SINK_
<android.view.ViewRootImpl$ViewRootHandler: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.systemui.usb.UsbResolverActivity: void onIntentSelected(android.content.pm.ResolveInfo,android.content.Intent,boolean)>  -> _SINK_
<com.android.exchange.adapter.Serializer: com.android.exchange.adapter.Serializer data(int,java.lang.String)>  -> _SINK_
<com.android.deskclock.timer.TimerReceiver: void onReceive(android.content.Context,android.content.Intent)>  -> _SINK_
<com.android.videoeditor.widgets.MediaLinearLayout: android.view.View addTransition(com.android.videoeditor.service.MovieTransition,java.lang.String)>  -> _SINK_
<com.android.camera.CameraSettings: void initialCameraPictureSize(android.content.Context,android.hardware.Camera$Parameters)>  -> _SINK_
<android.media.MediaPlayer: void setSurface(android.view.Surface)>  -> _SINK_
<com.android.exchange.EasSyncService: void setupProtocolVersion(com.android.exchange.EasSyncService,org.apache.http.Header)>  -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl: boolean process(java.util.EventObject)>  -> _SINK_
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>  -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void bind(android.content.Context,int,android.content.Intent)>  -> _SINK_
<android.hardware.input.InputManager: void setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.exchange.provider.MailboxUtilities: void setFlagsAndChildrensParentKey(android.content.Context,android.database.Cursor,java.lang.String)>  -> _SINK_
<com.android.providers.calendar.CalendarProvider2: void acquireInstanceRangeLocked(long,long,boolean,boolean,java.lang.String,boolean)>  -> _SINK_
<android.view.View: void setHasTransientState(boolean)>  -> _SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String)>  -> _SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String)>  -> _SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String)>  -> _SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String)>  -> _SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.launcher2.LauncherProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>  -> _SINK_
<com.android.phone.sip.SipEditor$PreferenceKey: void setValue(java.lang.String)>  -> _SINK_
<android.media.MediaScanner: void scanMtpFile(java.lang.String,java.lang.String,int,int)>  -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)>  -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.google.android.apps.lightcycle.xmp.XmpUtil: boolean writeXMPMeta(java.lang.String,com.adobe.xmp.XMPMeta)>  -> _SINK_
<com.android.gallery3d.filtershow.tools.SaveCopyTask: android.net.Uri doInBackground(com.android.gallery3d.filtershow.presets.ImagePreset[])>  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setTransactionId(byte[])>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendUssdResponse(java.lang.String)>  -> _SINK_
<com.android.mms.dom.smil.SmilElementImpl: void setId(java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentDisposition(byte[])>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void setPremiumSmsPermission(java.lang.String,int)>  -> _SINK_
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setVideoVisibility(boolean)>  -> _SINK_
<com.android.mms.ui.SlideView: void setVideoRegion(int,int,int,int)>  -> _SINK_
<com.android.internal.telephony.SmsUsageMonitor: boolean check(java.lang.String,int)>  -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: void setTo(com.google.android.mms.pdu.EncodedStringValue[])>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.mms.dom.DocumentImpl: void setDocumentURI(java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: void setDate(long)>  -> _SINK_
<com.android.mms.ui.MessageListItem: void setTextVisibility(boolean)>  -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentId(byte[])>  -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setTextVisibility(boolean)>  -> _SINK_
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>  -> _SINK_
<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)>  -> _SINK_
<com.android.mms.ui.SlideListItemView: void setImageRegionFit(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSubmitPdu(com.android.internal.telephony.cdma.SmsMessage$SubmitPdu,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)> android.permission.WAKE_LOCK  -> _SINK_
<com.google.android.mms.pdu.AcknowledgeInd: void setTransactionId(byte[])>  -> _SINK_
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri,boolean,boolean,java.util.HashMap)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)>  -> _SINK_
<com.android.providers.telephony.MmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setTop(int)>  -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setImageVisibility(boolean)>  -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS  -> _SINK_
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)>  -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setReadReport(int)>  -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: void setPriority(int)>  -> _SINK_
<android.telephony.SmsManager: boolean disableCellBroadcast(int)> android.permission.RECEIVE_SMS  -> _SINK_
<com.android.mms.transaction.SmsMessageSender: boolean sendMessage(long)>  -> _SINK_
<com.google.android.mms.pdu.GenericPdu: void setFrom(com.google.android.mms.pdu.EncodedStringValue)>  -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: void setTo(com.google.android.mms.pdu.EncodedStringValue[])>  -> _SINK_
<com.android.mms.ui.MessageUtils: void recordSound(android.app.Activity,int,long)>  -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setTextVisibility(boolean)>  -> _SINK_
<com.android.mms.ui.MessageListItem: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.mms.ui.SlideListItemView: void setVideo(java.lang.String,android.net.Uri)>  -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setContentLocation(byte[])>  -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setTransactionId(byte[])>  -> _SINK_
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: void setReadStatus(int)>  -> _SINK_
<com.google.android.mms.pdu.NotifyRespInd: void setStatus(int)>  -> _SINK_
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context)>  -> _SINK_
<com.android.mms.ui.ComposeMessageActivity: void startActivityForResult(android.content.Intent,int)>  -> _SINK_
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: void setBackgroundColor(java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.SendConf: void setResponseStatus(int)>  -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)>  -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setHeight(int)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)> android.permission.RECEIVE_SMS  -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl: void setSrc(java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.SendConf: void setTransactionId(byte[])>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setDeliveryReport(int)>  -> _SINK_
<com.android.mms.dom.ElementImpl: void setAttribute(java.lang.String,java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setReadReport(int)>  -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentLocation(byte[])>  -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setImage(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.mms.data.WorkingMessage: void setHasMultipleRecipients(boolean,boolean)>  -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS  -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setMessageClass(byte[])>  -> _SINK_
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>  -> _SINK_
<com.android.mms.data.WorkingMessage: void setHasEmail(boolean,boolean)>  -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setBackgroundColor(java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.PduParser: void parseContentTypeParams(java.io.ByteArrayInputStream,java.util.HashMap,java.lang.Integer)>  -> _SINK_
<com.android.mms.util.SimpleCache: java.lang.Object put(java.lang.Object,java.lang.Object)>  -> _SINK_
<com.android.mms.ui.SlideListItemView: void setText(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setVideo(java.lang.String,android.net.Uri)>  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])>  -> _SINK_
<com.android.mms.transaction.MmsMessageSender: void sendReadRec(android.content.Context,java.lang.String,java.lang.String,int)>  -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setEncodedStringValue(com.google.android.mms.pdu.EncodedStringValue,int)>  -> _SINK_
<com.android.mms.ui.SlideListItemView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)>  -> _SINK_
<com.android.mms.ui.SlideView: void setImageRegionFit(java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setContentClass(int)>  -> _SINK_
<com.android.mms.data.WorkingMessage: void setLengthRequiresMms(boolean,boolean)>  -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: void setMessageId(byte[])>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.android.mms.data.Conversation: void setDraftState(boolean)>  -> _SINK_
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>  -> _SINK_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setReadStatus(int)>  -> _SINK_
<com.android.mms.dom.AttrImpl: void setNodeValue(java.lang.String)>  -> _SINK_
<com.android.mms.dom.ElementImpl: void setIdAttribute(java.lang.String,boolean)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> android.permission.READ_SMS android.permission.SEND_SMS android.permission.WRITE_SMS android.permission.RECEIVE_SMS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<com.android.mms.util.SendingProgressTokenManager: void put(java.lang.Object,long)>  -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setDate(long)>  -> _SINK_
<com.google.android.mms.pdu.NotifyRespInd: void setTransactionId(byte[])>  -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentType(byte[])>  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setDeliveryReport(int)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])>  -> _SINK_
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)>  -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setOctet(int,int)>  -> _SINK_
<com.android.mms.ui.MessageUtils: void selectAudio(android.app.Activity,int)>  -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)>  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.mms.ui.MessageListItem: void setVideoVisibility(boolean)>  -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setFit(java.lang.String)>  -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setImageVisibility(boolean)>  -> _SINK_
<com.android.mms.ui.SlideListItemView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.mms.dom.DocumentImpl: void setStrictErrorChecking(boolean)>  -> _SINK_
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setImage(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.mms.ui.SlideView: void setImage(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.mms.util.BackgroundLoaderManager: boolean addCallback(android.net.Uri,com.android.mms.util.ItemLoadedCallback)>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)>  -> _SINK_
<com.android.mms.ui.NoConfirmationSendService: void onHandleIntent(android.content.Intent)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)>  -> _SINK_
<com.google.android.mms.pdu.PduPersister: void updateParts(android.net.Uri,com.google.android.mms.pdu.PduBody,java.util.HashMap)>  -> _SINK_
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)>  -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.google.android.mms.pdu.PduComposer: void arraycopy(byte[],int,int)>  -> _SINK_
<com.android.mms.transaction.MmsMessageSender: boolean sendMessage(long)>  -> _SINK_
<com.android.mms.dom.smil.SmilParElementImpl: void setDur(float)>  -> _SINK_
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> android.permission.READ_SMS android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SINK_
<com.android.mms.dom.smil.SmilMediaElementImpl: void setDur(float)>  -> _SINK_
<com.android.mms.ui.MessageListItem: void setVideo(java.lang.String,android.net.Uri)>  -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setMessageId(byte[])>  -> _SINK_
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setLongInteger(long,int)>  -> _SINK_
<com.android.mms.dom.smil.ElementTimeImpl: void setDur(float)>  -> _SINK_
<com.android.mms.dom.DocumentImpl: void setXmlVersion(java.lang.String)>  -> _SINK_
<com.android.mms.ui.SlideView: void setTextRegion(int,int,int,int)>  -> _SINK_
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)>  -> _SINK_
<com.android.mms.ui.MessageListItem: void setText(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)>  -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setWidth(int)>  -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setTextString(byte[],int)>  -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setFrom(com.google.android.mms.pdu.EncodedStringValue)>  -> _SINK_
<com.android.mms.util.Recycler$SmsRecycler: void setMessageLimit(android.content.Context,int)>  -> _SINK_
<com.google.android.mms.pdu.NotifyRespInd: void setReportAllowed(int)>  -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setImage(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.mms.dom.NodeImpl: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)>  -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.mms.transaction.SmsSingleRecipientSender: boolean sendMessage(long)>  -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setText(java.lang.String,java.lang.String)>  -> _SINK_
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)>  -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void appendEncodedStringValue(com.google.android.mms.pdu.EncodedStringValue,int)>  -> _SINK_
<android.telephony.SmsCbMessage: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS  -> _SINK_
<com.android.mms.data.RecipientIdCache: void updateNumbers(long,com.android.mms.data.ContactList)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setImageRegionFit(java.lang.String)>  -> _SINK_
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])>  -> _SINK_
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> android.permission.SEND_SMS android.permission.RECEIVE_SMS android.permission.WAKE_LOCK  -> _SINK_
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: void setWidth(int)>  -> _SINK_
<com.google.android.mms.pdu.EncodedStringValue: void setTextString(byte[])>  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void setPremiumSmsPermission(java.lang.String,int)>  -> _SINK_
<com.android.mms.data.Conversation: void startDeleteAll(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean)>  -> _SINK_
<com.android.mms.ui.SlideView: void setVideo(java.lang.String,android.net.Uri)>  -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])>  -> _SINK_
<com.android.mms.ui.MessageListItem: void setImageRegionFit(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)>  -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setLeft(int)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.android.mms.data.Conversation: void startDelete(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean,java.util.Collection)>  -> _SINK_
<com.android.mms.ui.SlideView: void setTextVisibility(boolean)>  -> _SINK_
<com.android.mms.ui.MessagingPreferenceActivity: void enableNotifications(boolean,android.content.Context)>  -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: void setStatus(int)>  -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setImageRegionFit(java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.SendConf: void setMessageId(byte[])>  -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setContentType(byte[])>  -> _SINK_
<com.android.mms.dom.ElementImpl: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.READ_SMS android.permission.SEND_SMS android.permission.WRITE_SMS android.permission.RECEIVE_SMS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>  -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setVideoVisibility(boolean)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.mms.ui.SlideView: void setImageVisibility(boolean)>  -> _SINK_
<com.android.mms.ui.SlideListItemView: void setTextVisibility(boolean)>  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchBroadcastMessage(android.telephony.SmsCbMessage)>  -> _SINK_
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])>  -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.mms.dom.NodeImpl: void setNodeValue(java.lang.String)>  -> _SINK_
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setMessageSize(long)>  -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setVideoVisibility(boolean)>  -> _SINK_
<com.android.mms.ui.SlideView: void setImageRegion(int,int,int,int)>  -> _SINK_
<com.google.android.mms.pdu.EncodedStringValue: void appendTextString(byte[])>  -> _SINK_
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setExpiry(long)>  -> _SINK_
<com.google.android.mms.pdu.PduBody: void addPart(int,com.google.android.mms.pdu.PduPart)>  -> _SINK_
<com.google.android.mms.pdu.PduPart: void setName(byte[])>  -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)>  -> _SINK_
<com.android.mms.util.Recycler$MmsRecycler: void setMessageLimit(android.content.Context,int)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void setPremiumSmsPermission(java.lang.String,int)>  -> _SINK_
<com.google.android.mms.pdu.PduPart: void setCharset(int)>  -> _SINK_
<com.google.android.mms.pdu.QuotedPrintable: byte[] decodeQuotedPrintable(byte[])>  -> _SINK_
<com.android.mms.dom.ElementImpl: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)>  -> _SINK_
<com.google.android.mms.pdu.AcknowledgeInd: void setReportAllowed(int)>  -> _SINK_
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)>  -> _SINK_
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setText(java.lang.String,java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setBcc(com.google.android.mms.pdu.EncodedStringValue[])>  -> _SINK_
<com.android.mms.ui.MessageListItem: void setImageVisibility(boolean)>  -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setImageRegionFit(java.lang.String)>  -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setVideoVisibility(boolean)>  -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setRetrieveStatus(int)>  -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setTextVisibility(boolean)>  -> _SINK_
<com.android.mms.transaction.MessagingNotification: void notifyDownloadFailed(android.content.Context,long)>  -> _SINK_
<com.google.android.mms.pdu.GenericPdu: void setMmsVersion(int)>  -> _SINK_
<com.android.mms.transaction.MessagingNotification: void blockingUpdateAllNotifications(android.content.Context,long)>  -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setTextVisibility(boolean)>  -> _SINK_
<com.android.mms.data.WorkingMessage: void send(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)>  -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setText(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.mms.ui.AudioAttachmentView: void setImageVisibility(boolean)>  -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setImageRegionFit(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  -> _SINK_
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS  -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setDeliveryReport(int)>  -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setFrom(com.google.android.mms.pdu.EncodedStringValue)>  -> _SINK_
<com.android.mms.ui.SlideListItemView: void setImage(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)>  -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setExpiry(long)>  -> _SINK_
<com.android.mms.model.SlideModel: com.android.mms.model.MediaModel set(int,com.android.mms.model.MediaModel)>  -> _SINK_
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])>  -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setSubject(com.google.android.mms.pdu.EncodedStringValue)>  -> _SINK_
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: void setEndSync(java.lang.String)>  -> _SINK_
<com.android.mms.ui.SlideView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.android.mms.ui.ComposeMessageActivity$43: boolean setViewValue(android.view.View,java.lang.Object,java.lang.String)>  -> _SINK_
<com.android.mms.ui.SlideView: void enableMMSConformanceMode(int,int,int,int)>  -> _SINK_
<com.android.mms.data.Conversation: void startQuery(android.content.AsyncQueryHandler,int,java.lang.String)>  -> _SINK_
<com.android.mms.util.NullItemLoadedFuture: void setIsDone(boolean)>  -> _SINK_
<com.google.android.mms.pdu.PduPart: void setFilename(byte[])>  -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setTransactionId(byte[])>  -> _SINK_
<com.android.mms.dom.NodeImpl: void setTextContent(java.lang.String)>  -> _SINK_
<com.android.mms.ui.MessageListItem: void setAudio(android.net.Uri,java.lang.String,java.util.Map)>  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void handleSendComplete(android.os.AsyncResult)>  -> _SINK_
<com.google.android.mms.pdu.MultimediaMessagePdu: void setSubject(com.google.android.mms.pdu.EncodedStringValue)>  -> _SINK_
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context,boolean)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.mms.ui.ConversationList: android.content.Intent createAddContactIntent(java.lang.String)>  -> _SINK_
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Void doInBackground(android.content.Intent[])>  -> _SINK_
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: void setHeight(int)>  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.READ_SMS android.permission.SEND_SMS android.permission.WRITE_SMS android.permission.RECEIVE_SMS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>  -> _SINK_
<com.android.mms.ui.BasicSlideEditorView: void setImageVisibility(boolean)>  -> _SINK_
<com.android.mms.dom.smil.SmilRegionElementImpl: void setId(java.lang.String)>  -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.android.providers.telephony.SmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>  -> _SINK_
<com.android.mms.ui.SlideView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)>  -> _SINK_
<com.android.mms.ui.SlideListItemView: void setImageVisibility(boolean)>  -> _SINK_
<com.android.mms.dom.NodeImpl: void setPrefix(java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setMessageSize(long)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)> android.permission.RECEIVE_SMS android.permission.WAKE_LOCK  -> _SINK_
<com.android.mms.model.SlideshowModel: java.lang.Object set(int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)>  -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  -> _SINK_
<com.google.android.mms.pdu.PduComposer: void append(int)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)>  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setContentType(byte[])>  -> _SINK_
<com.google.android.mms.pdu.PduBody: boolean addPart(com.google.android.mms.pdu.PduPart)>  -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setMessageClass(byte[])>  -> _SINK_
<com.android.mms.dom.smil.SmilDocumentImpl: void setDur(float)>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)>  -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setTo(com.google.android.mms.pdu.EncodedStringValue[])>  -> _SINK_
<com.android.mms.ui.SlideView: void setVideoVisibility(boolean)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.READ_SMS android.permission.SEND_SMS android.permission.WRITE_SMS android.permission.RECEIVE_SMS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)> android.permission.WAKE_LOCK  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setCc(com.google.android.mms.pdu.EncodedStringValue[])>  -> _SINK_
<com.android.internal.telephony.SmsUsageMonitor: void setPremiumSmsPermission(java.lang.String,int)>  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setTo(com.google.android.mms.pdu.EncodedStringValue[])>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void setPremiumSmsPermission(java.lang.String,int)>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS  -> _SINK_
<com.android.mms.ui.ComposeMessageActivity: void onSaveInstanceState(android.os.Bundle)>  -> _SINK_
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)>  -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: void setMessageId(byte[])>  -> _SINK_
<com.android.mms.model.SlideshowModel: java.util.HashMap openPartFiles(android.content.ContentResolver)>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)>  -> _SINK_
<com.google.android.mms.pdu.ReadRecInd: void setDate(long)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.mms.model.SlideModel: java.lang.Object set(int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  -> _SINK_
<com.android.mms.ui.ConversationListItem: void setChecked(boolean)>  -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>  -> _SINK_
<com.google.android.mms.pdu.SendReq: void setMessageClass(byte[])>  -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)> android.permission.READ_SMS  -> _SINK_
<com.android.mms.ui.ConversationList$4: boolean onQueryTextSubmit(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  -> _SINK_
<com.google.android.mms.pdu.PduPersister: android.net.Uri persistPart(com.google.android.mms.pdu.PduPart,long,java.util.HashMap)>  -> _SINK_
<com.android.mms.ui.SlideView: void setText(java.lang.String,java.lang.String)>  -> _SINK_
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> android.permission.SEND_SMS android.permission.RECEIVE_SMS android.permission.WAKE_LOCK  -> _SINK_
<com.google.android.mms.pdu.RetrieveConf: void setRetrieveText(com.google.android.mms.pdu.EncodedStringValue)>  -> _SINK_
<com.google.android.mms.pdu.ReadOrigInd: void setMessageId(byte[])>  -> _SINK_
<com.android.mms.dom.DocumentImpl: void setXmlStandalone(boolean)>  -> _SINK_
<com.google.android.mms.pdu.PduPersister: android.net.Uri move(android.net.Uri,android.net.Uri)>  -> _SINK_
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setImage(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<android.telephony.SmsManager: boolean enableCellBroadcast(int)>  -> _SINK_
<com.android.mms.ui.SlideListItemView: void setVideoVisibility(boolean)>  -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setText(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.mms.transaction.RetryScheduler: void setRetryAlarm(android.content.Context)>  -> _SINK_
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideModel set(int,com.android.mms.model.SlideModel)>  -> _SINK_
<com.google.android.mms.pdu.NotificationInd: void setFrom(com.google.android.mms.pdu.EncodedStringValue)>  -> _SINK_
<com.android.mms.ui.VideoAttachmentView: void setVideo(java.lang.String,android.net.Uri)>  -> _SINK_
<com.android.mms.ui.SlideshowAttachmentView: void setVideo(java.lang.String,android.net.Uri)>  -> _SINK_
<com.google.android.mms.pdu.PduPart: void setData(byte[])>  -> _SINK_
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE  -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])>  -> _SINK_
<com.android.mms.ui.MessageListItem: void setImage(java.lang.String,android.graphics.Bitmap)>  -> _SINK_
<com.google.android.mms.pdu.DeliveryInd: void setDate(long)>  -> _SINK_
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])>  -> _SINK_
<com.android.mms.util.ImageCacheService: void putImageData(java.lang.String,int,byte[])>  -> _SINK_
<com.google.android.mms.pdu.GenericPdu: void setMessageType(int)>  -> _SINK_
<com.google.android.mms.pdu.PduPart: void setContentTransferEncoding(byte[])>  -> _SINK_
<com.google.android.mms.pdu.PduHeaders: void setEncodedStringValues(com.google.android.mms.pdu.EncodedStringValue[],int)>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createSaveContactIntent(android.content.Context,com.android.contacts.model.RawContactDeltaList,java.lang.String,int,boolean,java.lang.Class,java.lang.String,long,java.lang.String)>  -> _SINK_
<com.android.contacts.model.account.AccountWithDataSet: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)>  -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: void setDefaultFilterHeaderText(int)>  -> _SINK_
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void startPhotoActivity(android.content.Intent,int,java.lang.String)>  -> _SINK_
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.contacts.activities.ContactEditorAccountsChangedActivity: void onActivityResult(int,int,android.content.Intent)>  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForCommonDataKind: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)>  -> _SINK_
<com.android.contacts.interactions.ImportExportDialogFragment: void show(android.app.FragmentManager,boolean)>  -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher: void updateScoreWithNicknameMatch(long)>  -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createGroupDeletionIntent(android.content.Context,long)>  -> _SINK_
<com.android.contacts.calllog.CallLogListItemHelper: void setPhoneCallDetails(com.android.contacts.calllog.CallLogListItemViews,com.android.contacts.PhoneCallDetails,boolean)>  -> _SINK_
<com.android.contacts.detail.ContactDetailTabCarousel: void restoreCurrentTab(int)>  -> _SINK_
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)>  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updatePhotoId(android.database.sqlite.SQLiteDatabase,long)>  -> _SINK_
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void newContact(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)>  -> _SINK_
<com.android.providers.contacts.VoicemailStatusTable: android.os.ParcelFileDescriptor openFile(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  -> _SINK_
<com.android.contacts.editor.LabeledEditorView: void setEnabled(boolean)>  -> _SINK_
<com.android.contacts.widget.PinnedHeaderListView: void setHeaderInvisible(int,boolean)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateHasPhoneNumber(android.database.sqlite.SQLiteDatabase,long)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setVolumeControlStream(int)>  -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: boolean save(int)>  -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher: void updateScoreWithPhoneNumberMatch(long)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateDisplayNameForRawContact(android.database.sqlite.SQLiteDatabase,long)>  -> _SINK_
<com.android.contacts.editor.SelectAccountDialogFragment: void show(android.app.FragmentManager,android.app.Fragment,int,com.android.contacts.util.AccountsListAdapter$AccountListFilter,android.os.Bundle)>  -> _SINK_
<com.android.contacts.list.ContactListFilterView: void setActivated(boolean)>  -> _SINK_
<com.android.contacts.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)>  -> _SINK_
<com.android.contacts.editor.TextFieldsEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)>  -> _SINK_
<com.android.contacts.list.ContactListPinnedHeaderView: void setCountView(java.lang.String)>  -> _SINK_
<com.android.contacts.util.AccountFilterUtil: boolean updateAccountFilterTitleForPhone(android.view.View,com.android.contacts.list.ContactListFilter,boolean)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void markForAggregation(long,int,boolean)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void sendFetchVoicemailRequest(android.net.Uri)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$TextViewWithMessagesController: void setPermanentText(java.lang.String)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setSuperPrimary(boolean)>  -> _SINK_
<com.android.contacts.editor.PhoneticNameEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)>  -> _SINK_
<com.android.contacts.editor.KindSectionView: void setEnabled(boolean)>  -> _SINK_
<com.android.providers.contacts.ContactDirectoryManager: void onPackageChanged(java.lang.String)>  -> _SINK_
<com.android.contacts.list.ContactBrowseListFragment: void restoreSavedState(android.os.Bundle)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void copyLongValue(android.content.ContentValues,java.lang.String,android.content.ContentValues,java.lang.String)>  -> _SINK_
<com.android.contacts.editor.TextFieldsEditorView$SavedState: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.contacts.preference.ContactsPreferences: void setSortOrder(int)>  -> _SINK_
<com.android.contacts.list.ContactEntryListAdapter: void setPinnedSectionTitle(android.view.View,java.lang.String)>  -> _SINK_
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SINK_
<com.android.providers.contacts.DefaultCallLogInsertionHelper: void addComputedValues(android.content.ContentValues)>  -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)>  -> _SINK_
<com.android.contacts.group.GroupEditorFragment: void loadMemberToAddToGroup(long,java.lang.String)>  -> _SINK_
<com.android.contacts.activities.PeopleActivity$ContactDetailFragmentListener: void onItemClicked(android.content.Intent)>  -> _SINK_
<com.android.contacts.PhoneCallDetailsHelper: void setCallDetailsHeader(android.widget.TextView,com.android.contacts.PhoneCallDetails)>  -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)>  -> _SINK_
<com.android.contacts.util.AccountPromptUtils: void launchAccountPrompt(android.app.Activity)>  -> _SINK_
<com.android.contacts.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void copyStringFrom(com.android.contacts.model.RawContactDelta$ValuesDelta,java.lang.String)>  -> _SINK_
<com.android.contacts.interactions.PhoneNumberInteraction: void onLoadComplete(android.content.Loader,android.database.Cursor)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void updateContactVisible(com.android.providers.contacts.TransactionContext,long)>  -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setPhoneticFamilyName(java.lang.String)>  -> _SINK_
<com.android.contacts.ContactPhotoManagerImpl: void cacheBitmap(android.net.Uri,android.graphics.Bitmap,byte[])>  -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider: android.os.ParcelFileDescriptor openDataFile(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setPositionSeekListener(android.widget.SeekBar$OnSeekBarChangeListener)>  -> _SINK_
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)>  -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void setShouldSync(com.android.contacts.list.CustomContactListFilterActivity$GroupDelta,boolean,boolean)>  -> _SINK_
<android.widget.QuickContactBadge: void setMode(int)>  -> _SINK_
<com.android.email.activity.MessageViewFragmentBase$ContactStatusLoaderCallbacks: android.os.Bundle createArguments(java.lang.String)>  -> _SINK_
<com.android.contacts.model.RawContactModifier: void migrateStructuredName(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)>  -> _SINK_
<gov.nist.javax.sip.header.Contact: void setQValue(float)>  -> _SINK_
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>  -> _SINK_
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateLookupKeyForRawContact(android.database.sqlite.SQLiteDatabase,long)>  -> _SINK_
<com.android.contacts.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean)>  -> _SINK_
<com.android.providers.contacts.ProfileAwareUriMatcher: void addURI(java.lang.String,java.lang.String,int)>  -> _SINK_
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>  -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void setIsPrimary(long,long,long)>  -> _SINK_
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createNewRawContactIntent(android.content.Context,java.util.ArrayList,com.android.contacts.model.account.AccountWithDataSet,java.lang.Class,java.lang.String)>  -> _SINK_
<com.android.contacts.widget.PinnedHeaderListView: void setFadingHeader(int,int,boolean)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void replaceStatusUpdate(java.lang.Long,long,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)>  -> _SINK_
<com.android.contacts.list.LegacyContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>  -> _SINK_
<com.android.providers.contacts.PhotoStore: long insert(com.android.providers.contacts.PhotoProcessor,boolean)>  -> _SINK_
<com.android.contacts.editor.LabeledEditorView: void saveValue(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createJoinContactsIntent(android.content.Context,long,long,boolean,java.lang.Class,java.lang.String)>  -> _SINK_
<com.android.contacts.dialpad.DialpadImageButton: void setPressed(boolean)>  -> _SINK_
<com.android.contacts.group.GroupDetailFragment: void setQuickContact(boolean)>  -> _SINK_
<com.android.contacts.model.RawContact: void setAccount(com.android.contacts.model.account.AccountWithDataSet)>  -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: void setDisplayName(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView)>  -> _SINK_
<com.android.providers.contacts.DbModifierWithNotification: long insert(android.content.ContentValues)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void markNewForAggregation(long,int)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateAggregateData(com.android.providers.contacts.TransactionContext,long)>  -> _SINK_
<com.android.contacts.model.RawContactModifier: void migrateGenericWithTypeColumn(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)>  -> _SINK_
<com.android.contacts.activities.ContactSelectionActivity: void startActivityAndForwardResult(android.content.Intent)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void insertNameLookup(long,long,int,java.lang.String)>  -> _SINK_
<com.android.contacts.model.RawContactModifier: void parseExtras(android.content.Context,com.android.contacts.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)>  -> _SINK_
<com.android.contacts.list.ContactListItemView: void setSectionHeader(java.lang.String)>  -> _SINK_
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.GET_ACCOUNTS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setPhoneticGivenName(java.lang.String)>  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForStructuredName: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)>  -> _SINK_
<com.android.contacts.interactions.GroupDeletionDialogFragment: void show(android.app.FragmentManager,long,java.lang.String,boolean)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setClipPosition(int,int)>  -> _SINK_
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSdCard(android.content.Context,com.android.contacts.model.account.AccountWithDataSet)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setRateDisplay(float,int)>  -> _SINK_
<gov.nist.javax.sip.header.Contact: void setSipInstanceParam(java.lang.String)>  -> _SINK_
<com.android.contacts.format.PrefixHighlighter: void setText(android.widget.TextView,java.lang.String,char[])>  -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<com.android.contacts.model.dataitem.DataItem: void setRawContactId(long)>  -> _SINK_
<com.android.providers.contacts.ContactsProvider2: void notifyChange(boolean)>  -> _SINK_
<com.android.contacts.editor.EventFieldEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForGroupMembership: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void updateRawContactDisplayName(android.database.sqlite.SQLiteDatabase,long)>  -> _SINK_
<com.android.contacts.list.JoinContactListFragment: void restoreSavedState(android.os.Bundle)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoneticMiddleName(java.lang.String)>  -> _SINK_
<com.android.contacts.list.ContactListItemView: void setData(char[],int)>  -> _SINK_
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)>  -> _SINK_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<com.android.contacts.widget.FrameLayoutWithOverlay: void setAlphaLayer(android.view.View)>  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)>  -> _SINK_
<com.android.contacts.interactions.GroupCreationDialogFragment: void onCompleted(java.lang.String)>  -> _SINK_
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>  -> _SINK_
<com.android.providers.contacts.aggregation.ProfileAggregator: void aggregateContact(com.android.providers.contacts.TransactionContext,android.database.sqlite.SQLiteDatabase,long)>  -> _SINK_
<com.android.providers.contacts.VoicemailStatusTable: int update(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.contacts.list.JoinContactListFragment: void setQueryString(java.lang.String,boolean)>  -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)>  -> _SINK_
<gov.nist.javax.sip.header.Contact: void setExpires(int)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoneticGivenName(java.lang.String)>  -> _SINK_
<com.android.providers.contacts.FastScrollingIndexCache: android.os.Bundle buildExtraBundle(java.lang.String[],int[])>  -> _SINK_
<com.android.contacts.list.ContactListPinnedHeaderView: void setSectionHeader(java.lang.String)>  -> _SINK_
<com.android.contacts.editor.PhotoEditorView: void setSuperPrimary(boolean)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: boolean updateContactVisible(com.android.providers.contacts.TransactionContext,long,boolean)>  -> _SINK_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSim(android.content.Context,com.android.contacts.model.account.AccountWithDataSet)>  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForPhoto: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setStartStopListener(android.view.View$OnClickListener)>  -> _SINK_
<com.android.contacts.model.RawContactModifier: void migrateEvent(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,java.lang.Integer)>  -> _SINK_
<com.android.contacts.list.ContactListItemView: void setPresence(android.graphics.drawable.Drawable)>  -> _SINK_
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)>  -> _SINK_
<com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment: com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment newInstance(int,int)>  -> _SINK_
<com.android.contacts.SpecialCharSequenceMgr: boolean handleAdnEntry(android.content.Context,java.lang.String,android.widget.EditText)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void insertStatusUpdate(java.lang.Long,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)>  -> _SINK_
<com.android.contacts.test.InjectedServices: void setSystemService(java.lang.String,java.lang.Object)>  -> _SINK_
<com.android.contacts.util.AccountFilterUtil: void startAccountFilterActivityForResult(android.app.Activity,int,com.android.contacts.list.ContactListFilter)>  -> _SINK_
<com.android.contacts.editor.KindSectionView: void setTitleVisible(boolean)>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createNewGroupIntent(android.content.Context,com.android.contacts.model.account.AccountWithDataSet,java.lang.String,long[],java.lang.Class,java.lang.String)>  -> _SINK_
<com.android.contacts.list.PhoneNumberPickerFragment: void setSearchMode(boolean)>  -> _SINK_
<com.android.contacts.util.ImageViewDrawableSetter: void setupContactPhoto(com.android.contacts.model.Contact,android.widget.ImageView)>  -> _SINK_
<com.android.contacts.activities.PeopleActivity$ContactDetailFragmentListener: void onCreateRawContactRequested(java.util.ArrayList,com.android.contacts.model.account.AccountWithDataSet)>  -> _SINK_
<com.android.contacts.socialwidget.SocialWidgetSettings: void setContactUri(android.content.Context,int,android.net.Uri)>  -> _SINK_
<com.android.contacts.activities.DialtactsActivity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForIdentity: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)>  -> _SINK_
<com.android.contacts.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)>  -> _SINK_
<com.android.providers.contacts.NameSplitter$Name: void toValues(android.content.ContentValues)>  -> _SINK_
<com.android.contacts.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>  -> _SINK_
<com.android.contacts.editor.GroupMembershipView: void setEnabled(boolean)>  -> _SINK_
<com.android.contacts.editor.EventFieldEditorView: void setEnabled(boolean)>  -> _SINK_
<com.android.contacts.widget.FrameLayoutWithOverlay: void setOverlayClickable(boolean)>  -> _SINK_
<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)>  -> _SINK_
<com.android.contacts.group.GroupEditorFragment$Member: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseEf(com.android.internal.telephony.gsm.SimTlv,java.util.Map,int)>  -> _SINK_
<gov.nist.javax.sip.header.Contact: void setTempGruuParam(java.lang.String)>  -> _SINK_
<com.android.providers.contacts.VoicemailContentTable: android.net.Uri insert(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)> com.android.voicemail.permission.ADD_VOICEMAIL  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void setIsSuperPrimary(long,long,long)>  -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setPhoneticMiddleName(java.lang.String)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: boolean updateContactVisibleOnlyIfChanged(com.android.providers.contacts.TransactionContext,long)>  -> _SINK_
<com.android.contacts.editor.ContactEditorUtils: void saveDefaultAndAllAccounts(com.android.contacts.model.account.AccountWithDataSet)>  -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.model.Contact)>  -> _SINK_
<com.android.contacts.list.ContactPickerFragment: void restoreSavedState(android.os.Bundle)>  -> _SINK_
<com.android.providers.contacts.VoicemailContentTable: android.os.ParcelFileDescriptor openFile(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void putNull(java.lang.String)>  -> _SINK_
<com.android.contacts.util.AccountFilterUtil: boolean updateAccountFilterTitleForPeople(android.view.View,com.android.contacts.list.ContactListFilter,boolean)>  -> _SINK_
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: void show(android.app.FragmentManager,java.util.ArrayList,com.android.contacts.interactions.PhoneNumberInteraction$InteractionType,java.lang.String)>  -> _SINK_
<com.android.contacts.editor.PhotoEditorView: void setDeletable(boolean)>  -> _SINK_
<com.android.contacts.editor.ContactEditorFragment: void setAggregationSuggestionViewEnabled(boolean)>  -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void setShouldSync(com.android.contacts.list.CustomContactListFilterActivity$GroupDelta,boolean)>  -> _SINK_
<com.android.providers.contacts.DbModifierWithNotification: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>  -> _SINK_
<com.android.contacts.activities.ContactEditorActivity$2: void onEditOtherContactRequested(android.net.Uri,java.util.ArrayList)>  -> _SINK_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<com.android.providers.contacts.ContactsProvider2: boolean isWritableAccountWithDataSet(java.lang.String)>  -> _SINK_
<com.android.contacts.editor.LabeledEditorView: void setDeleteButtonVisible(boolean)>  -> _SINK_
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoneticFamilyName(java.lang.String)>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createGroupUpdateIntent(android.content.Context,long,java.lang.String,long[],long[],java.lang.Class,java.lang.String)>  -> _SINK_
<com.android.contacts.list.ContactListItemView: void setPhoneticName(char[],int)>  -> _SINK_
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.GET_ACCOUNTS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SINK_
<com.android.providers.contacts.ContactsTransaction: void startTransactionForDb(android.database.sqlite.SQLiteDatabase,java.lang.String,android.database.sqlite.SQLiteTransactionListener)>  -> _SINK_
<gov.nist.javax.sip.header.Contact: void setPubGruuParam(java.lang.String)>  -> _SINK_
<com.android.contacts.activities.ContactEditorActivity$2: void onCustomEditContactActivityRequested(com.android.contacts.model.account.AccountWithDataSet,android.net.Uri,android.os.Bundle,boolean)>  -> _SINK_
<com.android.providers.contacts.TransactionContext: void rawContactInserted(long,long)>  -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  -> _SINK_
<com.android.contacts.util.NameConverter: android.content.ContentValues displayNameToStructuredName(android.content.Context,java.lang.String,android.content.ContentValues)>  -> _SINK_
<com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask: void onPostExecute(com.android.contacts.PhoneCallDetails[])>  -> _SINK_
<com.android.contacts.quickcontact.FloatingChildLayout: void setBackground(android.graphics.drawable.Drawable)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateStarred(long)>  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForStructuredPostal: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher: void updateScoreWithEmailMatch(long)>  -> _SINK_
<com.android.providers.contacts.aggregation.util.ContactMatcher: void matchName(long,int,java.lang.String,int,java.lang.String,int)>  -> _SINK_
<com.android.contacts.quickcontact.ActionMultiMap: void put(java.lang.String,com.android.contacts.quickcontact.Action,boolean)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void copyStringValue(android.content.ContentValues,java.lang.String,android.content.ContentValues,java.lang.String)>  -> _SINK_
<com.android.contacts.model.AccountTypeManagerImpl: void processBroadcastIntent(android.content.Intent)>  -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void addNameRow(android.database.MatrixCursor,com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.contacts.preference.ContactsPreferences: void setDisplayOrder(int)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setGroupRowId(long)>  -> _SINK_
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)>  -> _SINK_
<com.android.contacts.activities.ContactEditorActivity$2: void onCustomCreateContactActivityRequested(com.android.contacts.model.account.AccountWithDataSet,android.os.Bundle)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.contacts.widget.TransitionAnimationView: void setMaskVisibility(boolean)>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createSetSuperPrimaryIntent(android.content.Context,long)>  -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: void setCompanyName(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void setLocale(com.android.providers.contacts.ContactsProvider2,java.util.Locale)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setSpeakerphoneListener(android.view.View$OnClickListener)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: int markAllVisibleForAggregation(android.database.sqlite.SQLiteDatabase)>  -> _SINK_
<com.android.contacts.calllog.CallLogAdapter: void injectContactInfoForTest(java.lang.String,java.lang.String,com.android.contacts.calllog.ContactInfo)>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createSetRingtone(android.content.Context,android.net.Uri,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,byte[])>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setIsBuffering()>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createClearPrimaryIntent(android.content.Context,long)>  -> _SINK_
<com.android.contacts.widget.FrameLayoutWithOverlay: void setAlphaLayerValue(float)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator$MatchCandidateList: void add(java.lang.String,int)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setDisplayName(java.lang.String)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: long onRawContactInsert(com.android.providers.contacts.TransactionContext,android.database.sqlite.SQLiteDatabase,long)>  -> _SINK_
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.contacts.util.ExpirableCache: void put(java.lang.Object,java.lang.Object)>  -> _SINK_
<com.android.contacts.list.JoinContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>  -> _SINK_
<com.android.contacts.widget.AlphaTouchInterceptorOverlay: void setOverlayClickable(boolean)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setRateIncreaseButtonListener(android.view.View$OnClickListener)>  -> _SINK_
<com.android.contacts.group.GroupBrowseListFragment: void setAddAccountsVisibility(boolean)>  -> _SINK_
<com.android.contacts.model.RawContactModifier: void migratePostal(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)>  -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void addEmailAddress(android.database.MatrixCursor,com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)>  -> _SINK_
<com.android.contacts.list.ContactListItemView: void setSnippet(java.lang.String)>  -> _SINK_
<com.android.contacts.editor.TextFieldsEditorView: void setEnabled(boolean)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void setContactId(long,long)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setSpeakerPhoneOn(boolean)>  -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: void onCreate(android.os.Bundle)>  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForGroupMembership: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)>  -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void addPhoneRow(android.database.MatrixCursor,com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection,long,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>  -> _SINK_
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setFetchContentTimeout()>  -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  -> _SINK_
<com.android.contacts.list.ContactEntryListFragment: void loadDirectoryPartition(int,com.android.contacts.list.DirectoryPartition)>  -> _SINK_
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setDisplayName(java.lang.String)>  -> _SINK_
<com.android.contacts.model.account.AccountType: com.android.contacts.model.dataitem.DataKind addKind(com.android.contacts.model.dataitem.DataKind)>  -> _SINK_
<com.android.contacts.datepicker.DatePicker$SavedState: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.RawContactDelta$ValuesDelta insertChild(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.account.AccountType$EditType)>  -> _SINK_
<com.android.contacts.model.RawContactDeltaList: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>  -> _SINK_
<com.android.contacts.PhoneCallDetailsHelper: void setPhoneCallDetails(com.android.contacts.PhoneCallDetailsViews,com.android.contacts.PhoneCallDetails,boolean)>  -> _SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseTag(com.android.internal.telephony.gsm.SimTlv,int)>  -> _SINK_
<com.android.contacts.editor.StructuredNameEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)>  -> _SINK_
<com.android.providers.contacts.aggregation.ContactAggregator: void updateDisplayNameForContact(android.database.sqlite.SQLiteDatabase,long)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,long)>  -> _SINK_
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void setShouldSync(boolean)>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>  -> _SINK_
<com.android.contacts.editor.PhotoEditorView: void setPhotoBitmap(android.graphics.Bitmap)>  -> _SINK_
<com.android.providers.contacts.DbModifierWithNotification: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.contacts.util.AccountFilterUtil: void startAccountFilterActivityForResult(android.app.Fragment,int,com.android.contacts.list.ContactListFilter)>  -> _SINK_
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void startPhotoActivity(android.content.Intent,int,java.lang.String)>  -> _SINK_
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.GET_ACCOUNTS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SINK_
<com.android.contacts.editor.PhotoEditorView: void setEnabled(boolean)>  -> _SINK_
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: void put(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.RawContactDelta$ValuesDelta parseExtras(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,android.os.Bundle,java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.providers.contacts.VoicemailContentProvider: void checkAndAddSourcePackageIntoValues(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)>  -> _SINK_
<com.android.contacts.list.PostalAddressListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoto(byte[])>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>  -> _SINK_
<com.android.contacts.editor.RawContactReadOnlyEditorView: void setState(com.android.contacts.model.RawContactDelta,com.android.contacts.model.account.AccountType,com.android.contacts.editor.ViewIdGenerator,boolean)>  -> _SINK_
<com.android.contacts.util.NameConverter: java.util.Map displayNameToStructuredName(android.content.Context,java.lang.String)>  -> _SINK_
<com.android.contacts.list.ContactTileView: void setHorizontalDividerVisibility(int)>  -> _SINK_
<com.android.contacts.datepicker.DatePicker: void setEnabled(boolean)>  -> _SINK_
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>  -> _SINK_
<com.android.contacts.quickcontact.FloatingChildLayout: void setBackgroundColorAlpha(int)>  -> _SINK_
<com.android.contacts.interactions.GroupCreationDialogFragment: void show(android.app.FragmentManager,java.lang.String,java.lang.String,java.lang.String,com.android.contacts.interactions.GroupCreationDialogFragment$OnGroupCreatedListener)>  -> _SINK_
<com.android.providers.contacts.DataRowHandlerForPhoto: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)>  -> _SINK_
<com.android.contacts.editor.RawContactEditorView: void setEnabled(boolean)>  -> _SINK_
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.providers.contacts.VoicemailContentTable: int update(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.contacts.model.dataitem.PhoneDataItem: void computeFormattedPhoneNumber(java.lang.String)>  -> _SINK_
<com.android.contacts.list.PhoneNumberPickerFragment: void restoreSavedState(android.os.Bundle)>  -> _SINK_
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,int)>  -> _SINK_
<com.android.contacts.list.ContactsSectionIndexer: void setProfileHeader(java.lang.String)>  -> _SINK_
<com.android.contacts.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>  -> _SINK_
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void put(java.lang.String,java.lang.Object)>  -> _SINK_
<com.android.contacts.detail.CarouselTab: void setLabel(java.lang.String)>  -> _SINK_
<com.android.contacts.detail.ContactDetailDisplayUtils: void setSocialSnippet(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView,android.widget.ImageView)>  -> _SINK_
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)>  -> _SINK_
<com.android.contacts.model.RawContactDelta: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.provider.ContactsContract$QuickContact: android.content.Intent composeQuickContactsIntent(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])>  -> _SINK_
<com.android.contacts.list.AccountFilterActivity: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>  -> _SINK_
<com.android.contacts.list.ContactTileListFragment: void enableQuickContact(boolean)>  -> _SINK_
<com.android.contacts.detail.ActionsViewContainer: void setPosition(int)>  -> _SINK_
<com.android.contacts.editor.BaseRawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$TextViewWithMessagesController: void setTemporaryText(java.lang.String,long,java.util.concurrent.TimeUnit)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setRateDecreaseButtonListener(android.view.View$OnClickListener)>  -> _SINK_
<com.android.contacts.util.DialogManager: void showDialogInView(android.view.View,android.os.Bundle)>  -> _SINK_
<com.android.contacts.PhoneCallDetailsHelper: void setCurrentTimeForTest(long)>  -> _SINK_
<com.android.contacts.list.EmailAddressListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>  -> _SINK_
<com.android.contacts.editor.RawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS  -> _SINK_
<com.android.providers.contacts.ContactLocaleUtils: void setLocale(java.util.Locale)>  -> _SINK_
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setIsFetchingContent()>  -> _SINK_
<com.android.providers.contacts.ContactsDatabaseHelper: void setProperty(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.contacts.model.dataitem.DataItem: void setMimeType(java.lang.String)>  -> _SINK_
<com.android.contacts.ContactSaveService: android.content.Intent createSaveContactIntent(android.content.Context,com.android.contacts.model.RawContactDeltaList,java.lang.String,int,boolean,java.lang.Class,java.lang.String,android.os.Bundle)>  -> _SINK_
<com.android.calendar.month.MonthWeekEventsView: void setWeekParams(java.util.HashMap,java.lang.String)>  -> _SINK_
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)>  -> _SINK_
<com.android.calendar.CalendarEventModel: void addAttendees(java.lang.String,com.android.common.Rfc822Validator)>  -> _SINK_
<com.android.calendar.CalendarEventModel: void addAttendee(com.android.calendar.CalendarEventModel$Attendee)>  -> _SINK_
<com.android.calendar.EventGeometry: void setHourHeight(float)>  -> _SINK_
<com.android.calendar.Utils: android.content.Intent createEmailAttendeesIntent(android.content.res.Resources,java.lang.String,java.lang.String,java.util.List,java.util.List,java.lang.String)>  -> _SINK_
<com.android.calendar.alerts.DismissAlarmsService: void onHandleIntent(android.content.Intent)>  -> _SINK_
<com.android.calendar.CalendarUtils: void setSharedPreference(android.content.SharedPreferences,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.calendar.month.MonthByWeekAdapter: void setSelectedDay(android.text.format.Time)>  -> _SINK_
<com.android.calendar.DayView: void setMoreAllDayEventsTextAlpha(int)>  -> _SINK_
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)>  -> _SINK_
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)>  -> _SINK_
<com.android.calendar.EventLoader: void loadEventsInBackground(int,java.util.ArrayList,int,java.lang.Runnable,java.lang.Runnable)>  -> _SINK_
<com.android.calendar.Utils: void setTodayIcon(android.graphics.drawable.LayerDrawable,android.content.Context,java.lang.String)>  -> _SINK_
<com.android.calendar.agenda.AgendaByDayAdapter: void setAsFirstDayAfterYesterday(int)>  -> _SINK_
<com.android.calendar.ExpandableTextView: void setText(java.lang.String)>  -> _SINK_
<com.android.calendar.agenda.AgendaAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>  -> _SINK_
<com.android.calendar.DayOfMonthDrawable: void setAlpha(int)>  -> _SINK_
<com.android.calendar.CalendarController: void setTime(long)>  -> _SINK_
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)>  -> _SINK_
<com.android.calendar.event.AttendeesView: void setEnabled(boolean)>  -> _SINK_
<com.android.calendar.CalendarController: void launchViewEvent(long,long,long,int)>  -> _SINK_
<com.android.calendar.DayOfMonthDrawable: void setColorFilter(android.graphics.ColorFilter)>  -> _SINK_
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)>  -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$AsyncCalendarsUpdater: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>  -> _SINK_
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)>  -> _SINK_
<com.android.calendar.AllInOneActivity: void setControlsOffset(int)>  -> _SINK_
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)>  -> _SINK_
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,boolean)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<com.android.calendar.Utils: void setDefaultView(android.content.Context,int)>  -> _SINK_
<com.android.calendar.CalendarUtils: void setSharedPreference(android.content.SharedPreferences,java.lang.String,boolean)>  -> _SINK_
<com.android.calendar.alerts.AlertUtils: void setAlertFiredInSharedPrefs(android.content.Context,long,long,long)>  -> _SINK_
<com.android.calendar.alerts.AlertAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>  -> _SINK_
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)>  -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)>  -> _SINK_
<com.android.calendar.DayOfMonthDrawable: void setDayOfMonth(int)>  -> _SINK_
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,int)>  -> _SINK_
<com.android.calendar.alerts.AlertUtils$1: void set(int,long,android.app.PendingIntent)>  -> _SINK_
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)>  -> _SINK_
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void onClick(android.view.View)>  -> _SINK_
<com.android.calendar.GeneralPreferences: void setDefaultValues(android.content.Context)>  -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)>  -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: void setVisible(int,int)>  -> _SINK_
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void toggleVisibility(int)>  -> _SINK_
<com.android.calendar.agenda.AgendaListView: void setSelectedInstanceId(long)>  -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,long,java.lang.String,boolean,boolean)>  -> _SINK_
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)>  -> _SINK_
<com.android.calendar.Utils: void setUpSearchView(android.widget.SearchView,android.app.Activity)>  -> _SINK_
<com.android.calendar.DayView: void setSelected(android.text.format.Time,boolean,boolean)>  -> _SINK_
<com.android.calendar.alerts.AlertUtils: android.content.Intent buildEventViewIntent(android.content.Context,long,long,long)>  -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter: void setSelectedView(android.view.View)>  -> _SINK_
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)>  -> _SINK_
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)>  -> _SINK_
<com.android.calendar.agenda.AgendaListView: void setHideDeclinedEvents(boolean)>  -> _SINK_
<com.android.calendar.month.MonthWeekEventsView: void setClickedDay(float)>  -> _SINK_
<com.android.calendar.alerts.AlertService$NotificationMgrWrapper: void notify(int,com.android.calendar.alerts.AlertService$NotificationWrapper)>  -> _SINK_
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)>  -> _SINK_
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)>  -> _SINK_
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)>  -> _SINK_
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>  -> _SINK_
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)>  -> _SINK_
<com.android.calendar.alerts.AlertUtils: android.content.ContentValues makeContentValues(long,long,long,long,int)>  -> _SINK_
<com.android.calendar.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)>  -> _SINK_
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)>  -> _SINK_
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>  -> _SINK_
<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> android.permission.READ_CALENDAR  -> _SINK_
<com.android.calendar.month.SimpleWeeksAdapter: void setSelectedDay(android.text.format.Time)>  -> _SINK_
<com.android.calendar.alerts.AlertService: int processQuery(android.database.Cursor,android.content.Context,long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>  -> _SINK_
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>  -> _SINK_
<com.android.calendar.Utils: void setTimeZone(android.content.Context,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void print(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.internal.telephony.CallManager: void setMute(boolean)>  -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)>  -> _SINK_
<com.android.internal.telephony.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)>  -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void setNextCallFailCause(int)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)>  -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>  -> _SINK_
<android.webkit.DeviceMotionAndOrientationManager: void setUseMock()>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)>  -> _SINK_
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaSubscriptionSource(int,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setRadioPower(boolean)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)>  -> _SINK_
<com.android.server.DeviceStorageMonitorService$CacheFileDeletedObserver: void onEvent(int,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  -> _SINK_
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.server.am.ActivityManagerService: void dispatchUserSwitch(com.android.server.am.UserStartedState,int,int)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)>  -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setRadioPower(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.CallManager$1: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,int)>  -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setCardState(int)>  -> _SINK_
<com.android.deskclock.HandleSetAlarm: void onCreate(android.os.Bundle)> android.permission.WRITE_SETTINGS  -> _SINK_
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setMute(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqAddApnContext(com.android.internal.telephony.ApnContext)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.CallManager: boolean sendUssdResponse(com.android.internal.telephony.Phone,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)>  -> _SINK_
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)>  -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)> android.permission.MODIFY_PHONE_STATE android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.DataCallState: com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(android.net.LinkProperties,boolean)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> android.permission.WRITE_SETTINGS  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)>  -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void putRecoveryAction(int)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.IntRangeManager: boolean enableRange(int,int,java.lang.String)>  -> _SINK_
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> android.permission.SET_TIME_ZONE  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqRemomveApnContext(com.android.internal.telephony.ApnContext)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.CallManager: void setAudioMode()>  -> _SINK_
<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportFailedPasswordAttempt(int)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyPin2(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendTerminalResponse(java.lang.String,android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumTimeToLock(android.content.ComponentName,long,int)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setAutoProgressConnectingCall(boolean)>  -> _SINK_
<com.android.internal.telephony.ApnContext: void setApnSetting(com.android.internal.telephony.ApnSetting)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.CommandParams)>  -> _SINK_
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)>  -> _SINK_
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)>  -> _SINK_
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)>  -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)>  -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void sendUnsolicited(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.server.am.ActivityManagerService: boolean switchUser(int)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int setStorageEncryption(android.content.ComponentName,boolean,int)>  -> _SINK_
<com.android.internal.telephony.IccFileHandler: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setState(com.android.internal.telephony.DctConstants$State)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> android.permission.BROADCAST_STICKY  -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: void setState(com.android.internal.telephony.Call$State)>  -> _SINK_
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: boolean setInternalDataEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,int)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendCdmaSms(byte[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.usb.UsbDeviceManager: void setMassStorageBackingFile(java.lang.String)>  -> _SINK_
<com.android.server.AttributeCache: void updateConfiguration(android.content.res.Configuration)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)> android.permission.WAKE_LOCK android.permission.CHANGE_CONFIGURATION  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void println(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.DataConnection: void setRetryCount(int)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCallWaiting(boolean,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordQuality(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellInfo(java.util.List)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)>  -> _SINK_
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCameraDisabled(android.content.ComponentName,boolean,int)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void registerForNetworkLocked(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  -> _SINK_
<com.android.internal.telephony.cat.ResponseData: void writeLength(java.io.ByteArrayOutputStream,int)>  -> _SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setPreferredVoicePrivacy(boolean,android.os.Message)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)>  -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)>  -> _SINK_
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)>  -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportSuccessfulPasswordAttempt(int)>  -> _SINK_
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void setNextDialFailImmediately(boolean)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void registerForReady(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.AdnRecordLoader: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)> android.permission.WRITE_SETTINGS  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.am.ActivityManagerService: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)>  -> _SINK_
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setSmscAddress(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>  -> _SINK_
<com.android.internal.telephony.IntRangeManager: boolean disableRange(int,int,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void saveClirSetting(int)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cat.Input: boolean setIcon(android.graphics.Bitmap)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  -> _SINK_
<com.android.internal.telephony.RIL: void getIMSIForApp(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object,boolean)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.DevicePolicyManagerService$DevicePolicyData)>  -> _SINK_
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyOtaspChanged(int)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyCellInfo(java.util.List)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)>  -> _SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> android.permission.BROADCAST_STICKY android.permission.SET_TIME_ZONE  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.CallerInfoAsyncQuery: void addQueryListener(int,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)>  -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.am.ActivityStack: int startActivityMayWait(android.app.IApplicationThread,int,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.app.IActivityManager$WaitResult,android.content.res.Configuration,android.os.Bundle,int)>  -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.ApnContext: void setWaitingApns(java.util.ArrayList)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean,int)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)>  -> _SINK_
<com.android.internal.telephony.CallManager: boolean canConference(com.android.internal.telephony.Call)>  -> _SINK_
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)>  -> _SINK_
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>  -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)>  -> _SINK_
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void restoreSavedNetworkSelection(android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.UiccCard: void update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccCardStatus)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)>  -> _SINK_
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)>  -> _SINK_
<android.telephony.ServiceState: void setStateOff()>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setMute(boolean)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.CallManager: boolean startDtmf(char)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>  -> _SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.RIL$RILSender: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaRoamingPreference(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.IccCardProxy: void setVoiceRadioTech(int)>  -> _SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)>  -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCellInfoChanged(java.util.List)>  -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendDtmf(char,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String,com.android.internal.telephony.UUSInfo)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)>  -> _SINK_
<com.android.internal.telephony.RIL: void conference(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int,int)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCLIR(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ApnContext: void setEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)>  -> _SINK_
<android.telephony.ServiceState: void setStateOutOfService()>  -> _SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> android.permission.WRITE_SETTINGS  -> _SINK_
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void saveClirSetting(int)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)>  -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)>  -> _SINK_
<android.telephony.ServiceState: void setCssIndicator(int)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)>  -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,boolean)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void wipeData(int,int)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)>  -> _SINK_
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void setAutoProgressConnectingCall(boolean)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setDataRoamingEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.cat.CommandParams: boolean setIcon(android.graphics.Bitmap)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setBandMode(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setLocationUpdates(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setNetworkSelectionModeAutomatic(android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)>  -> _SINK_
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPassword(java.lang.String,int,int)>  -> _SINK_
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setGsmBroadcastActivation(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> android.permission.STOP_APP_SWITCHES  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setPhoneType(int)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> android.permission.BROADCAST_STICKY android.permission.SET_TIME_ZONE  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)>  -> _SINK_
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>  -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> android.permission.WRITE_SETTINGS  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setBandMode(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ims.IsimUiccRecords: void setVoiceMessageWaiting(int,int)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setNextDialFailImmediately(boolean)>  -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setTTYMode(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setUniversalPinState(int)>  -> _SINK_
<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)>  -> _SINK_
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)>  -> _SINK_
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaBroadcastActivation(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>  -> _SINK_
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cat.CatService: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<android.telephony.CellSignalStrengthCdma: void setDefaultValues()>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<android.webkit.DeviceMotionAndOrientationManager: void setMockOrientation(boolean,double,boolean,double,boolean,double)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCellInfo(com.android.internal.telephony.Phone,java.util.List)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)>  -> _SINK_
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.CallManager: void setEchoSuppressionEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.internal.telephony.ApnContext: void setRetryCount(int)>  -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean,int)>  -> _SINK_
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>  -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)>  -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendUSSD(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>  -> _SINK_
<com.android.internal.telephony.ApnContext: void setState(com.android.internal.telephony.DctConstants$State)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void supplyPin(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)>  -> _SINK_
<com.android.server.usb.UsbDeviceManager: void setCurrentFunctions(java.lang.String,boolean)>  -> _SINK_
<com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord: void notifyInputDevicesChanged(int[])>  -> _SINK_
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)>  -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,int)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaBroadcastConfig(int[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)>  -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK  -> _SINK_
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.internal.telephony.UiccCardApplication: void registerForLocked(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)>  -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)>  -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)>  -> _SINK_
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)>  -> _SINK_
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  -> _SINK_
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int,int)>  -> _SINK_
<com.android.internal.telephony.test.SimulatedCommands: void sendEnvelope(java.lang.String,android.os.Message)>  -> _SINK_
<com.android.browser.TabBar$TabView: void setDisplayTitle(java.lang.String)>  -> _SINK_
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>  -> _SINK_
<com.android.browser.Tab: void setParent(com.android.browser.Tab)>  -> _SINK_
<com.android.browser.provider.BrowserProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)>  -> _SINK_
<com.android.browser.Tab$3: void setupAutoFill(android.os.Message)>  -> _SINK_
<com.android.browser.provider.SnapshotProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>  -> _SINK_
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)>  -> _SINK_
<com.android.browser.NavTabScroller: void setScrollValue(int)>  -> _SINK_
<com.android.browser.SnapshotTab: boolean saveViewState(android.content.ContentValues)>  -> _SINK_
<com.android.browser.TabScrollView: void setScroll(int)>  -> _SINK_
<com.android.browser.Controller: void start(android.content.Intent)>  -> _SINK_
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> android.permission.WRITE_SYNC_SETTINGS android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS  -> _SINK_
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)>  -> _SINK_
<com.android.browser.TabBar$TabView: void setFavicon(android.graphics.drawable.Drawable)>  -> _SINK_
<com.android.browser.NavTabScroller: void setOrientation(int)>  -> _SINK_
<com.android.browser.provider.BrowserProvider2: int updateBookmarksInTransaction(android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> com.android.browser.permission.READ_HISTORY_BOOKMARKS  -> _SINK_
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)>  -> _SINK_
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)>  -> _SINK_
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>  -> _SINK_
<com.android.browser.provider.BrowserProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  -> _SINK_
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)>  -> _SINK_
<com.android.browser.NavigationBarTablet: void setFocusState(boolean)>  -> _SINK_
<com.android.browser.TabBar$TabView: void dispatchDraw(android.graphics.Canvas)>  -> _SINK_
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)>  -> _SINK_
<com.android.browser.NavigationBarTablet: void setCurrentUrlIsBookmark(boolean)>  -> _SINK_
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)>  -> _SINK_
<com.android.browser.DataController: void updateVisitedHistory(java.lang.String)>  -> _SINK_
<com.android.browser.NavigationBarTablet: void setFavicon(android.graphics.Bitmap)>  -> _SINK_
<com.android.browser.provider.BrowserProvider2: android.content.ContentValues extractImageValues(android.content.ContentValues,java.lang.String)>  -> _SINK_
<com.android.browser.Tab: void setWebView(android.webkit.WebView)>  -> _SINK_
<com.android.browser.homepages.Template$HashMapEntityData: void writeValue(java.io.OutputStream,java.lang.String)>  -> _SINK_
<com.android.browser.NavigationBarTablet: void setTitleBar(com.android.browser.TitleBar)>  -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean canMakeReadOnly(int)>  -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int connect(int,int)>  -> _SINK_
<com.android.nfc.NfcService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.nfc.INfcAdapterExtras$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.nfc.ndefpush.NdefPushClient: boolean push(android.nfc.NdefMessage)>  -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushMessage(android.app.Activity,android.nfc.NdefMessage)>  -> _SINK_
<com.android.nfc.NfcService$NfcAdapterExtrasService: void setCardEmulationRoute(java.lang.String,int)>  -> _SINK_
<android.nfc.INfcTag$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>  -> _SINK_
<com.android.nfc.NfcService$NfcServiceHandler: void handleMessage(android.os.Message)>  -> _SINK_
<com.android.nfc.handover.HandoverTransfer: void whitelistOppDevice(android.bluetooth.BluetoothDevice)>  -> _SINK_
<com.android.nfc.NfcDispatcher$DispatchInfo: boolean tryStartActivity(android.content.Intent)>  -> _SINK_
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean ndefIsWritable(int)>  -> _SINK_
<com.android.nfc.NfcService$TagService: android.nfc.Tag rediscover(int)>  -> _SINK_
<android.nfc.tech.MifareClassic: void decrement(int,int)> android.permission.NFC  -> _SINK_
<com.android.nfc.NfcService: void onSeApduReceived(byte[])>  -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: void send(int,byte[])>  -> _SINK_
<com.android.nfc.P2pLinkManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.nfc.P2pLinkManager: void onSendComplete(android.nfc.NdefMessage,long)>  -> _SINK_
<com.android.nfc.NfceeAccessControl: boolean check(android.content.pm.ApplicationInfo)>  -> _SINK_
<com.android.nfc.NfcDispatcher: boolean tryTech(com.android.nfc.NfcDispatcher$DispatchInfo,android.nfc.Tag)>  -> _SINK_
<com.android.nfc.handover.HandoverClient: android.nfc.NdefMessage sendHandoverRequest(android.nfc.NdefMessage)>  -> _SINK_
<com.android.nfc.NfcService: void onCardEmulationAidSelected(byte[])>  -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int reconnect(int)>  -> _SINK_
<com.android.nfc.NfcService$NfcAdapterExtrasService: android.os.Bundle open(java.lang.String,android.os.IBinder)> android.permission.NFC  -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.nfc.NfcService: void onSeMifareAccess(byte[])>  -> _SINK_
<com.android.nfc.handover.HandoverService: void createHandoverTransfer(com.android.nfc.handover.PendingHandoverTransfer)>  -> _SINK_
<android.nfc.tech.NfcF: void setTimeout(int)>  -> _SINK_
<com.android.nfc.P2pLinkManager: boolean handleMessage(android.os.Message)>  -> _SINK_
<android.nfc.tech.NfcA: void setTimeout(int)>  -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: void setP2pInitiatorModes(int)>  -> _SINK_
<com.android.nfc.NfcService: void saveNfcOnSetting(boolean)>  -> _SINK_
<android.nfc.tech.IsoDep: void setTimeout(int)>  -> _SINK_
<android.nfc.tech.MifareClassic: void setTimeout(int)>  -> _SINK_
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>  -> _SINK_
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)>  -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setNdefPushCallback(android.nfc.INdefPushCallback)>  -> _SINK_
<com.android.nfc.NfcDispatcher: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<com.android.nfc.dhimpl.NativeNfcTag: void addNdefTechnology(android.nfc.NdefMessage,int,int,int,int,int)>  -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void setCardEmulationRoute(java.lang.String,int)>  -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>  -> _SINK_
<com.android.nfc.NfcService: void sendMockNdefTag(android.nfc.NdefMessage)> android.permission.GET_TASKS android.permission.BLUETOOTH android.permission.WRITE_SETTINGS android.permission.VIBRATE android.permission.BLUETOOTH_ADMIN  -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int setTimeout(int,int)>  -> _SINK_
<android.nfc.INdefPushCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void setNdefPushCallback(android.nfc.INdefPushCallback)>  -> _SINK_
<android.nfc.NfcActivityManager: void setOnNdefPushCompleteCallback(android.app.Activity,android.nfc.NfcAdapter$OnNdefPushCompleteCallback)>  -> _SINK_
<android.nfc.tech.MifareUltralight: void setTimeout(int)>  -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void setP2pModes(int,int)>  -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefMakeReadOnly(int)>  -> _SINK_
<com.android.nfc.NfceeAccessControl: boolean check(int,java.lang.String)>  -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushMessageCallback(android.app.Activity,android.nfc.NfcAdapter$CreateNdefMessageCallback)>  -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle open(java.lang.String,android.os.IBinder)>  -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: void setP2pTargetModes(int)>  -> _SINK_
<com.android.nfc.dhimpl.NativeNfcManager: boolean setTimeout(int,int)>  -> _SINK_
<android.nfc.INfcAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  -> _SINK_
<com.android.nfc.handover.HandoverService$1: void onReceive(android.content.Context,android.content.Intent)>  -> _SINK_
<com.android.nfc.handover.HandoverService: void onTransferComplete(com.android.nfc.handover.HandoverTransfer,boolean)>  -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setP2pModes(int,int)>  -> _SINK_
<com.android.nfc.NfcService$NfcAdapterService: void dispatch(android.nfc.Tag)>  -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void authenticate(java.lang.String,byte[])> android.permission.NFC  -> _SINK_
<com.android.nfc.dhimpl.NativeLlcpSocket: void send(byte[])>  -> _SINK_
<com.android.nfc.NfcService$TagService: int ndefWrite(int,android.nfc.NdefMessage)>  -> _SINK_
<com.android.nfc.P2pLinkManager: void onReceiveComplete(android.nfc.NdefMessage)>  -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushContentUriCallback(android.app.Activity,android.nfc.NfcAdapter$CreateBeamUrisCallback)>  -> _SINK_
<com.android.nfc.snep.SnepMessenger: void sendMessage(com.android.nfc.snep.SnepMessage)>  -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int formatNdef(int,byte[])>  -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefWrite(int,android.nfc.NdefMessage)>  -> _SINK_
<android.nfc.tech.MifareClassic: void increment(int,int)> android.permission.NFC  -> _SINK_
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])>  -> _SINK_
<com.android.nfc.NfceeAccessControl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  -> _SINK_
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)>  -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int close(int)>  -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushContentUri(android.app.Activity,android.net.Uri[])>  -> _SINK_
<android.nfc.NfcAdapter: void setP2pModes(int,int)>  -> _SINK_
<com.android.nfc.handover.HandoverManager: void whitelistOppDevice(android.bluetooth.BluetoothDevice)>  -> _SINK_
<com.android.nfc.NfcService$TagService: int setTimeout(int,int)>  -> _SINK_
<com.android.nfc.handover.HandoverTransfer: void onScanCompleted(java.lang.String,android.net.Uri)>  -> _SINK_
<com.android.nfc.dhimpl.NativeP2pDevice: boolean send(byte[])>  -> _SINK_
